
RemoteLora.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f68  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003028  08003028  00013028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003058  08003058  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003058  08003058  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003058  08003058  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003058  08003058  00013058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800305c  0800305c  0001305c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003060  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  2000000c  0800306c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  0800306c  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   000058bc  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001441  00000000  00000000  00025933  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000608  00000000  00000000  00026d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000484  00000000  00000000  00027380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000f1f7  00000000  00000000  00027804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000078e6  00000000  00000000  000369fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00059a93  00000000  00000000  0003e2e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001474  00000000  00000000  00097d74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000991e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003010 	.word	0x08003010

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003010 	.word	0x08003010

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 80003f4:	b590      	push	{r4, r7, lr}
 80003f6:	b08f      	sub	sp, #60	; 0x3c
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 80003fc:	200c      	movs	r0, #12
 80003fe:	183b      	adds	r3, r7, r0
 8000400:	22b2      	movs	r2, #178	; 0xb2
 8000402:	32ff      	adds	r2, #255	; 0xff
 8000404:	621a      	str	r2, [r3, #32]
	new_LoRa.spredingFactor        = SF_7      ;
 8000406:	183b      	adds	r3, r7, r0
 8000408:	2224      	movs	r2, #36	; 0x24
 800040a:	2107      	movs	r1, #7
 800040c:	5499      	strb	r1, [r3, r2]
	new_LoRa.bandWidth			   = BW_125KHz ;
 800040e:	183b      	adds	r3, r7, r0
 8000410:	2225      	movs	r2, #37	; 0x25
 8000412:	2107      	movs	r1, #7
 8000414:	5499      	strb	r1, [r3, r2]
	new_LoRa.crcRate               = CR_4_5    ;
 8000416:	183b      	adds	r3, r7, r0
 8000418:	2226      	movs	r2, #38	; 0x26
 800041a:	2101      	movs	r1, #1
 800041c:	5499      	strb	r1, [r3, r2]
	new_LoRa.power				   = POWER_20db;
 800041e:	183b      	adds	r3, r7, r0
 8000420:	222a      	movs	r2, #42	; 0x2a
 8000422:	21ff      	movs	r1, #255	; 0xff
 8000424:	5499      	strb	r1, [r3, r2]
	new_LoRa.overCurrentProtection = 100       ;
 8000426:	183b      	adds	r3, r7, r0
 8000428:	222b      	movs	r2, #43	; 0x2b
 800042a:	2164      	movs	r1, #100	; 0x64
 800042c:	5499      	strb	r1, [r3, r2]
	new_LoRa.preamble			   = 8         ;
 800042e:	0001      	movs	r1, r0
 8000430:	187b      	adds	r3, r7, r1
 8000432:	2208      	movs	r2, #8
 8000434:	851a      	strh	r2, [r3, #40]	; 0x28

	return new_LoRa;
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	187a      	adds	r2, r7, r1
 800043a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800043c:	c313      	stmia	r3!, {r0, r1, r4}
 800043e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000440:	c313      	stmia	r3!, {r0, r1, r4}
 8000442:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000444:	c313      	stmia	r3!, {r0, r1, r4}
 8000446:	ca03      	ldmia	r2!, {r0, r1}
 8000448:	c303      	stmia	r3!, {r0, r1}
}
 800044a:	6878      	ldr	r0, [r7, #4]
 800044c:	46bd      	mov	sp, r7
 800044e:	b00f      	add	sp, #60	; 0x3c
 8000450:	bd90      	pop	{r4, r7, pc}

08000452 <LoRa_reset>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 8000452:	b580      	push	{r7, lr}
 8000454:	b082      	sub	sp, #8
 8000456:	af00      	add	r7, sp, #0
 8000458:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	6898      	ldr	r0, [r3, #8]
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	899b      	ldrh	r3, [r3, #12]
 8000462:	2200      	movs	r2, #0
 8000464:	0019      	movs	r1, r3
 8000466:	f001 fa04 	bl	8001872 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800046a:	200a      	movs	r0, #10
 800046c:	f000 ff9c 	bl	80013a8 <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	6898      	ldr	r0, [r3, #8]
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	899b      	ldrh	r3, [r3, #12]
 8000478:	2201      	movs	r2, #1
 800047a:	0019      	movs	r1, r3
 800047c:	f001 f9f9 	bl	8001872 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000480:	23fa      	movs	r3, #250	; 0xfa
 8000482:	009b      	lsls	r3, r3, #2
 8000484:	0018      	movs	r0, r3
 8000486:	f000 ff8f 	bl	80013a8 <HAL_Delay>
}
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	46bd      	mov	sp, r7
 800048e:	b002      	add	sp, #8
 8000490:	bd80      	pop	{r7, pc}

08000492 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8000492:	b5b0      	push	{r4, r5, r7, lr}
 8000494:	b084      	sub	sp, #16
 8000496:	af00      	add	r7, sp, #0
 8000498:	6078      	str	r0, [r7, #4]
 800049a:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 800049c:	250e      	movs	r5, #14
 800049e:	197c      	adds	r4, r7, r5
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	2101      	movs	r1, #1
 80004a4:	0018      	movs	r0, r3
 80004a6:	f000 f9e8 	bl	800087a <LoRa_read>
 80004aa:	0003      	movs	r3, r0
 80004ac:	7023      	strb	r3, [r4, #0]
	data = read;
 80004ae:	200f      	movs	r0, #15
 80004b0:	183b      	adds	r3, r7, r0
 80004b2:	0029      	movs	r1, r5
 80004b4:	187a      	adds	r2, r7, r1
 80004b6:	7812      	ldrb	r2, [r2, #0]
 80004b8:	701a      	strb	r2, [r3, #0]

	if(mode == SLEEP_MODE){
 80004ba:	683b      	ldr	r3, [r7, #0]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d109      	bne.n	80004d4 <LoRa_gotoMode+0x42>
		data = (read & 0xF8) | 0x00;
 80004c0:	183b      	adds	r3, r7, r0
 80004c2:	187a      	adds	r2, r7, r1
 80004c4:	7812      	ldrb	r2, [r2, #0]
 80004c6:	2107      	movs	r1, #7
 80004c8:	438a      	bics	r2, r1
 80004ca:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = SLEEP_MODE;
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	2200      	movs	r2, #0
 80004d0:	61da      	str	r2, [r3, #28]
 80004d2:	e04e      	b.n	8000572 <LoRa_gotoMode+0xe0>
	}else if (mode == STNBY_MODE){
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	2b01      	cmp	r3, #1
 80004d8:	d110      	bne.n	80004fc <LoRa_gotoMode+0x6a>
		data = (read & 0xF8) | 0x01;
 80004da:	230e      	movs	r3, #14
 80004dc:	18fb      	adds	r3, r7, r3
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	b25b      	sxtb	r3, r3
 80004e2:	2207      	movs	r2, #7
 80004e4:	4393      	bics	r3, r2
 80004e6:	b25b      	sxtb	r3, r3
 80004e8:	2201      	movs	r2, #1
 80004ea:	4313      	orrs	r3, r2
 80004ec:	b25a      	sxtb	r2, r3
 80004ee:	230f      	movs	r3, #15
 80004f0:	18fb      	adds	r3, r7, r3
 80004f2:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = STNBY_MODE;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2201      	movs	r2, #1
 80004f8:	61da      	str	r2, [r3, #28]
 80004fa:	e03a      	b.n	8000572 <LoRa_gotoMode+0xe0>
	}else if (mode == TRANSMIT_MODE){
 80004fc:	683b      	ldr	r3, [r7, #0]
 80004fe:	2b03      	cmp	r3, #3
 8000500:	d110      	bne.n	8000524 <LoRa_gotoMode+0x92>
		data = (read & 0xF8) | 0x03;
 8000502:	230e      	movs	r3, #14
 8000504:	18fb      	adds	r3, r7, r3
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	b25b      	sxtb	r3, r3
 800050a:	2207      	movs	r2, #7
 800050c:	4393      	bics	r3, r2
 800050e:	b25b      	sxtb	r3, r3
 8000510:	2203      	movs	r2, #3
 8000512:	4313      	orrs	r3, r2
 8000514:	b25a      	sxtb	r2, r3
 8000516:	230f      	movs	r3, #15
 8000518:	18fb      	adds	r3, r7, r3
 800051a:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = TRANSMIT_MODE;
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	2203      	movs	r2, #3
 8000520:	61da      	str	r2, [r3, #28]
 8000522:	e026      	b.n	8000572 <LoRa_gotoMode+0xe0>
	}else if (mode == RXCONTIN_MODE){
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	2b05      	cmp	r3, #5
 8000528:	d110      	bne.n	800054c <LoRa_gotoMode+0xba>
		data = (read & 0xF8) | 0x05;
 800052a:	230e      	movs	r3, #14
 800052c:	18fb      	adds	r3, r7, r3
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	b25b      	sxtb	r3, r3
 8000532:	2207      	movs	r2, #7
 8000534:	4393      	bics	r3, r2
 8000536:	b25b      	sxtb	r3, r3
 8000538:	2205      	movs	r2, #5
 800053a:	4313      	orrs	r3, r2
 800053c:	b25a      	sxtb	r2, r3
 800053e:	230f      	movs	r3, #15
 8000540:	18fb      	adds	r3, r7, r3
 8000542:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = RXCONTIN_MODE;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2205      	movs	r2, #5
 8000548:	61da      	str	r2, [r3, #28]
 800054a:	e012      	b.n	8000572 <LoRa_gotoMode+0xe0>
	}else if (mode == RXSINGLE_MODE){
 800054c:	683b      	ldr	r3, [r7, #0]
 800054e:	2b06      	cmp	r3, #6
 8000550:	d10f      	bne.n	8000572 <LoRa_gotoMode+0xe0>
		data = (read & 0xF8) | 0x06;
 8000552:	230e      	movs	r3, #14
 8000554:	18fb      	adds	r3, r7, r3
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	b25b      	sxtb	r3, r3
 800055a:	2207      	movs	r2, #7
 800055c:	4393      	bics	r3, r2
 800055e:	b25b      	sxtb	r3, r3
 8000560:	2206      	movs	r2, #6
 8000562:	4313      	orrs	r3, r2
 8000564:	b25a      	sxtb	r2, r3
 8000566:	230f      	movs	r3, #15
 8000568:	18fb      	adds	r3, r7, r3
 800056a:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = RXSINGLE_MODE;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	2206      	movs	r2, #6
 8000570:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8000572:	230f      	movs	r3, #15
 8000574:	18fb      	adds	r3, r7, r3
 8000576:	781a      	ldrb	r2, [r3, #0]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	2101      	movs	r1, #1
 800057c:	0018      	movs	r0, r3
 800057e:	f000 f99a 	bl	80008b6 <LoRa_write>
	//HAL_Delay(10);
}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	46bd      	mov	sp, r7
 8000586:	b004      	add	sp, #16
 8000588:	bdb0      	pop	{r4, r5, r7, pc}

0800058a <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 800058a:	b590      	push	{r4, r7, lr}
 800058c:	b085      	sub	sp, #20
 800058e:	af00      	add	r7, sp, #0
 8000590:	60f8      	str	r0, [r7, #12]
 8000592:	60b9      	str	r1, [r7, #8]
 8000594:	603b      	str	r3, [r7, #0]
 8000596:	1dbb      	adds	r3, r7, #6
 8000598:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	6818      	ldr	r0, [r3, #0]
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	889b      	ldrh	r3, [r3, #4]
 80005a2:	2200      	movs	r2, #0
 80005a4:	0019      	movs	r1, r3
 80005a6:	f001 f964 	bl	8001872 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	6998      	ldr	r0, [r3, #24]
 80005ae:	23fa      	movs	r3, #250	; 0xfa
 80005b0:	00dc      	lsls	r4, r3, #3
 80005b2:	1dbb      	adds	r3, r7, #6
 80005b4:	881a      	ldrh	r2, [r3, #0]
 80005b6:	68b9      	ldr	r1, [r7, #8]
 80005b8:	0023      	movs	r3, r4
 80005ba:	f001 fe89 	bl	80022d0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	0018      	movs	r0, r3
 80005c6:	f002 fb17 	bl	8002bf8 <HAL_SPI_GetState>
 80005ca:	0003      	movs	r3, r0
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d1f7      	bne.n	80005c0 <LoRa_readReg+0x36>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	6998      	ldr	r0, [r3, #24]
 80005d4:	23fa      	movs	r3, #250	; 0xfa
 80005d6:	00dc      	lsls	r4, r3, #3
 80005d8:	2320      	movs	r3, #32
 80005da:	18fb      	adds	r3, r7, r3
 80005dc:	881a      	ldrh	r2, [r3, #0]
 80005de:	6839      	ldr	r1, [r7, #0]
 80005e0:	0023      	movs	r3, r4
 80005e2:	f001 ffd5 	bl	8002590 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	0018      	movs	r0, r3
 80005ee:	f002 fb03 	bl	8002bf8 <HAL_SPI_GetState>
 80005f2:	0003      	movs	r3, r0
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d1f7      	bne.n	80005e8 <LoRa_readReg+0x5e>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	6818      	ldr	r0, [r3, #0]
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	889b      	ldrh	r3, [r3, #4]
 8000600:	2201      	movs	r2, #1
 8000602:	0019      	movs	r1, r3
 8000604:	f001 f935 	bl	8001872 <HAL_GPIO_WritePin>
}
 8000608:	46c0      	nop			; (mov r8, r8)
 800060a:	46bd      	mov	sp, r7
 800060c:	b005      	add	sp, #20
 800060e:	bd90      	pop	{r4, r7, pc}

08000610 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000610:	b590      	push	{r4, r7, lr}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
 8000616:	60f8      	str	r0, [r7, #12]
 8000618:	60b9      	str	r1, [r7, #8]
 800061a:	603b      	str	r3, [r7, #0]
 800061c:	1dbb      	adds	r3, r7, #6
 800061e:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	6818      	ldr	r0, [r3, #0]
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	889b      	ldrh	r3, [r3, #4]
 8000628:	2200      	movs	r2, #0
 800062a:	0019      	movs	r1, r3
 800062c:	f001 f921 	bl	8001872 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	6998      	ldr	r0, [r3, #24]
 8000634:	23fa      	movs	r3, #250	; 0xfa
 8000636:	00dc      	lsls	r4, r3, #3
 8000638:	1dbb      	adds	r3, r7, #6
 800063a:	881a      	ldrh	r2, [r3, #0]
 800063c:	68b9      	ldr	r1, [r7, #8]
 800063e:	0023      	movs	r3, r4
 8000640:	f001 fe46 	bl	80022d0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000644:	46c0      	nop			; (mov r8, r8)
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	699b      	ldr	r3, [r3, #24]
 800064a:	0018      	movs	r0, r3
 800064c:	f002 fad4 	bl	8002bf8 <HAL_SPI_GetState>
 8000650:	0003      	movs	r3, r0
 8000652:	2b01      	cmp	r3, #1
 8000654:	d1f7      	bne.n	8000646 <LoRa_writeReg+0x36>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	6998      	ldr	r0, [r3, #24]
 800065a:	23fa      	movs	r3, #250	; 0xfa
 800065c:	00dc      	lsls	r4, r3, #3
 800065e:	2320      	movs	r3, #32
 8000660:	18fb      	adds	r3, r7, r3
 8000662:	881a      	ldrh	r2, [r3, #0]
 8000664:	6839      	ldr	r1, [r7, #0]
 8000666:	0023      	movs	r3, r4
 8000668:	f001 fe32 	bl	80022d0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800066c:	46c0      	nop			; (mov r8, r8)
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	699b      	ldr	r3, [r3, #24]
 8000672:	0018      	movs	r0, r3
 8000674:	f002 fac0 	bl	8002bf8 <HAL_SPI_GetState>
 8000678:	0003      	movs	r3, r0
 800067a:	2b01      	cmp	r3, #1
 800067c:	d1f7      	bne.n	800066e <LoRa_writeReg+0x5e>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	6818      	ldr	r0, [r3, #0]
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	889b      	ldrh	r3, [r3, #4]
 8000686:	2201      	movs	r2, #1
 8000688:	0019      	movs	r1, r3
 800068a:	f001 f8f2 	bl	8001872 <HAL_GPIO_WritePin>
}
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	46bd      	mov	sp, r7
 8000692:	b005      	add	sp, #20
 8000694:	bd90      	pop	{r4, r7, pc}

08000696 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8000696:	b590      	push	{r4, r7, lr}
 8000698:	b085      	sub	sp, #20
 800069a:	af00      	add	r7, sp, #0
 800069c:	6078      	str	r0, [r7, #4]
 800069e:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	04db      	lsls	r3, r3, #19
 80006a4:	115b      	asrs	r3, r3, #5
 80006a6:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	0c1a      	lsrs	r2, r3, #16
 80006ac:	240b      	movs	r4, #11
 80006ae:	193b      	adds	r3, r7, r4
 80006b0:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegFrMsb, data);
 80006b2:	193b      	adds	r3, r7, r4
 80006b4:	781a      	ldrb	r2, [r3, #0]
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2106      	movs	r1, #6
 80006ba:	0018      	movs	r0, r3
 80006bc:	f000 f8fb 	bl	80008b6 <LoRa_write>
	HAL_Delay(5);
 80006c0:	2005      	movs	r0, #5
 80006c2:	f000 fe71 	bl	80013a8 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	0a1a      	lsrs	r2, r3, #8
 80006ca:	193b      	adds	r3, r7, r4
 80006cc:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegFrMid, data);
 80006ce:	193b      	adds	r3, r7, r4
 80006d0:	781a      	ldrb	r2, [r3, #0]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	2107      	movs	r1, #7
 80006d6:	0018      	movs	r0, r3
 80006d8:	f000 f8ed 	bl	80008b6 <LoRa_write>
	HAL_Delay(5);
 80006dc:	2005      	movs	r0, #5
 80006de:	f000 fe63 	bl	80013a8 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 80006e2:	193b      	adds	r3, r7, r4
 80006e4:	68fa      	ldr	r2, [r7, #12]
 80006e6:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegFrLsb, data);
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	781a      	ldrb	r2, [r3, #0]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2108      	movs	r1, #8
 80006f0:	0018      	movs	r0, r3
 80006f2:	f000 f8e0 	bl	80008b6 <LoRa_write>
	HAL_Delay(5);
 80006f6:	2005      	movs	r0, #5
 80006f8:	f000 fe56 	bl	80013a8 <HAL_Delay>
}
 80006fc:	46c0      	nop			; (mov r8, r8)
 80006fe:	46bd      	mov	sp, r7
 8000700:	b005      	add	sp, #20
 8000702:	bd90      	pop	{r4, r7, pc}

08000704 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8000704:	b5b0      	push	{r4, r5, r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	2b0c      	cmp	r3, #12
 8000712:	dd01      	ble.n	8000718 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8000714:	230c      	movs	r3, #12
 8000716:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	2b06      	cmp	r3, #6
 800071c:	dc01      	bgt.n	8000722 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 800071e:	2307      	movs	r3, #7
 8000720:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000722:	250f      	movs	r5, #15
 8000724:	197c      	adds	r4, r7, r5
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	211e      	movs	r1, #30
 800072a:	0018      	movs	r0, r3
 800072c:	f000 f8a5 	bl	800087a <LoRa_read>
 8000730:	0003      	movs	r3, r0
 8000732:	7023      	strb	r3, [r4, #0]
	HAL_Delay(10);
 8000734:	200a      	movs	r0, #10
 8000736:	f000 fe37 	bl	80013a8 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	b2db      	uxtb	r3, r3
 800073e:	011b      	lsls	r3, r3, #4
 8000740:	b2d9      	uxtb	r1, r3
 8000742:	197b      	adds	r3, r7, r5
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	220f      	movs	r2, #15
 8000748:	4013      	ands	r3, r2
 800074a:	b2da      	uxtb	r2, r3
 800074c:	200e      	movs	r0, #14
 800074e:	183b      	adds	r3, r7, r0
 8000750:	188a      	adds	r2, r1, r2
 8000752:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8000754:	183b      	adds	r3, r7, r0
 8000756:	781a      	ldrb	r2, [r3, #0]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	211e      	movs	r1, #30
 800075c:	0018      	movs	r0, r3
 800075e:	f000 f8aa 	bl	80008b6 <LoRa_write>
	HAL_Delay(10);
 8000762:	200a      	movs	r0, #10
 8000764:	f000 fe20 	bl	80013a8 <HAL_Delay>
}
 8000768:	46c0      	nop			; (mov r8, r8)
 800076a:	46bd      	mov	sp, r7
 800076c:	b004      	add	sp, #16
 800076e:	bdb0      	pop	{r4, r5, r7, pc}

08000770 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power e.g POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	000a      	movs	r2, r1
 800077a:	1cfb      	adds	r3, r7, #3
 800077c:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegPaConfig, power);
 800077e:	1cfb      	adds	r3, r7, #3
 8000780:	781a      	ldrb	r2, [r3, #0]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	2109      	movs	r1, #9
 8000786:	0018      	movs	r0, r3
 8000788:	f000 f895 	bl	80008b6 <LoRa_write>
	HAL_Delay(10);
 800078c:	200a      	movs	r0, #10
 800078e:	f000 fe0b 	bl	80013a8 <HAL_Delay>
}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	46bd      	mov	sp, r7
 8000796:	b002      	add	sp, #8
 8000798:	bd80      	pop	{r7, pc}

0800079a <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 800079a:	b580      	push	{r7, lr}
 800079c:	b084      	sub	sp, #16
 800079e:	af00      	add	r7, sp, #0
 80007a0:	6078      	str	r0, [r7, #4]
 80007a2:	000a      	movs	r2, r1
 80007a4:	1cfb      	adds	r3, r7, #3
 80007a6:	701a      	strb	r2, [r3, #0]
	uint8_t	OcpTrim = 0;
 80007a8:	230f      	movs	r3, #15
 80007aa:	18fb      	adds	r3, r7, r3
 80007ac:	2200      	movs	r2, #0
 80007ae:	701a      	strb	r2, [r3, #0]

	if(current<45)
 80007b0:	1cfb      	adds	r3, r7, #3
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b2c      	cmp	r3, #44	; 0x2c
 80007b6:	d802      	bhi.n	80007be <LoRa_setOCP+0x24>
		current = 45;
 80007b8:	1cfb      	adds	r3, r7, #3
 80007ba:	222d      	movs	r2, #45	; 0x2d
 80007bc:	701a      	strb	r2, [r3, #0]
	if(current>240)
 80007be:	1cfb      	adds	r3, r7, #3
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2bf0      	cmp	r3, #240	; 0xf0
 80007c4:	d902      	bls.n	80007cc <LoRa_setOCP+0x32>
		current = 240;
 80007c6:	1cfb      	adds	r3, r7, #3
 80007c8:	22f0      	movs	r2, #240	; 0xf0
 80007ca:	701a      	strb	r2, [r3, #0]

	if(current <= 120)
 80007cc:	1cfb      	adds	r3, r7, #3
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	2b78      	cmp	r3, #120	; 0x78
 80007d2:	d80c      	bhi.n	80007ee <LoRa_setOCP+0x54>
		OcpTrim = (current - 45)/5;
 80007d4:	1cfb      	adds	r3, r7, #3
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	3b2d      	subs	r3, #45	; 0x2d
 80007da:	2105      	movs	r1, #5
 80007dc:	0018      	movs	r0, r3
 80007de:	f7ff fd1d 	bl	800021c <__divsi3>
 80007e2:	0003      	movs	r3, r0
 80007e4:	001a      	movs	r2, r3
 80007e6:	230f      	movs	r3, #15
 80007e8:	18fb      	adds	r3, r7, r3
 80007ea:	701a      	strb	r2, [r3, #0]
 80007ec:	e00f      	b.n	800080e <LoRa_setOCP+0x74>
	else if(current <= 240)
 80007ee:	1cfb      	adds	r3, r7, #3
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	2bf0      	cmp	r3, #240	; 0xf0
 80007f4:	d80b      	bhi.n	800080e <LoRa_setOCP+0x74>
		OcpTrim = (current + 30)/10;
 80007f6:	1cfb      	adds	r3, r7, #3
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	331e      	adds	r3, #30
 80007fc:	210a      	movs	r1, #10
 80007fe:	0018      	movs	r0, r3
 8000800:	f7ff fd0c 	bl	800021c <__divsi3>
 8000804:	0003      	movs	r3, r0
 8000806:	001a      	movs	r2, r3
 8000808:	230f      	movs	r3, #15
 800080a:	18fb      	adds	r3, r7, r3
 800080c:	701a      	strb	r2, [r3, #0]

	OcpTrim = OcpTrim + (1 << 5);
 800080e:	210f      	movs	r1, #15
 8000810:	187b      	adds	r3, r7, r1
 8000812:	187a      	adds	r2, r7, r1
 8000814:	7812      	ldrb	r2, [r2, #0]
 8000816:	3220      	adds	r2, #32
 8000818:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 800081a:	187b      	adds	r3, r7, r1
 800081c:	781a      	ldrb	r2, [r3, #0]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	210b      	movs	r1, #11
 8000822:	0018      	movs	r0, r3
 8000824:	f000 f847 	bl	80008b6 <LoRa_write>
	HAL_Delay(10);
 8000828:	200a      	movs	r0, #10
 800082a:	f000 fdbd 	bl	80013a8 <HAL_Delay>
}
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	46bd      	mov	sp, r7
 8000832:	b004      	add	sp, #16
 8000834:	bd80      	pop	{r7, pc}

08000836 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8000836:	b5b0      	push	{r4, r5, r7, lr}
 8000838:	b084      	sub	sp, #16
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 800083e:	250f      	movs	r5, #15
 8000840:	197c      	adds	r4, r7, r5
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	211e      	movs	r1, #30
 8000846:	0018      	movs	r0, r3
 8000848:	f000 f817 	bl	800087a <LoRa_read>
 800084c:	0003      	movs	r3, r0
 800084e:	7023      	strb	r3, [r4, #0]

	data = read | 0x07;
 8000850:	200e      	movs	r0, #14
 8000852:	183b      	adds	r3, r7, r0
 8000854:	197a      	adds	r2, r7, r5
 8000856:	7812      	ldrb	r2, [r2, #0]
 8000858:	2107      	movs	r1, #7
 800085a:	430a      	orrs	r2, r1
 800085c:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 800085e:	183b      	adds	r3, r7, r0
 8000860:	781a      	ldrb	r2, [r3, #0]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	211e      	movs	r1, #30
 8000866:	0018      	movs	r0, r3
 8000868:	f000 f825 	bl	80008b6 <LoRa_write>
	HAL_Delay(10);
 800086c:	200a      	movs	r0, #10
 800086e:	f000 fd9b 	bl	80013a8 <HAL_Delay>
}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	46bd      	mov	sp, r7
 8000876:	b004      	add	sp, #16
 8000878:	bdb0      	pop	{r4, r5, r7, pc}

0800087a <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 800087a:	b590      	push	{r4, r7, lr}
 800087c:	b087      	sub	sp, #28
 800087e:	af02      	add	r7, sp, #8
 8000880:	6078      	str	r0, [r7, #4]
 8000882:	000a      	movs	r2, r1
 8000884:	1cfb      	adds	r3, r7, #3
 8000886:	701a      	strb	r2, [r3, #0]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8000888:	1cfb      	adds	r3, r7, #3
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	227f      	movs	r2, #127	; 0x7f
 800088e:	4013      	ands	r3, r2
 8000890:	b2da      	uxtb	r2, r3
 8000892:	210e      	movs	r1, #14
 8000894:	187b      	adds	r3, r7, r1
 8000896:	701a      	strb	r2, [r3, #0]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8000898:	240f      	movs	r4, #15
 800089a:	193b      	adds	r3, r7, r4
 800089c:	1879      	adds	r1, r7, r1
 800089e:	6878      	ldr	r0, [r7, #4]
 80008a0:	2201      	movs	r2, #1
 80008a2:	9200      	str	r2, [sp, #0]
 80008a4:	2201      	movs	r2, #1
 80008a6:	f7ff fe70 	bl	800058a <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 80008aa:	193b      	adds	r3, r7, r4
 80008ac:	781b      	ldrb	r3, [r3, #0]
}
 80008ae:	0018      	movs	r0, r3
 80008b0:	46bd      	mov	sp, r7
 80008b2:	b005      	add	sp, #20
 80008b4:	bd90      	pop	{r4, r7, pc}

080008b6 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b086      	sub	sp, #24
 80008ba:	af02      	add	r7, sp, #8
 80008bc:	6078      	str	r0, [r7, #4]
 80008be:	0008      	movs	r0, r1
 80008c0:	0011      	movs	r1, r2
 80008c2:	1cfb      	adds	r3, r7, #3
 80008c4:	1c02      	adds	r2, r0, #0
 80008c6:	701a      	strb	r2, [r3, #0]
 80008c8:	1cbb      	adds	r3, r7, #2
 80008ca:	1c0a      	adds	r2, r1, #0
 80008cc:	701a      	strb	r2, [r3, #0]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 80008ce:	1cfb      	adds	r3, r7, #3
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2280      	movs	r2, #128	; 0x80
 80008d4:	4252      	negs	r2, r2
 80008d6:	4313      	orrs	r3, r2
 80008d8:	b2da      	uxtb	r2, r3
 80008da:	210e      	movs	r1, #14
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	701a      	strb	r2, [r3, #0]
	data = value;
 80008e0:	200f      	movs	r0, #15
 80008e2:	183b      	adds	r3, r7, r0
 80008e4:	1cba      	adds	r2, r7, #2
 80008e6:	7812      	ldrb	r2, [r2, #0]
 80008e8:	701a      	strb	r2, [r3, #0]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 80008ea:	183b      	adds	r3, r7, r0
 80008ec:	1879      	adds	r1, r7, r1
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	2201      	movs	r2, #1
 80008f2:	9200      	str	r2, [sp, #0]
 80008f4:	2201      	movs	r2, #1
 80008f6:	f7ff fe8b 	bl	8000610 <LoRa_writeReg>
	//HAL_Delay(5);
}
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	46bd      	mov	sp, r7
 80008fe:	b004      	add	sp, #16
 8000900:	bd80      	pop	{r7, pc}

08000902 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8000902:	b590      	push	{r4, r7, lr}
 8000904:	b087      	sub	sp, #28
 8000906:	af00      	add	r7, sp, #0
 8000908:	60f8      	str	r0, [r7, #12]
 800090a:	0008      	movs	r0, r1
 800090c:	607a      	str	r2, [r7, #4]
 800090e:	0019      	movs	r1, r3
 8000910:	240b      	movs	r4, #11
 8000912:	193b      	adds	r3, r7, r4
 8000914:	1c02      	adds	r2, r0, #0
 8000916:	701a      	strb	r2, [r3, #0]
 8000918:	230a      	movs	r3, #10
 800091a:	18fb      	adds	r3, r7, r3
 800091c:	1c0a      	adds	r2, r1, #0
 800091e:	701a      	strb	r2, [r3, #0]
	uint8_t addr;
	addr = address | 0x80;
 8000920:	193b      	adds	r3, r7, r4
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	2280      	movs	r2, #128	; 0x80
 8000926:	4252      	negs	r2, r2
 8000928:	4313      	orrs	r3, r2
 800092a:	b2da      	uxtb	r2, r3
 800092c:	2417      	movs	r4, #23
 800092e:	193b      	adds	r3, r7, r4
 8000930:	701a      	strb	r2, [r3, #0]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	6818      	ldr	r0, [r3, #0]
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	889b      	ldrh	r3, [r3, #4]
 800093a:	2200      	movs	r2, #0
 800093c:	0019      	movs	r1, r3
 800093e:	f000 ff98 	bl	8001872 <HAL_GPIO_WritePin>
	//say module thai I want to write in RegFiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	6998      	ldr	r0, [r3, #24]
 8000946:	23fa      	movs	r3, #250	; 0xfa
 8000948:	00db      	lsls	r3, r3, #3
 800094a:	1939      	adds	r1, r7, r4
 800094c:	2201      	movs	r2, #1
 800094e:	f001 fcbf 	bl	80022d0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	0018      	movs	r0, r3
 800095a:	f002 f94d 	bl	8002bf8 <HAL_SPI_GetState>
 800095e:	0003      	movs	r3, r0
 8000960:	2b01      	cmp	r3, #1
 8000962:	d1f7      	bne.n	8000954 <LoRa_BurstWrite+0x52>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	6998      	ldr	r0, [r3, #24]
 8000968:	230a      	movs	r3, #10
 800096a:	18fb      	adds	r3, r7, r3
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	b29a      	uxth	r2, r3
 8000970:	23fa      	movs	r3, #250	; 0xfa
 8000972:	00db      	lsls	r3, r3, #3
 8000974:	6879      	ldr	r1, [r7, #4]
 8000976:	f001 fcab 	bl	80022d0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	0018      	movs	r0, r3
 8000982:	f002 f939 	bl	8002bf8 <HAL_SPI_GetState>
 8000986:	0003      	movs	r3, r0
 8000988:	2b01      	cmp	r3, #1
 800098a:	d1f7      	bne.n	800097c <LoRa_BurstWrite+0x7a>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	6818      	ldr	r0, [r3, #0]
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	889b      	ldrh	r3, [r3, #4]
 8000994:	2201      	movs	r2, #1
 8000996:	0019      	movs	r1, r3
 8000998:	f000 ff6b 	bl	8001872 <HAL_GPIO_WritePin>
}
 800099c:	46c0      	nop			; (mov r8, r8)
 800099e:	46bd      	mov	sp, r7
 80009a0:	b007      	add	sp, #28
 80009a2:	bd90      	pop	{r4, r7, pc}

080009a4 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]

	return 1;
 80009ac:	2301      	movs	r3, #1
}
 80009ae:	0018      	movs	r0, r3
 80009b0:	46bd      	mov	sp, r7
 80009b2:	b002      	add	sp, #8
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 80009b6:	b5b0      	push	{r4, r5, r7, lr}
 80009b8:	b086      	sub	sp, #24
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	60f8      	str	r0, [r7, #12]
 80009be:	60b9      	str	r1, [r7, #8]
 80009c0:	0019      	movs	r1, r3
 80009c2:	1dfb      	adds	r3, r7, #7
 80009c4:	701a      	strb	r2, [r3, #0]
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	1c0a      	adds	r2, r1, #0
 80009ca:	801a      	strh	r2, [r3, #0]
	uint8_t read;

	int mode = _LoRa->current_mode;
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	69db      	ldr	r3, [r3, #28]
 80009d0:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	2101      	movs	r1, #1
 80009d6:	0018      	movs	r0, r3
 80009d8:	f7ff fd5b 	bl	8000492 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 80009dc:	2513      	movs	r5, #19
 80009de:	197c      	adds	r4, r7, r5
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	210e      	movs	r1, #14
 80009e4:	0018      	movs	r0, r3
 80009e6:	f7ff ff48 	bl	800087a <LoRa_read>
 80009ea:	0003      	movs	r3, r0
 80009ec:	7023      	strb	r3, [r4, #0]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 80009ee:	197b      	adds	r3, r7, r5
 80009f0:	781a      	ldrb	r2, [r3, #0]
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	210d      	movs	r1, #13
 80009f6:	0018      	movs	r0, r3
 80009f8:	f7ff ff5d 	bl	80008b6 <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 80009fc:	1dfb      	adds	r3, r7, #7
 80009fe:	781a      	ldrb	r2, [r3, #0]
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	2122      	movs	r1, #34	; 0x22
 8000a04:	0018      	movs	r0, r3
 8000a06:	f7ff ff56 	bl	80008b6 <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8000a0a:	1dfb      	adds	r3, r7, #7
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	68ba      	ldr	r2, [r7, #8]
 8000a10:	68f8      	ldr	r0, [r7, #12]
 8000a12:	2100      	movs	r1, #0
 8000a14:	f7ff ff75 	bl	8000902 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	2103      	movs	r1, #3
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f7ff fd38 	bl	8000492 <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8000a22:	2513      	movs	r5, #19
 8000a24:	197c      	adds	r4, r7, r5
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	2112      	movs	r1, #18
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f7ff ff25 	bl	800087a <LoRa_read>
 8000a30:	0003      	movs	r3, r0
 8000a32:	7023      	strb	r3, [r4, #0]
		if((read & 0x08)!=0){
 8000a34:	197b      	adds	r3, r7, r5
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2208      	movs	r2, #8
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	d00d      	beq.n	8000a5a <LoRa_transmit+0xa4>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	22ff      	movs	r2, #255	; 0xff
 8000a42:	2112      	movs	r1, #18
 8000a44:	0018      	movs	r0, r3
 8000a46:	f7ff ff36 	bl	80008b6 <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8000a4a:	697a      	ldr	r2, [r7, #20]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	0011      	movs	r1, r2
 8000a50:	0018      	movs	r0, r3
 8000a52:	f7ff fd1e 	bl	8000492 <LoRa_gotoMode>
			return 1;
 8000a56:	2301      	movs	r3, #1
 8000a58:	e014      	b.n	8000a84 <LoRa_transmit+0xce>
		}
		else{
			if(--timeout==0){
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	1d3a      	adds	r2, r7, #4
 8000a5e:	8812      	ldrh	r2, [r2, #0]
 8000a60:	3a01      	subs	r2, #1
 8000a62:	801a      	strh	r2, [r3, #0]
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	881b      	ldrh	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d107      	bne.n	8000a7c <LoRa_transmit+0xc6>
				LoRa_gotoMode(_LoRa, mode);
 8000a6c:	697a      	ldr	r2, [r7, #20]
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	0011      	movs	r1, r2
 8000a72:	0018      	movs	r0, r3
 8000a74:	f7ff fd0d 	bl	8000492 <LoRa_gotoMode>
				return 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	e003      	b.n	8000a84 <LoRa_transmit+0xce>
			}
		}
		HAL_Delay(1);
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	f000 fc93 	bl	80013a8 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8000a82:	e7ce      	b.n	8000a22 <LoRa_transmit+0x6c>
	}

}
 8000a84:	0018      	movs	r0, r3
 8000a86:	46bd      	mov	sp, r7
 8000a88:	b006      	add	sp, #24
 8000a8a:	bdb0      	pop	{r4, r5, r7, pc}

08000a8c <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2105      	movs	r1, #5
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f7ff fcfa 	bl	8000492 <LoRa_gotoMode>
}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	b002      	add	sp, #8
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8000aa6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aa8:	b089      	sub	sp, #36	; 0x24
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	60f8      	str	r0, [r7, #12]
 8000aae:	60b9      	str	r1, [r7, #8]
 8000ab0:	1dfb      	adds	r3, r7, #7
 8000ab2:	701a      	strb	r2, [r3, #0]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8000ab4:	231f      	movs	r3, #31
 8000ab6:	18fb      	adds	r3, r7, r3
 8000ab8:	2200      	movs	r2, #0
 8000aba:	701a      	strb	r2, [r3, #0]

	for(int i=0; i<length; i++)
 8000abc:	2300      	movs	r3, #0
 8000abe:	61bb      	str	r3, [r7, #24]
 8000ac0:	e007      	b.n	8000ad2 <LoRa_receive+0x2c>
		data[i]=0;
 8000ac2:	69bb      	ldr	r3, [r7, #24]
 8000ac4:	68ba      	ldr	r2, [r7, #8]
 8000ac6:	18d3      	adds	r3, r2, r3
 8000ac8:	2200      	movs	r2, #0
 8000aca:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8000acc:	69bb      	ldr	r3, [r7, #24]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	61bb      	str	r3, [r7, #24]
 8000ad2:	1dfb      	adds	r3, r7, #7
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	69ba      	ldr	r2, [r7, #24]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	dbf2      	blt.n	8000ac2 <LoRa_receive+0x1c>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	2101      	movs	r1, #1
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f7ff fcd6 	bl	8000492 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8000ae6:	2513      	movs	r5, #19
 8000ae8:	197c      	adds	r4, r7, r5
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	2112      	movs	r1, #18
 8000aee:	0018      	movs	r0, r3
 8000af0:	f7ff fec3 	bl	800087a <LoRa_read>
 8000af4:	0003      	movs	r3, r0
 8000af6:	7023      	strb	r3, [r4, #0]
	if((read & 0x40) != 0){
 8000af8:	197b      	adds	r3, r7, r5
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2240      	movs	r2, #64	; 0x40
 8000afe:	4013      	ands	r3, r2
 8000b00:	d03f      	beq.n	8000b82 <LoRa_receive+0xdc>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	22ff      	movs	r2, #255	; 0xff
 8000b06:	2112      	movs	r1, #18
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f7ff fed4 	bl	80008b6 <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8000b0e:	2612      	movs	r6, #18
 8000b10:	19bc      	adds	r4, r7, r6
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	2113      	movs	r1, #19
 8000b16:	0018      	movs	r0, r3
 8000b18:	f7ff feaf 	bl	800087a <LoRa_read>
 8000b1c:	0003      	movs	r3, r0
 8000b1e:	7023      	strb	r3, [r4, #0]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8000b20:	197c      	adds	r4, r7, r5
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	2110      	movs	r1, #16
 8000b26:	0018      	movs	r0, r3
 8000b28:	f7ff fea7 	bl	800087a <LoRa_read>
 8000b2c:	0003      	movs	r3, r0
 8000b2e:	7023      	strb	r3, [r4, #0]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8000b30:	197b      	adds	r3, r7, r5
 8000b32:	781a      	ldrb	r2, [r3, #0]
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	210d      	movs	r1, #13
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f7ff febc 	bl	80008b6 <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8000b3e:	231f      	movs	r3, #31
 8000b40:	18fa      	adds	r2, r7, r3
 8000b42:	19bb      	adds	r3, r7, r6
 8000b44:	1df9      	adds	r1, r7, #7
 8000b46:	780c      	ldrb	r4, [r1, #0]
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	b2d8      	uxtb	r0, r3
 8000b4c:	b2e1      	uxtb	r1, r4
 8000b4e:	4288      	cmp	r0, r1
 8000b50:	d900      	bls.n	8000b54 <LoRa_receive+0xae>
 8000b52:	1c23      	adds	r3, r4, #0
 8000b54:	7013      	strb	r3, [r2, #0]
		for(int i=0; i<min; i++)
 8000b56:	2300      	movs	r3, #0
 8000b58:	617b      	str	r3, [r7, #20]
 8000b5a:	e00c      	b.n	8000b76 <LoRa_receive+0xd0>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	68ba      	ldr	r2, [r7, #8]
 8000b60:	18d4      	adds	r4, r2, r3
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	2100      	movs	r1, #0
 8000b66:	0018      	movs	r0, r3
 8000b68:	f7ff fe87 	bl	800087a <LoRa_read>
 8000b6c:	0003      	movs	r3, r0
 8000b6e:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	3301      	adds	r3, #1
 8000b74:	617b      	str	r3, [r7, #20]
 8000b76:	231f      	movs	r3, #31
 8000b78:	18fb      	adds	r3, r7, r3
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	697a      	ldr	r2, [r7, #20]
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	dbec      	blt.n	8000b5c <LoRa_receive+0xb6>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	2105      	movs	r1, #5
 8000b86:	0018      	movs	r0, r3
 8000b88:	f7ff fc83 	bl	8000492 <LoRa_gotoMode>
    return min;
 8000b8c:	231f      	movs	r3, #31
 8000b8e:	18fb      	adds	r3, r7, r3
 8000b90:	781b      	ldrb	r3, [r3, #0]
}
 8000b92:	0018      	movs	r0, r3
 8000b94:	46bd      	mov	sp, r7
 8000b96:	b009      	add	sp, #36	; 0x24
 8000b98:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000b9a <LoRa_getRSSI>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Returns the RSSI value of last received packet.
\* ----------------------------------------------------------------------------- */
int LoRa_getRSSI(LoRa* _LoRa){
 8000b9a:	b5b0      	push	{r4, r5, r7, lr}
 8000b9c:	b084      	sub	sp, #16
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
	uint8_t read;
	read = LoRa_read(_LoRa, RegPktRssiValue);
 8000ba2:	250f      	movs	r5, #15
 8000ba4:	197c      	adds	r4, r7, r5
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	211a      	movs	r1, #26
 8000baa:	0018      	movs	r0, r3
 8000bac:	f7ff fe65 	bl	800087a <LoRa_read>
 8000bb0:	0003      	movs	r3, r0
 8000bb2:	7023      	strb	r3, [r4, #0]
	return -164 + read;
 8000bb4:	197b      	adds	r3, r7, r5
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	3ba4      	subs	r3, #164	; 0xa4
}
 8000bba:	0018      	movs	r0, r3
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	b004      	add	sp, #16
 8000bc0:	bdb0      	pop	{r4, r5, r7, pc}

08000bc2 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8000bc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bc4:	b085      	sub	sp, #20
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f7ff fee9 	bl	80009a4 <LoRa_isvalid>
 8000bd2:	1e03      	subs	r3, r0, #0
 8000bd4:	d100      	bne.n	8000bd8 <LoRa_init+0x16>
 8000bd6:	e0b3      	b.n	8000d40 <LoRa_init+0x17e>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2100      	movs	r1, #0
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f7ff fc58 	bl	8000492 <LoRa_gotoMode>
			HAL_Delay(10);
 8000be2:	200a      	movs	r0, #10
 8000be4:	f000 fbe0 	bl	80013a8 <HAL_Delay>

		// turn on lora mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8000be8:	260f      	movs	r6, #15
 8000bea:	19bc      	adds	r4, r7, r6
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2101      	movs	r1, #1
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f7ff fe42 	bl	800087a <LoRa_read>
 8000bf6:	0003      	movs	r3, r0
 8000bf8:	7023      	strb	r3, [r4, #0]
			HAL_Delay(10);
 8000bfa:	200a      	movs	r0, #10
 8000bfc:	f000 fbd4 	bl	80013a8 <HAL_Delay>
			data = read | 0x80;
 8000c00:	250e      	movs	r5, #14
 8000c02:	197b      	adds	r3, r7, r5
 8000c04:	0034      	movs	r4, r6
 8000c06:	193a      	adds	r2, r7, r4
 8000c08:	7812      	ldrb	r2, [r2, #0]
 8000c0a:	2180      	movs	r1, #128	; 0x80
 8000c0c:	4249      	negs	r1, r1
 8000c0e:	430a      	orrs	r2, r1
 8000c10:	701a      	strb	r2, [r3, #0]
			LoRa_write(_LoRa, RegOpMode, data);
 8000c12:	197b      	adds	r3, r7, r5
 8000c14:	781a      	ldrb	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2101      	movs	r1, #1
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f7ff fe4b 	bl	80008b6 <LoRa_write>
			HAL_Delay(100);
 8000c20:	2064      	movs	r0, #100	; 0x64
 8000c22:	f000 fbc1 	bl	80013a8 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6a1a      	ldr	r2, [r3, #32]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	0011      	movs	r1, r2
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f7ff fd31 	bl	8000696 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	222a      	movs	r2, #42	; 0x2a
 8000c38:	5c9a      	ldrb	r2, [r3, r2]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	0011      	movs	r1, r2
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f7ff fd96 	bl	8000770 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	222b      	movs	r2, #43	; 0x2b
 8000c48:	5c9a      	ldrb	r2, [r3, r2]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	0011      	movs	r1, r2
 8000c4e:	0018      	movs	r0, r3
 8000c50:	f7ff fda3 	bl	800079a <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2223      	movs	r2, #35	; 0x23
 8000c58:	210c      	movs	r1, #12
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f7ff fe2b 	bl	80008b6 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	0018      	movs	r0, r3
 8000c64:	f7ff fde7 	bl	8000836 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2224      	movs	r2, #36	; 0x24
 8000c6c:	5c9b      	ldrb	r3, [r3, r2]
 8000c6e:	001a      	movs	r2, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	0011      	movs	r1, r2
 8000c74:	0018      	movs	r0, r3
 8000c76:	f7ff fd45 	bl	8000704 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	22ff      	movs	r2, #255	; 0xff
 8000c7e:	211f      	movs	r1, #31
 8000c80:	0018      	movs	r0, r3
 8000c82:	f7ff fe18 	bl	80008b6 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8000c86:	197b      	adds	r3, r7, r5
 8000c88:	2200      	movs	r2, #0
 8000c8a:	701a      	strb	r2, [r3, #0]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2225      	movs	r2, #37	; 0x25
 8000c90:	5c9b      	ldrb	r3, [r3, r2]
 8000c92:	011b      	lsls	r3, r3, #4
 8000c94:	b2d9      	uxtb	r1, r3
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2226      	movs	r2, #38	; 0x26
 8000c9a:	5c9b      	ldrb	r3, [r3, r2]
 8000c9c:	18db      	adds	r3, r3, r3
 8000c9e:	b2da      	uxtb	r2, r3
 8000ca0:	197b      	adds	r3, r7, r5
 8000ca2:	188a      	adds	r2, r1, r2
 8000ca4:	701a      	strb	r2, [r3, #0]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8000ca6:	197b      	adds	r3, r7, r5
 8000ca8:	781a      	ldrb	r2, [r3, #0]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	211d      	movs	r1, #29
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f7ff fe01 	bl	80008b6 <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000cb8:	0a1b      	lsrs	r3, r3, #8
 8000cba:	b29b      	uxth	r3, r3
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2120      	movs	r1, #32
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f7ff fdf7 	bl	80008b6 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2121      	movs	r1, #33	; 0x21
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	f7ff fdef 	bl	80008b6 <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8000cd8:	0026      	movs	r6, r4
 8000cda:	193c      	adds	r4, r7, r4
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2140      	movs	r1, #64	; 0x40
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f7ff fdca 	bl	800087a <LoRa_read>
 8000ce6:	0003      	movs	r3, r0
 8000ce8:	7023      	strb	r3, [r4, #0]
			data = read | 0x3F;
 8000cea:	197b      	adds	r3, r7, r5
 8000cec:	0034      	movs	r4, r6
 8000cee:	193a      	adds	r2, r7, r4
 8000cf0:	7812      	ldrb	r2, [r2, #0]
 8000cf2:	213f      	movs	r1, #63	; 0x3f
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	701a      	strb	r2, [r3, #0]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8000cf8:	197b      	adds	r3, r7, r5
 8000cfa:	781a      	ldrb	r2, [r3, #0]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2140      	movs	r1, #64	; 0x40
 8000d00:	0018      	movs	r0, r3
 8000d02:	f7ff fdd8 	bl	80008b6 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2101      	movs	r1, #1
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f7ff fbc1 	bl	8000492 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2201      	movs	r2, #1
 8000d14:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8000d16:	200a      	movs	r0, #10
 8000d18:	f000 fb46 	bl	80013a8 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8000d1c:	0025      	movs	r5, r4
 8000d1e:	193c      	adds	r4, r7, r4
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2142      	movs	r1, #66	; 0x42
 8000d24:	0018      	movs	r0, r3
 8000d26:	f7ff fda8 	bl	800087a <LoRa_read>
 8000d2a:	0003      	movs	r3, r0
 8000d2c:	7023      	strb	r3, [r4, #0]
			if(read == 0x12)
 8000d2e:	197b      	adds	r3, r7, r5
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2b12      	cmp	r3, #18
 8000d34:	d101      	bne.n	8000d3a <LoRa_init+0x178>
				return LORA_OK;
 8000d36:	23c8      	movs	r3, #200	; 0xc8
 8000d38:	e004      	b.n	8000d44 <LoRa_init+0x182>
			else
				return LORA_NOT_FOUND;
 8000d3a:	23ca      	movs	r3, #202	; 0xca
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	e001      	b.n	8000d44 <LoRa_init+0x182>
	}
	else {
		return LORA_UNAVAILABLE;
 8000d40:	23f8      	movs	r3, #248	; 0xf8
 8000d42:	33ff      	adds	r3, #255	; 0xff
	}
}
 8000d44:	0018      	movs	r0, r3
 8000d46:	46bd      	mov	sp, r7
 8000d48:	b005      	add	sp, #20
 8000d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d4c <reset_lora_ble>:
uint16_t data_length = 0, data_ok = 0;
uint16_t blink_led=0,count_send_ping=0,flag_sendping=0;
uint8_t IO1_state=0,IO2_state=0;
uint16_t adc[3];
void reset_lora_ble(void)
{
 8000d4c:	b590      	push	{r4, r7, lr}
 8000d4e:	b08d      	sub	sp, #52	; 0x34
 8000d50:	af00      	add	r7, sp, #0
	//khoi tao lora
	myLoRa = newLoRa();
 8000d52:	4c38      	ldr	r4, [pc, #224]	; (8000e34 <reset_lora_ble+0xe8>)
 8000d54:	003b      	movs	r3, r7
 8000d56:	0018      	movs	r0, r3
 8000d58:	f7ff fb4c 	bl	80003f4 <newLoRa>
 8000d5c:	003a      	movs	r2, r7
 8000d5e:	0023      	movs	r3, r4
 8000d60:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000d62:	c313      	stmia	r3!, {r0, r1, r4}
 8000d64:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000d66:	c313      	stmia	r3!, {r0, r1, r4}
 8000d68:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000d6a:	c313      	stmia	r3!, {r0, r1, r4}
 8000d6c:	ca03      	ldmia	r2!, {r0, r1}
 8000d6e:	c303      	stmia	r3!, {r0, r1}

	myLoRa.hSPIx                 = &hspi1;
 8000d70:	4b30      	ldr	r3, [pc, #192]	; (8000e34 <reset_lora_ble+0xe8>)
 8000d72:	4a31      	ldr	r2, [pc, #196]	; (8000e38 <reset_lora_ble+0xec>)
 8000d74:	619a      	str	r2, [r3, #24]
	myLoRa.CS_port               = LORA_NSS_GPIO_Port;
 8000d76:	4b2f      	ldr	r3, [pc, #188]	; (8000e34 <reset_lora_ble+0xe8>)
 8000d78:	2290      	movs	r2, #144	; 0x90
 8000d7a:	05d2      	lsls	r2, r2, #23
 8000d7c:	601a      	str	r2, [r3, #0]
	myLoRa.CS_pin                = LORA_NSS_Pin;
 8000d7e:	4b2d      	ldr	r3, [pc, #180]	; (8000e34 <reset_lora_ble+0xe8>)
 8000d80:	2210      	movs	r2, #16
 8000d82:	809a      	strh	r2, [r3, #4]
	myLoRa.reset_port            = LORA_RESET_GPIO_Port;
 8000d84:	4b2b      	ldr	r3, [pc, #172]	; (8000e34 <reset_lora_ble+0xe8>)
 8000d86:	2290      	movs	r2, #144	; 0x90
 8000d88:	05d2      	lsls	r2, r2, #23
 8000d8a:	609a      	str	r2, [r3, #8]
	myLoRa.reset_pin             = LORA_RESET_Pin;
 8000d8c:	4b29      	ldr	r3, [pc, #164]	; (8000e34 <reset_lora_ble+0xe8>)
 8000d8e:	2208      	movs	r2, #8
 8000d90:	819a      	strh	r2, [r3, #12]
	myLoRa.DIO0_port						 = LORA_IRQ_GPIO_Port;
 8000d92:	4b28      	ldr	r3, [pc, #160]	; (8000e34 <reset_lora_ble+0xe8>)
 8000d94:	4a29      	ldr	r2, [pc, #164]	; (8000e3c <reset_lora_ble+0xf0>)
 8000d96:	611a      	str	r2, [r3, #16]
	myLoRa.DIO0_pin							 = LORA_IRQ_Pin;
 8000d98:	4b26      	ldr	r3, [pc, #152]	; (8000e34 <reset_lora_ble+0xe8>)
 8000d9a:	2202      	movs	r2, #2
 8000d9c:	829a      	strh	r2, [r3, #20]

	myLoRa.frequency             = 433;							  // default = 433 MHz
 8000d9e:	4b25      	ldr	r3, [pc, #148]	; (8000e34 <reset_lora_ble+0xe8>)
 8000da0:	22b2      	movs	r2, #178	; 0xb2
 8000da2:	32ff      	adds	r2, #255	; 0xff
 8000da4:	621a      	str	r2, [r3, #32]
	myLoRa.spredingFactor        = SF_7;							// default = SF_7
 8000da6:	4b23      	ldr	r3, [pc, #140]	; (8000e34 <reset_lora_ble+0xe8>)
 8000da8:	2224      	movs	r2, #36	; 0x24
 8000daa:	2107      	movs	r1, #7
 8000dac:	5499      	strb	r1, [r3, r2]
	myLoRa.bandWidth			       = BW_125KHz;				  // default = BW_125KHz
 8000dae:	4b21      	ldr	r3, [pc, #132]	; (8000e34 <reset_lora_ble+0xe8>)
 8000db0:	2225      	movs	r2, #37	; 0x25
 8000db2:	2107      	movs	r1, #7
 8000db4:	5499      	strb	r1, [r3, r2]
	myLoRa.crcRate				       = CR_4_5;						// default = CR_4_5
 8000db6:	4b1f      	ldr	r3, [pc, #124]	; (8000e34 <reset_lora_ble+0xe8>)
 8000db8:	2226      	movs	r2, #38	; 0x26
 8000dba:	2101      	movs	r1, #1
 8000dbc:	5499      	strb	r1, [r3, r2]
	myLoRa.power					       = POWER_20db;				// default = 20db
 8000dbe:	4b1d      	ldr	r3, [pc, #116]	; (8000e34 <reset_lora_ble+0xe8>)
 8000dc0:	222a      	movs	r2, #42	; 0x2a
 8000dc2:	21ff      	movs	r1, #255	; 0xff
 8000dc4:	5499      	strb	r1, [r3, r2]
	myLoRa.overCurrentProtection = 120; 							// default = 100 mA
 8000dc6:	4b1b      	ldr	r3, [pc, #108]	; (8000e34 <reset_lora_ble+0xe8>)
 8000dc8:	222b      	movs	r2, #43	; 0x2b
 8000dca:	2178      	movs	r1, #120	; 0x78
 8000dcc:	5499      	strb	r1, [r3, r2]
	myLoRa.preamble				       = 10;		  					// default = 8;
 8000dce:	4b19      	ldr	r3, [pc, #100]	; (8000e34 <reset_lora_ble+0xe8>)
 8000dd0:	220a      	movs	r2, #10
 8000dd2:	851a      	strh	r2, [r3, #40]	; 0x28

	LoRa_reset(&myLoRa);
 8000dd4:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <reset_lora_ble+0xe8>)
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f7ff fb3b 	bl	8000452 <LoRa_reset>
	if(LoRa_init(&myLoRa) == LORA_OK)
 8000ddc:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <reset_lora_ble+0xe8>)
 8000dde:	0018      	movs	r0, r3
 8000de0:	f7ff feef 	bl	8000bc2 <LoRa_init>
 8000de4:	0003      	movs	r3, r0
 8000de6:	2bc8      	cmp	r3, #200	; 0xc8
 8000de8:	d108      	bne.n	8000dfc <reset_lora_ble+0xb0>
	{
		HAL_GPIO_WritePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin, GPIO_PIN_SET);
 8000dea:	2380      	movs	r3, #128	; 0x80
 8000dec:	00d9      	lsls	r1, r3, #3
 8000dee:	2390      	movs	r3, #144	; 0x90
 8000df0:	05db      	lsls	r3, r3, #23
 8000df2:	2201      	movs	r2, #1
 8000df4:	0018      	movs	r0, r3
 8000df6:	f000 fd3c 	bl	8001872 <HAL_GPIO_WritePin>
 8000dfa:	e00d      	b.n	8000e18 <reset_lora_ble+0xcc>
	}
	else
	{
		while(1)
		{
			  HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin);
 8000dfc:	2380      	movs	r3, #128	; 0x80
 8000dfe:	00da      	lsls	r2, r3, #3
 8000e00:	2390      	movs	r3, #144	; 0x90
 8000e02:	05db      	lsls	r3, r3, #23
 8000e04:	0011      	movs	r1, r2
 8000e06:	0018      	movs	r0, r3
 8000e08:	f000 fd50 	bl	80018ac <HAL_GPIO_TogglePin>
			  HAL_Delay(1000);
 8000e0c:	23fa      	movs	r3, #250	; 0xfa
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	0018      	movs	r0, r3
 8000e12:	f000 fac9 	bl	80013a8 <HAL_Delay>
			  HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin);
 8000e16:	e7f1      	b.n	8000dfc <reset_lora_ble+0xb0>
		}
	}
	LoRa_startReceiving(&myLoRa);
 8000e18:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <reset_lora_ble+0xe8>)
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	f7ff fe36 	bl	8000a8c <LoRa_startReceiving>
	HAL_Delay(1000);
 8000e20:	23fa      	movs	r3, #250	; 0xfa
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	0018      	movs	r0, r3
 8000e26:	f000 fabf 	bl	80013a8 <HAL_Delay>
}
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	b00d      	add	sp, #52	; 0x34
 8000e30:	bd90      	pop	{r4, r7, pc}
 8000e32:	46c0      	nop			; (mov r8, r8)
 8000e34:	2000018c 	.word	0x2000018c
 8000e38:	20000028 	.word	0x20000028
 8000e3c:	48000400 	.word	0x48000400

08000e40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint32_t stick_1s = 0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e4a:	f000 fa49 	bl	80012e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e4e:	f000 f86d 	bl	8000f2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e52:	f000 f8e9 	bl	8001028 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000e56:	f000 f8a9 	bl	8000fac <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  reset_lora_ble();
 8000e5a:	f7ff ff77 	bl	8000d4c <reset_lora_ble>
//	  }
//	  else
//	  {
//		  HAL_GPIO_WritePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin, GPIO_PIN_RESET);
//	  }
	  if(HAL_GPIO_ReadPin(myLoRa.DIO0_port, myLoRa.DIO0_pin) == GPIO_PIN_SET)
 8000e5e:	4b2e      	ldr	r3, [pc, #184]	; (8000f18 <main+0xd8>)
 8000e60:	691a      	ldr	r2, [r3, #16]
 8000e62:	4b2d      	ldr	r3, [pc, #180]	; (8000f18 <main+0xd8>)
 8000e64:	8a9b      	ldrh	r3, [r3, #20]
 8000e66:	0019      	movs	r1, r3
 8000e68:	0010      	movs	r0, r2
 8000e6a:	f000 fce5 	bl	8001838 <HAL_GPIO_ReadPin>
 8000e6e:	0003      	movs	r3, r0
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d12f      	bne.n	8000ed4 <main+0x94>
	  {
		  HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin);//nhay led status
 8000e74:	2380      	movs	r3, #128	; 0x80
 8000e76:	00da      	lsls	r2, r3, #3
 8000e78:	2390      	movs	r3, #144	; 0x90
 8000e7a:	05db      	lsls	r3, r3, #23
 8000e7c:	0011      	movs	r1, r2
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f000 fd14 	bl	80018ac <HAL_GPIO_TogglePin>
		  data_length = LoRa_receive(&myLoRa, read_data, MAX_DATA);
 8000e84:	4925      	ldr	r1, [pc, #148]	; (8000f1c <main+0xdc>)
 8000e86:	4b24      	ldr	r3, [pc, #144]	; (8000f18 <main+0xd8>)
 8000e88:	2280      	movs	r2, #128	; 0x80
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f7ff fe0b 	bl	8000aa6 <LoRa_receive>
 8000e90:	0003      	movs	r3, r0
 8000e92:	b29a      	uxth	r2, r3
 8000e94:	4b22      	ldr	r3, [pc, #136]	; (8000f20 <main+0xe0>)
 8000e96:	801a      	strh	r2, [r3, #0]
		  RSSI = LoRa_getRSSI(&myLoRa);
 8000e98:	4b1f      	ldr	r3, [pc, #124]	; (8000f18 <main+0xd8>)
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	f7ff fe7d 	bl	8000b9a <LoRa_getRSSI>
 8000ea0:	0002      	movs	r2, r0
 8000ea2:	4b20      	ldr	r3, [pc, #128]	; (8000f24 <main+0xe4>)
 8000ea4:	601a      	str	r2, [r3, #0]

		  send_data[0] = 'V';
 8000ea6:	4b20      	ldr	r3, [pc, #128]	; (8000f28 <main+0xe8>)
 8000ea8:	2256      	movs	r2, #86	; 0x56
 8000eaa:	701a      	strb	r2, [r3, #0]
		  send_data[1]= 'A';
 8000eac:	4b1e      	ldr	r3, [pc, #120]	; (8000f28 <main+0xe8>)
 8000eae:	2241      	movs	r2, #65	; 0x41
 8000eb0:	705a      	strb	r2, [r3, #1]
		  send_data[2]= 'N';
 8000eb2:	4b1d      	ldr	r3, [pc, #116]	; (8000f28 <main+0xe8>)
 8000eb4:	224e      	movs	r2, #78	; 0x4e
 8000eb6:	709a      	strb	r2, [r3, #2]
		  send_data[3]= ' ';
 8000eb8:	4b1b      	ldr	r3, [pc, #108]	; (8000f28 <main+0xe8>)
 8000eba:	2220      	movs	r2, #32
 8000ebc:	70da      	strb	r2, [r3, #3]
		  LoRa_transmit(&myLoRa, send_data, 4, 500);
 8000ebe:	23fa      	movs	r3, #250	; 0xfa
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	4919      	ldr	r1, [pc, #100]	; (8000f28 <main+0xe8>)
 8000ec4:	4814      	ldr	r0, [pc, #80]	; (8000f18 <main+0xd8>)
 8000ec6:	2204      	movs	r2, #4
 8000ec8:	f7ff fd75 	bl	80009b6 <LoRa_transmit>
		  stick_1s = HAL_GetTick();
 8000ecc:	f000 fa62 	bl	8001394 <HAL_GetTick>
 8000ed0:	0003      	movs	r3, r0
 8000ed2:	607b      	str	r3, [r7, #4]
	  }

	  if(HAL_GetTick() - stick_1s >=1000)
 8000ed4:	f000 fa5e 	bl	8001394 <HAL_GetTick>
 8000ed8:	0002      	movs	r2, r0
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	1ad2      	subs	r2, r2, r3
 8000ede:	23fa      	movs	r3, #250	; 0xfa
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	d3bb      	bcc.n	8000e5e <main+0x1e>
	  {
		  send_data[0] = 'V';
 8000ee6:	4b10      	ldr	r3, [pc, #64]	; (8000f28 <main+0xe8>)
 8000ee8:	2256      	movs	r2, #86	; 0x56
 8000eea:	701a      	strb	r2, [r3, #0]
		  send_data[1]= 'I';
 8000eec:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <main+0xe8>)
 8000eee:	2249      	movs	r2, #73	; 0x49
 8000ef0:	705a      	strb	r2, [r3, #1]
		  send_data[2]= 'E';
 8000ef2:	4b0d      	ldr	r3, [pc, #52]	; (8000f28 <main+0xe8>)
 8000ef4:	2245      	movs	r2, #69	; 0x45
 8000ef6:	709a      	strb	r2, [r3, #2]
		  send_data[3]= 'T';
 8000ef8:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <main+0xe8>)
 8000efa:	2254      	movs	r2, #84	; 0x54
 8000efc:	70da      	strb	r2, [r3, #3]
		  LoRa_transmit(&myLoRa, send_data, 4, 500);
 8000efe:	23fa      	movs	r3, #250	; 0xfa
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	4909      	ldr	r1, [pc, #36]	; (8000f28 <main+0xe8>)
 8000f04:	4804      	ldr	r0, [pc, #16]	; (8000f18 <main+0xd8>)
 8000f06:	2204      	movs	r2, #4
 8000f08:	f7ff fd55 	bl	80009b6 <LoRa_transmit>
		  stick_1s = HAL_GetTick();
 8000f0c:	f000 fa42 	bl	8001394 <HAL_GetTick>
 8000f10:	0003      	movs	r3, r0
 8000f12:	607b      	str	r3, [r7, #4]
	  if(HAL_GPIO_ReadPin(myLoRa.DIO0_port, myLoRa.DIO0_pin) == GPIO_PIN_SET)
 8000f14:	e7a3      	b.n	8000e5e <main+0x1e>
 8000f16:	46c0      	nop			; (mov r8, r8)
 8000f18:	2000018c 	.word	0x2000018c
 8000f1c:	2000008c 	.word	0x2000008c
 8000f20:	200001bc 	.word	0x200001bc
 8000f24:	200001b8 	.word	0x200001b8
 8000f28:	2000010c 	.word	0x2000010c

08000f2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f2c:	b590      	push	{r4, r7, lr}
 8000f2e:	b091      	sub	sp, #68	; 0x44
 8000f30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f32:	2410      	movs	r4, #16
 8000f34:	193b      	adds	r3, r7, r4
 8000f36:	0018      	movs	r0, r3
 8000f38:	2330      	movs	r3, #48	; 0x30
 8000f3a:	001a      	movs	r2, r3
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	f002 f83b 	bl	8002fb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f42:	003b      	movs	r3, r7
 8000f44:	0018      	movs	r0, r3
 8000f46:	2310      	movs	r3, #16
 8000f48:	001a      	movs	r2, r3
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	f002 f834 	bl	8002fb8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f50:	0021      	movs	r1, r4
 8000f52:	187b      	adds	r3, r7, r1
 8000f54:	2202      	movs	r2, #2
 8000f56:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f58:	187b      	adds	r3, r7, r1
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f5e:	187b      	adds	r3, r7, r1
 8000f60:	2210      	movs	r2, #16
 8000f62:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f64:	187b      	adds	r3, r7, r1
 8000f66:	2200      	movs	r2, #0
 8000f68:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f6a:	187b      	adds	r3, r7, r1
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	f000 fcb9 	bl	80018e4 <HAL_RCC_OscConfig>
 8000f72:	1e03      	subs	r3, r0, #0
 8000f74:	d001      	beq.n	8000f7a <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000f76:	f000 f8f7 	bl	8001168 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f7a:	003b      	movs	r3, r7
 8000f7c:	2207      	movs	r2, #7
 8000f7e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f80:	003b      	movs	r3, r7
 8000f82:	2200      	movs	r2, #0
 8000f84:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f86:	003b      	movs	r3, r7
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f8c:	003b      	movs	r3, r7
 8000f8e:	2200      	movs	r2, #0
 8000f90:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f92:	003b      	movs	r3, r7
 8000f94:	2100      	movs	r1, #0
 8000f96:	0018      	movs	r0, r3
 8000f98:	f000 ffbe 	bl	8001f18 <HAL_RCC_ClockConfig>
 8000f9c:	1e03      	subs	r3, r0, #0
 8000f9e:	d001      	beq.n	8000fa4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000fa0:	f000 f8e2 	bl	8001168 <Error_Handler>
  }
}
 8000fa4:	46c0      	nop			; (mov r8, r8)
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	b011      	add	sp, #68	; 0x44
 8000faa:	bd90      	pop	{r4, r7, pc}

08000fac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fb0:	4b1b      	ldr	r3, [pc, #108]	; (8001020 <MX_SPI1_Init+0x74>)
 8000fb2:	4a1c      	ldr	r2, [pc, #112]	; (8001024 <MX_SPI1_Init+0x78>)
 8000fb4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fb6:	4b1a      	ldr	r3, [pc, #104]	; (8001020 <MX_SPI1_Init+0x74>)
 8000fb8:	2282      	movs	r2, #130	; 0x82
 8000fba:	0052      	lsls	r2, r2, #1
 8000fbc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fbe:	4b18      	ldr	r3, [pc, #96]	; (8001020 <MX_SPI1_Init+0x74>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fc4:	4b16      	ldr	r3, [pc, #88]	; (8001020 <MX_SPI1_Init+0x74>)
 8000fc6:	22e0      	movs	r2, #224	; 0xe0
 8000fc8:	00d2      	lsls	r2, r2, #3
 8000fca:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fcc:	4b14      	ldr	r3, [pc, #80]	; (8001020 <MX_SPI1_Init+0x74>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fd2:	4b13      	ldr	r3, [pc, #76]	; (8001020 <MX_SPI1_Init+0x74>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fd8:	4b11      	ldr	r3, [pc, #68]	; (8001020 <MX_SPI1_Init+0x74>)
 8000fda:	2280      	movs	r2, #128	; 0x80
 8000fdc:	0092      	lsls	r2, r2, #2
 8000fde:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fe0:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <MX_SPI1_Init+0x74>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <MX_SPI1_Init+0x74>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <MX_SPI1_Init+0x74>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ff2:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <MX_SPI1_Init+0x74>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ff8:	4b09      	ldr	r3, [pc, #36]	; (8001020 <MX_SPI1_Init+0x74>)
 8000ffa:	2207      	movs	r2, #7
 8000ffc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ffe:	4b08      	ldr	r3, [pc, #32]	; (8001020 <MX_SPI1_Init+0x74>)
 8001000:	2200      	movs	r2, #0
 8001002:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <MX_SPI1_Init+0x74>)
 8001006:	2208      	movs	r2, #8
 8001008:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800100a:	4b05      	ldr	r3, [pc, #20]	; (8001020 <MX_SPI1_Init+0x74>)
 800100c:	0018      	movs	r0, r3
 800100e:	f001 f8a7 	bl	8002160 <HAL_SPI_Init>
 8001012:	1e03      	subs	r3, r0, #0
 8001014:	d001      	beq.n	800101a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001016:	f000 f8a7 	bl	8001168 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800101a:	46c0      	nop			; (mov r8, r8)
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000028 	.word	0x20000028
 8001024:	40013000 	.word	0x40013000

08001028 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001028:	b590      	push	{r4, r7, lr}
 800102a:	b089      	sub	sp, #36	; 0x24
 800102c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102e:	240c      	movs	r4, #12
 8001030:	193b      	adds	r3, r7, r4
 8001032:	0018      	movs	r0, r3
 8001034:	2314      	movs	r3, #20
 8001036:	001a      	movs	r2, r3
 8001038:	2100      	movs	r1, #0
 800103a:	f001 ffbd 	bl	8002fb8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800103e:	4b44      	ldr	r3, [pc, #272]	; (8001150 <MX_GPIO_Init+0x128>)
 8001040:	695a      	ldr	r2, [r3, #20]
 8001042:	4b43      	ldr	r3, [pc, #268]	; (8001150 <MX_GPIO_Init+0x128>)
 8001044:	2180      	movs	r1, #128	; 0x80
 8001046:	03c9      	lsls	r1, r1, #15
 8001048:	430a      	orrs	r2, r1
 800104a:	615a      	str	r2, [r3, #20]
 800104c:	4b40      	ldr	r3, [pc, #256]	; (8001150 <MX_GPIO_Init+0x128>)
 800104e:	695a      	ldr	r2, [r3, #20]
 8001050:	2380      	movs	r3, #128	; 0x80
 8001052:	03db      	lsls	r3, r3, #15
 8001054:	4013      	ands	r3, r2
 8001056:	60bb      	str	r3, [r7, #8]
 8001058:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800105a:	4b3d      	ldr	r3, [pc, #244]	; (8001150 <MX_GPIO_Init+0x128>)
 800105c:	695a      	ldr	r2, [r3, #20]
 800105e:	4b3c      	ldr	r3, [pc, #240]	; (8001150 <MX_GPIO_Init+0x128>)
 8001060:	2180      	movs	r1, #128	; 0x80
 8001062:	0289      	lsls	r1, r1, #10
 8001064:	430a      	orrs	r2, r1
 8001066:	615a      	str	r2, [r3, #20]
 8001068:	4b39      	ldr	r3, [pc, #228]	; (8001150 <MX_GPIO_Init+0x128>)
 800106a:	695a      	ldr	r2, [r3, #20]
 800106c:	2380      	movs	r3, #128	; 0x80
 800106e:	029b      	lsls	r3, r3, #10
 8001070:	4013      	ands	r3, r2
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001076:	4b36      	ldr	r3, [pc, #216]	; (8001150 <MX_GPIO_Init+0x128>)
 8001078:	695a      	ldr	r2, [r3, #20]
 800107a:	4b35      	ldr	r3, [pc, #212]	; (8001150 <MX_GPIO_Init+0x128>)
 800107c:	2180      	movs	r1, #128	; 0x80
 800107e:	02c9      	lsls	r1, r1, #11
 8001080:	430a      	orrs	r2, r1
 8001082:	615a      	str	r2, [r3, #20]
 8001084:	4b32      	ldr	r3, [pc, #200]	; (8001150 <MX_GPIO_Init+0x128>)
 8001086:	695a      	ldr	r2, [r3, #20]
 8001088:	2380      	movs	r3, #128	; 0x80
 800108a:	02db      	lsls	r3, r3, #11
 800108c:	4013      	ands	r3, r2
 800108e:	603b      	str	r3, [r7, #0]
 8001090:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MCU_PWR_EN_Pin|LORA_RESET_Pin|LORA_NSS_Pin|LED_STATUS_Pin, GPIO_PIN_RESET);
 8001092:	4930      	ldr	r1, [pc, #192]	; (8001154 <MX_GPIO_Init+0x12c>)
 8001094:	2390      	movs	r3, #144	; 0x90
 8001096:	05db      	lsls	r3, r3, #23
 8001098:	2200      	movs	r2, #0
 800109a:	0018      	movs	r0, r3
 800109c:	f000 fbe9 	bl	8001872 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MCU_PWR_READ1_Pin MCU_PWR_READ2_Pin */
  GPIO_InitStruct.Pin = MCU_PWR_READ1_Pin|MCU_PWR_READ2_Pin;
 80010a0:	193b      	adds	r3, r7, r4
 80010a2:	2203      	movs	r2, #3
 80010a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a6:	193b      	adds	r3, r7, r4
 80010a8:	2200      	movs	r2, #0
 80010aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010ac:	193b      	adds	r3, r7, r4
 80010ae:	2201      	movs	r2, #1
 80010b0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010b2:	193b      	adds	r3, r7, r4
 80010b4:	4a28      	ldr	r2, [pc, #160]	; (8001158 <MX_GPIO_Init+0x130>)
 80010b6:	0019      	movs	r1, r3
 80010b8:	0010      	movs	r0, r2
 80010ba:	f000 fa4d 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_PWR_READ3_Pin MCU_PWR_READ4_Pin LORA_DI1_Pin */
  GPIO_InitStruct.Pin = MCU_PWR_READ3_Pin|MCU_PWR_READ4_Pin|LORA_DI1_Pin;
 80010be:	193b      	adds	r3, r7, r4
 80010c0:	4a26      	ldr	r2, [pc, #152]	; (800115c <MX_GPIO_Init+0x134>)
 80010c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c4:	193b      	adds	r3, r7, r4
 80010c6:	2200      	movs	r2, #0
 80010c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010ca:	193b      	adds	r3, r7, r4
 80010cc:	2201      	movs	r2, #1
 80010ce:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d0:	193a      	adds	r2, r7, r4
 80010d2:	2390      	movs	r3, #144	; 0x90
 80010d4:	05db      	lsls	r3, r3, #23
 80010d6:	0011      	movs	r1, r2
 80010d8:	0018      	movs	r0, r3
 80010da:	f000 fa3d 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_PWR_EN_Pin LED_STATUS_Pin */
  GPIO_InitStruct.Pin = MCU_PWR_EN_Pin|LED_STATUS_Pin;
 80010de:	193b      	adds	r3, r7, r4
 80010e0:	4a1f      	ldr	r2, [pc, #124]	; (8001160 <MX_GPIO_Init+0x138>)
 80010e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e4:	193b      	adds	r3, r7, r4
 80010e6:	2201      	movs	r2, #1
 80010e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	193b      	adds	r3, r7, r4
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f0:	193b      	adds	r3, r7, r4
 80010f2:	2200      	movs	r2, #0
 80010f4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f6:	193a      	adds	r2, r7, r4
 80010f8:	2390      	movs	r3, #144	; 0x90
 80010fa:	05db      	lsls	r3, r3, #23
 80010fc:	0011      	movs	r1, r2
 80010fe:	0018      	movs	r0, r3
 8001100:	f000 fa2a 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_RESET_Pin LORA_NSS_Pin */
  GPIO_InitStruct.Pin = LORA_RESET_Pin|LORA_NSS_Pin;
 8001104:	193b      	adds	r3, r7, r4
 8001106:	2218      	movs	r2, #24
 8001108:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110a:	193b      	adds	r3, r7, r4
 800110c:	2201      	movs	r2, #1
 800110e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	193b      	adds	r3, r7, r4
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001116:	193b      	adds	r3, r7, r4
 8001118:	2203      	movs	r2, #3
 800111a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111c:	193a      	adds	r2, r7, r4
 800111e:	2390      	movs	r3, #144	; 0x90
 8001120:	05db      	lsls	r3, r3, #23
 8001122:	0011      	movs	r1, r2
 8001124:	0018      	movs	r0, r3
 8001126:	f000 fa17 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_IRQ_Pin */
  GPIO_InitStruct.Pin = LORA_IRQ_Pin;
 800112a:	193b      	adds	r3, r7, r4
 800112c:	2202      	movs	r2, #2
 800112e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001130:	193b      	adds	r3, r7, r4
 8001132:	2200      	movs	r2, #0
 8001134:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001136:	193b      	adds	r3, r7, r4
 8001138:	2201      	movs	r2, #1
 800113a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LORA_IRQ_GPIO_Port, &GPIO_InitStruct);
 800113c:	193b      	adds	r3, r7, r4
 800113e:	4a09      	ldr	r2, [pc, #36]	; (8001164 <MX_GPIO_Init+0x13c>)
 8001140:	0019      	movs	r1, r3
 8001142:	0010      	movs	r0, r2
 8001144:	f000 fa08 	bl	8001558 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001148:	46c0      	nop			; (mov r8, r8)
 800114a:	46bd      	mov	sp, r7
 800114c:	b009      	add	sp, #36	; 0x24
 800114e:	bd90      	pop	{r4, r7, pc}
 8001150:	40021000 	.word	0x40021000
 8001154:	0000041c 	.word	0x0000041c
 8001158:	48001400 	.word	0x48001400
 800115c:	00000203 	.word	0x00000203
 8001160:	00000404 	.word	0x00000404
 8001164:	48000400 	.word	0x48000400

08001168 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800116c:	b672      	cpsid	i
}
 800116e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001170:	e7fe      	b.n	8001170 <Error_Handler+0x8>
	...

08001174 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117a:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <HAL_MspInit+0x44>)
 800117c:	699a      	ldr	r2, [r3, #24]
 800117e:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <HAL_MspInit+0x44>)
 8001180:	2101      	movs	r1, #1
 8001182:	430a      	orrs	r2, r1
 8001184:	619a      	str	r2, [r3, #24]
 8001186:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <HAL_MspInit+0x44>)
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	2201      	movs	r2, #1
 800118c:	4013      	ands	r3, r2
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001192:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <HAL_MspInit+0x44>)
 8001194:	69da      	ldr	r2, [r3, #28]
 8001196:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <HAL_MspInit+0x44>)
 8001198:	2180      	movs	r1, #128	; 0x80
 800119a:	0549      	lsls	r1, r1, #21
 800119c:	430a      	orrs	r2, r1
 800119e:	61da      	str	r2, [r3, #28]
 80011a0:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <HAL_MspInit+0x44>)
 80011a2:	69da      	ldr	r2, [r3, #28]
 80011a4:	2380      	movs	r3, #128	; 0x80
 80011a6:	055b      	lsls	r3, r3, #21
 80011a8:	4013      	ands	r3, r2
 80011aa:	603b      	str	r3, [r7, #0]
 80011ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ae:	46c0      	nop			; (mov r8, r8)
 80011b0:	46bd      	mov	sp, r7
 80011b2:	b002      	add	sp, #8
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	40021000 	.word	0x40021000

080011bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011bc:	b590      	push	{r4, r7, lr}
 80011be:	b08b      	sub	sp, #44	; 0x2c
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	2414      	movs	r4, #20
 80011c6:	193b      	adds	r3, r7, r4
 80011c8:	0018      	movs	r0, r3
 80011ca:	2314      	movs	r3, #20
 80011cc:	001a      	movs	r2, r3
 80011ce:	2100      	movs	r1, #0
 80011d0:	f001 fef2 	bl	8002fb8 <memset>
  if(hspi->Instance==SPI1)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a1c      	ldr	r2, [pc, #112]	; (800124c <HAL_SPI_MspInit+0x90>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d132      	bne.n	8001244 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011de:	4b1c      	ldr	r3, [pc, #112]	; (8001250 <HAL_SPI_MspInit+0x94>)
 80011e0:	699a      	ldr	r2, [r3, #24]
 80011e2:	4b1b      	ldr	r3, [pc, #108]	; (8001250 <HAL_SPI_MspInit+0x94>)
 80011e4:	2180      	movs	r1, #128	; 0x80
 80011e6:	0149      	lsls	r1, r1, #5
 80011e8:	430a      	orrs	r2, r1
 80011ea:	619a      	str	r2, [r3, #24]
 80011ec:	4b18      	ldr	r3, [pc, #96]	; (8001250 <HAL_SPI_MspInit+0x94>)
 80011ee:	699a      	ldr	r2, [r3, #24]
 80011f0:	2380      	movs	r3, #128	; 0x80
 80011f2:	015b      	lsls	r3, r3, #5
 80011f4:	4013      	ands	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
 80011f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fa:	4b15      	ldr	r3, [pc, #84]	; (8001250 <HAL_SPI_MspInit+0x94>)
 80011fc:	695a      	ldr	r2, [r3, #20]
 80011fe:	4b14      	ldr	r3, [pc, #80]	; (8001250 <HAL_SPI_MspInit+0x94>)
 8001200:	2180      	movs	r1, #128	; 0x80
 8001202:	0289      	lsls	r1, r1, #10
 8001204:	430a      	orrs	r2, r1
 8001206:	615a      	str	r2, [r3, #20]
 8001208:	4b11      	ldr	r3, [pc, #68]	; (8001250 <HAL_SPI_MspInit+0x94>)
 800120a:	695a      	ldr	r2, [r3, #20]
 800120c:	2380      	movs	r3, #128	; 0x80
 800120e:	029b      	lsls	r3, r3, #10
 8001210:	4013      	ands	r3, r2
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001216:	0021      	movs	r1, r4
 8001218:	187b      	adds	r3, r7, r1
 800121a:	22e0      	movs	r2, #224	; 0xe0
 800121c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121e:	187b      	adds	r3, r7, r1
 8001220:	2202      	movs	r2, #2
 8001222:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	187b      	adds	r3, r7, r1
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800122a:	187b      	adds	r3, r7, r1
 800122c:	2203      	movs	r2, #3
 800122e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001230:	187b      	adds	r3, r7, r1
 8001232:	2200      	movs	r2, #0
 8001234:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001236:	187a      	adds	r2, r7, r1
 8001238:	2390      	movs	r3, #144	; 0x90
 800123a:	05db      	lsls	r3, r3, #23
 800123c:	0011      	movs	r1, r2
 800123e:	0018      	movs	r0, r3
 8001240:	f000 f98a 	bl	8001558 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001244:	46c0      	nop			; (mov r8, r8)
 8001246:	46bd      	mov	sp, r7
 8001248:	b00b      	add	sp, #44	; 0x2c
 800124a:	bd90      	pop	{r4, r7, pc}
 800124c:	40013000 	.word	0x40013000
 8001250:	40021000 	.word	0x40021000

08001254 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001258:	e7fe      	b.n	8001258 <NMI_Handler+0x4>

0800125a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800125e:	e7fe      	b.n	800125e <HardFault_Handler+0x4>

08001260 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001264:	46c0      	nop			; (mov r8, r8)
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001278:	f000 f87a 	bl	8001370 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800127c:	46c0      	nop			; (mov r8, r8)
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001286:	46c0      	nop			; (mov r8, r8)
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800128c:	480d      	ldr	r0, [pc, #52]	; (80012c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800128e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001290:	f7ff fff7 	bl	8001282 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001294:	480c      	ldr	r0, [pc, #48]	; (80012c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001296:	490d      	ldr	r1, [pc, #52]	; (80012cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001298:	4a0d      	ldr	r2, [pc, #52]	; (80012d0 <LoopForever+0xe>)
  movs r3, #0
 800129a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800129c:	e002      	b.n	80012a4 <LoopCopyDataInit>

0800129e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800129e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012a2:	3304      	adds	r3, #4

080012a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a8:	d3f9      	bcc.n	800129e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012aa:	4a0a      	ldr	r2, [pc, #40]	; (80012d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012ac:	4c0a      	ldr	r4, [pc, #40]	; (80012d8 <LoopForever+0x16>)
  movs r3, #0
 80012ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b0:	e001      	b.n	80012b6 <LoopFillZerobss>

080012b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b4:	3204      	adds	r2, #4

080012b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b8:	d3fb      	bcc.n	80012b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80012ba:	f001 fe85 	bl	8002fc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012be:	f7ff fdbf 	bl	8000e40 <main>

080012c2 <LoopForever>:

LoopForever:
    b LoopForever
 80012c2:	e7fe      	b.n	80012c2 <LoopForever>
  ldr   r0, =_estack
 80012c4:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80012c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012cc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80012d0:	08003060 	.word	0x08003060
  ldr r2, =_sbss
 80012d4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80012d8:	200001c4 	.word	0x200001c4

080012dc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012dc:	e7fe      	b.n	80012dc <ADC1_IRQHandler>
	...

080012e0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012e4:	4b07      	ldr	r3, [pc, #28]	; (8001304 <HAL_Init+0x24>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <HAL_Init+0x24>)
 80012ea:	2110      	movs	r1, #16
 80012ec:	430a      	orrs	r2, r1
 80012ee:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80012f0:	2003      	movs	r0, #3
 80012f2:	f000 f809 	bl	8001308 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012f6:	f7ff ff3d 	bl	8001174 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012fa:	2300      	movs	r3, #0
}
 80012fc:	0018      	movs	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	46c0      	nop			; (mov r8, r8)
 8001304:	40022000 	.word	0x40022000

08001308 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001308:	b590      	push	{r4, r7, lr}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001310:	4b14      	ldr	r3, [pc, #80]	; (8001364 <HAL_InitTick+0x5c>)
 8001312:	681c      	ldr	r4, [r3, #0]
 8001314:	4b14      	ldr	r3, [pc, #80]	; (8001368 <HAL_InitTick+0x60>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	0019      	movs	r1, r3
 800131a:	23fa      	movs	r3, #250	; 0xfa
 800131c:	0098      	lsls	r0, r3, #2
 800131e:	f7fe fef3 	bl	8000108 <__udivsi3>
 8001322:	0003      	movs	r3, r0
 8001324:	0019      	movs	r1, r3
 8001326:	0020      	movs	r0, r4
 8001328:	f7fe feee 	bl	8000108 <__udivsi3>
 800132c:	0003      	movs	r3, r0
 800132e:	0018      	movs	r0, r3
 8001330:	f000 f905 	bl	800153e <HAL_SYSTICK_Config>
 8001334:	1e03      	subs	r3, r0, #0
 8001336:	d001      	beq.n	800133c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e00f      	b.n	800135c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b03      	cmp	r3, #3
 8001340:	d80b      	bhi.n	800135a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001342:	6879      	ldr	r1, [r7, #4]
 8001344:	2301      	movs	r3, #1
 8001346:	425b      	negs	r3, r3
 8001348:	2200      	movs	r2, #0
 800134a:	0018      	movs	r0, r3
 800134c:	f000 f8e2 	bl	8001514 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <HAL_InitTick+0x64>)
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001356:	2300      	movs	r3, #0
 8001358:	e000      	b.n	800135c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
}
 800135c:	0018      	movs	r0, r3
 800135e:	46bd      	mov	sp, r7
 8001360:	b003      	add	sp, #12
 8001362:	bd90      	pop	{r4, r7, pc}
 8001364:	20000000 	.word	0x20000000
 8001368:	20000008 	.word	0x20000008
 800136c:	20000004 	.word	0x20000004

08001370 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001374:	4b05      	ldr	r3, [pc, #20]	; (800138c <HAL_IncTick+0x1c>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	001a      	movs	r2, r3
 800137a:	4b05      	ldr	r3, [pc, #20]	; (8001390 <HAL_IncTick+0x20>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	18d2      	adds	r2, r2, r3
 8001380:	4b03      	ldr	r3, [pc, #12]	; (8001390 <HAL_IncTick+0x20>)
 8001382:	601a      	str	r2, [r3, #0]
}
 8001384:	46c0      	nop			; (mov r8, r8)
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	46c0      	nop			; (mov r8, r8)
 800138c:	20000008 	.word	0x20000008
 8001390:	200001c0 	.word	0x200001c0

08001394 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  return uwTick;
 8001398:	4b02      	ldr	r3, [pc, #8]	; (80013a4 <HAL_GetTick+0x10>)
 800139a:	681b      	ldr	r3, [r3, #0]
}
 800139c:	0018      	movs	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	46c0      	nop			; (mov r8, r8)
 80013a4:	200001c0 	.word	0x200001c0

080013a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013b0:	f7ff fff0 	bl	8001394 <HAL_GetTick>
 80013b4:	0003      	movs	r3, r0
 80013b6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	3301      	adds	r3, #1
 80013c0:	d005      	beq.n	80013ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013c2:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <HAL_Delay+0x44>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	001a      	movs	r2, r3
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	189b      	adds	r3, r3, r2
 80013cc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80013ce:	46c0      	nop			; (mov r8, r8)
 80013d0:	f7ff ffe0 	bl	8001394 <HAL_GetTick>
 80013d4:	0002      	movs	r2, r0
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	68fa      	ldr	r2, [r7, #12]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d8f7      	bhi.n	80013d0 <HAL_Delay+0x28>
  {
  }
}
 80013e0:	46c0      	nop			; (mov r8, r8)
 80013e2:	46c0      	nop			; (mov r8, r8)
 80013e4:	46bd      	mov	sp, r7
 80013e6:	b004      	add	sp, #16
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	46c0      	nop			; (mov r8, r8)
 80013ec:	20000008 	.word	0x20000008

080013f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f0:	b590      	push	{r4, r7, lr}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	0002      	movs	r2, r0
 80013f8:	6039      	str	r1, [r7, #0]
 80013fa:	1dfb      	adds	r3, r7, #7
 80013fc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013fe:	1dfb      	adds	r3, r7, #7
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b7f      	cmp	r3, #127	; 0x7f
 8001404:	d828      	bhi.n	8001458 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001406:	4a2f      	ldr	r2, [pc, #188]	; (80014c4 <__NVIC_SetPriority+0xd4>)
 8001408:	1dfb      	adds	r3, r7, #7
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	b25b      	sxtb	r3, r3
 800140e:	089b      	lsrs	r3, r3, #2
 8001410:	33c0      	adds	r3, #192	; 0xc0
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	589b      	ldr	r3, [r3, r2]
 8001416:	1dfa      	adds	r2, r7, #7
 8001418:	7812      	ldrb	r2, [r2, #0]
 800141a:	0011      	movs	r1, r2
 800141c:	2203      	movs	r2, #3
 800141e:	400a      	ands	r2, r1
 8001420:	00d2      	lsls	r2, r2, #3
 8001422:	21ff      	movs	r1, #255	; 0xff
 8001424:	4091      	lsls	r1, r2
 8001426:	000a      	movs	r2, r1
 8001428:	43d2      	mvns	r2, r2
 800142a:	401a      	ands	r2, r3
 800142c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	019b      	lsls	r3, r3, #6
 8001432:	22ff      	movs	r2, #255	; 0xff
 8001434:	401a      	ands	r2, r3
 8001436:	1dfb      	adds	r3, r7, #7
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	0018      	movs	r0, r3
 800143c:	2303      	movs	r3, #3
 800143e:	4003      	ands	r3, r0
 8001440:	00db      	lsls	r3, r3, #3
 8001442:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001444:	481f      	ldr	r0, [pc, #124]	; (80014c4 <__NVIC_SetPriority+0xd4>)
 8001446:	1dfb      	adds	r3, r7, #7
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	b25b      	sxtb	r3, r3
 800144c:	089b      	lsrs	r3, r3, #2
 800144e:	430a      	orrs	r2, r1
 8001450:	33c0      	adds	r3, #192	; 0xc0
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001456:	e031      	b.n	80014bc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001458:	4a1b      	ldr	r2, [pc, #108]	; (80014c8 <__NVIC_SetPriority+0xd8>)
 800145a:	1dfb      	adds	r3, r7, #7
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	0019      	movs	r1, r3
 8001460:	230f      	movs	r3, #15
 8001462:	400b      	ands	r3, r1
 8001464:	3b08      	subs	r3, #8
 8001466:	089b      	lsrs	r3, r3, #2
 8001468:	3306      	adds	r3, #6
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	18d3      	adds	r3, r2, r3
 800146e:	3304      	adds	r3, #4
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	1dfa      	adds	r2, r7, #7
 8001474:	7812      	ldrb	r2, [r2, #0]
 8001476:	0011      	movs	r1, r2
 8001478:	2203      	movs	r2, #3
 800147a:	400a      	ands	r2, r1
 800147c:	00d2      	lsls	r2, r2, #3
 800147e:	21ff      	movs	r1, #255	; 0xff
 8001480:	4091      	lsls	r1, r2
 8001482:	000a      	movs	r2, r1
 8001484:	43d2      	mvns	r2, r2
 8001486:	401a      	ands	r2, r3
 8001488:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	019b      	lsls	r3, r3, #6
 800148e:	22ff      	movs	r2, #255	; 0xff
 8001490:	401a      	ands	r2, r3
 8001492:	1dfb      	adds	r3, r7, #7
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	0018      	movs	r0, r3
 8001498:	2303      	movs	r3, #3
 800149a:	4003      	ands	r3, r0
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014a0:	4809      	ldr	r0, [pc, #36]	; (80014c8 <__NVIC_SetPriority+0xd8>)
 80014a2:	1dfb      	adds	r3, r7, #7
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	001c      	movs	r4, r3
 80014a8:	230f      	movs	r3, #15
 80014aa:	4023      	ands	r3, r4
 80014ac:	3b08      	subs	r3, #8
 80014ae:	089b      	lsrs	r3, r3, #2
 80014b0:	430a      	orrs	r2, r1
 80014b2:	3306      	adds	r3, #6
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	18c3      	adds	r3, r0, r3
 80014b8:	3304      	adds	r3, #4
 80014ba:	601a      	str	r2, [r3, #0]
}
 80014bc:	46c0      	nop			; (mov r8, r8)
 80014be:	46bd      	mov	sp, r7
 80014c0:	b003      	add	sp, #12
 80014c2:	bd90      	pop	{r4, r7, pc}
 80014c4:	e000e100 	.word	0xe000e100
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	1e5a      	subs	r2, r3, #1
 80014d8:	2380      	movs	r3, #128	; 0x80
 80014da:	045b      	lsls	r3, r3, #17
 80014dc:	429a      	cmp	r2, r3
 80014de:	d301      	bcc.n	80014e4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014e0:	2301      	movs	r3, #1
 80014e2:	e010      	b.n	8001506 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014e4:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <SysTick_Config+0x44>)
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	3a01      	subs	r2, #1
 80014ea:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ec:	2301      	movs	r3, #1
 80014ee:	425b      	negs	r3, r3
 80014f0:	2103      	movs	r1, #3
 80014f2:	0018      	movs	r0, r3
 80014f4:	f7ff ff7c 	bl	80013f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014f8:	4b05      	ldr	r3, [pc, #20]	; (8001510 <SysTick_Config+0x44>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014fe:	4b04      	ldr	r3, [pc, #16]	; (8001510 <SysTick_Config+0x44>)
 8001500:	2207      	movs	r2, #7
 8001502:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001504:	2300      	movs	r3, #0
}
 8001506:	0018      	movs	r0, r3
 8001508:	46bd      	mov	sp, r7
 800150a:	b002      	add	sp, #8
 800150c:	bd80      	pop	{r7, pc}
 800150e:	46c0      	nop			; (mov r8, r8)
 8001510:	e000e010 	.word	0xe000e010

08001514 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	60b9      	str	r1, [r7, #8]
 800151c:	607a      	str	r2, [r7, #4]
 800151e:	210f      	movs	r1, #15
 8001520:	187b      	adds	r3, r7, r1
 8001522:	1c02      	adds	r2, r0, #0
 8001524:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	187b      	adds	r3, r7, r1
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	b25b      	sxtb	r3, r3
 800152e:	0011      	movs	r1, r2
 8001530:	0018      	movs	r0, r3
 8001532:	f7ff ff5d 	bl	80013f0 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001536:	46c0      	nop			; (mov r8, r8)
 8001538:	46bd      	mov	sp, r7
 800153a:	b004      	add	sp, #16
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b082      	sub	sp, #8
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	0018      	movs	r0, r3
 800154a:	f7ff ffbf 	bl	80014cc <SysTick_Config>
 800154e:	0003      	movs	r3, r0
}
 8001550:	0018      	movs	r0, r3
 8001552:	46bd      	mov	sp, r7
 8001554:	b002      	add	sp, #8
 8001556:	bd80      	pop	{r7, pc}

08001558 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001566:	e14f      	b.n	8001808 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2101      	movs	r1, #1
 800156e:	697a      	ldr	r2, [r7, #20]
 8001570:	4091      	lsls	r1, r2
 8001572:	000a      	movs	r2, r1
 8001574:	4013      	ands	r3, r2
 8001576:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d100      	bne.n	8001580 <HAL_GPIO_Init+0x28>
 800157e:	e140      	b.n	8001802 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	2203      	movs	r2, #3
 8001586:	4013      	ands	r3, r2
 8001588:	2b01      	cmp	r3, #1
 800158a:	d005      	beq.n	8001598 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	2203      	movs	r2, #3
 8001592:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001594:	2b02      	cmp	r3, #2
 8001596:	d130      	bne.n	80015fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	2203      	movs	r2, #3
 80015a4:	409a      	lsls	r2, r3
 80015a6:	0013      	movs	r3, r2
 80015a8:	43da      	mvns	r2, r3
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	4013      	ands	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	68da      	ldr	r2, [r3, #12]
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	409a      	lsls	r2, r3
 80015ba:	0013      	movs	r3, r2
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	4313      	orrs	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015ce:	2201      	movs	r2, #1
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	409a      	lsls	r2, r3
 80015d4:	0013      	movs	r3, r2
 80015d6:	43da      	mvns	r2, r3
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	4013      	ands	r3, r2
 80015dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	091b      	lsrs	r3, r3, #4
 80015e4:	2201      	movs	r2, #1
 80015e6:	401a      	ands	r2, r3
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	409a      	lsls	r2, r3
 80015ec:	0013      	movs	r3, r2
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2203      	movs	r2, #3
 8001600:	4013      	ands	r3, r2
 8001602:	2b03      	cmp	r3, #3
 8001604:	d017      	beq.n	8001636 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	2203      	movs	r2, #3
 8001612:	409a      	lsls	r2, r3
 8001614:	0013      	movs	r3, r2
 8001616:	43da      	mvns	r2, r3
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	4013      	ands	r3, r2
 800161c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	689a      	ldr	r2, [r3, #8]
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	409a      	lsls	r2, r3
 8001628:	0013      	movs	r3, r2
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	4313      	orrs	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2203      	movs	r2, #3
 800163c:	4013      	ands	r3, r2
 800163e:	2b02      	cmp	r3, #2
 8001640:	d123      	bne.n	800168a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	08da      	lsrs	r2, r3, #3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	3208      	adds	r2, #8
 800164a:	0092      	lsls	r2, r2, #2
 800164c:	58d3      	ldr	r3, [r2, r3]
 800164e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	2207      	movs	r2, #7
 8001654:	4013      	ands	r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	220f      	movs	r2, #15
 800165a:	409a      	lsls	r2, r3
 800165c:	0013      	movs	r3, r2
 800165e:	43da      	mvns	r2, r3
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	4013      	ands	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	691a      	ldr	r2, [r3, #16]
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	2107      	movs	r1, #7
 800166e:	400b      	ands	r3, r1
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	409a      	lsls	r2, r3
 8001674:	0013      	movs	r3, r2
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	4313      	orrs	r3, r2
 800167a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	08da      	lsrs	r2, r3, #3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3208      	adds	r2, #8
 8001684:	0092      	lsls	r2, r2, #2
 8001686:	6939      	ldr	r1, [r7, #16]
 8001688:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	2203      	movs	r2, #3
 8001696:	409a      	lsls	r2, r3
 8001698:	0013      	movs	r3, r2
 800169a:	43da      	mvns	r2, r3
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	4013      	ands	r3, r2
 80016a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	2203      	movs	r2, #3
 80016a8:	401a      	ands	r2, r3
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	409a      	lsls	r2, r3
 80016b0:	0013      	movs	r3, r2
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685a      	ldr	r2, [r3, #4]
 80016c2:	23c0      	movs	r3, #192	; 0xc0
 80016c4:	029b      	lsls	r3, r3, #10
 80016c6:	4013      	ands	r3, r2
 80016c8:	d100      	bne.n	80016cc <HAL_GPIO_Init+0x174>
 80016ca:	e09a      	b.n	8001802 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016cc:	4b54      	ldr	r3, [pc, #336]	; (8001820 <HAL_GPIO_Init+0x2c8>)
 80016ce:	699a      	ldr	r2, [r3, #24]
 80016d0:	4b53      	ldr	r3, [pc, #332]	; (8001820 <HAL_GPIO_Init+0x2c8>)
 80016d2:	2101      	movs	r1, #1
 80016d4:	430a      	orrs	r2, r1
 80016d6:	619a      	str	r2, [r3, #24]
 80016d8:	4b51      	ldr	r3, [pc, #324]	; (8001820 <HAL_GPIO_Init+0x2c8>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	2201      	movs	r2, #1
 80016de:	4013      	ands	r3, r2
 80016e0:	60bb      	str	r3, [r7, #8]
 80016e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016e4:	4a4f      	ldr	r2, [pc, #316]	; (8001824 <HAL_GPIO_Init+0x2cc>)
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	089b      	lsrs	r3, r3, #2
 80016ea:	3302      	adds	r3, #2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	589b      	ldr	r3, [r3, r2]
 80016f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	2203      	movs	r2, #3
 80016f6:	4013      	ands	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	220f      	movs	r2, #15
 80016fc:	409a      	lsls	r2, r3
 80016fe:	0013      	movs	r3, r2
 8001700:	43da      	mvns	r2, r3
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	4013      	ands	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	2390      	movs	r3, #144	; 0x90
 800170c:	05db      	lsls	r3, r3, #23
 800170e:	429a      	cmp	r2, r3
 8001710:	d013      	beq.n	800173a <HAL_GPIO_Init+0x1e2>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a44      	ldr	r2, [pc, #272]	; (8001828 <HAL_GPIO_Init+0x2d0>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d00d      	beq.n	8001736 <HAL_GPIO_Init+0x1de>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a43      	ldr	r2, [pc, #268]	; (800182c <HAL_GPIO_Init+0x2d4>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d007      	beq.n	8001732 <HAL_GPIO_Init+0x1da>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a42      	ldr	r2, [pc, #264]	; (8001830 <HAL_GPIO_Init+0x2d8>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d101      	bne.n	800172e <HAL_GPIO_Init+0x1d6>
 800172a:	2303      	movs	r3, #3
 800172c:	e006      	b.n	800173c <HAL_GPIO_Init+0x1e4>
 800172e:	2305      	movs	r3, #5
 8001730:	e004      	b.n	800173c <HAL_GPIO_Init+0x1e4>
 8001732:	2302      	movs	r3, #2
 8001734:	e002      	b.n	800173c <HAL_GPIO_Init+0x1e4>
 8001736:	2301      	movs	r3, #1
 8001738:	e000      	b.n	800173c <HAL_GPIO_Init+0x1e4>
 800173a:	2300      	movs	r3, #0
 800173c:	697a      	ldr	r2, [r7, #20]
 800173e:	2103      	movs	r1, #3
 8001740:	400a      	ands	r2, r1
 8001742:	0092      	lsls	r2, r2, #2
 8001744:	4093      	lsls	r3, r2
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	4313      	orrs	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800174c:	4935      	ldr	r1, [pc, #212]	; (8001824 <HAL_GPIO_Init+0x2cc>)
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	089b      	lsrs	r3, r3, #2
 8001752:	3302      	adds	r3, #2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800175a:	4b36      	ldr	r3, [pc, #216]	; (8001834 <HAL_GPIO_Init+0x2dc>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	43da      	mvns	r2, r3
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	4013      	ands	r3, r2
 8001768:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685a      	ldr	r2, [r3, #4]
 800176e:	2380      	movs	r3, #128	; 0x80
 8001770:	035b      	lsls	r3, r3, #13
 8001772:	4013      	ands	r3, r2
 8001774:	d003      	beq.n	800177e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	4313      	orrs	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800177e:	4b2d      	ldr	r3, [pc, #180]	; (8001834 <HAL_GPIO_Init+0x2dc>)
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001784:	4b2b      	ldr	r3, [pc, #172]	; (8001834 <HAL_GPIO_Init+0x2dc>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	43da      	mvns	r2, r3
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	4013      	ands	r3, r2
 8001792:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685a      	ldr	r2, [r3, #4]
 8001798:	2380      	movs	r3, #128	; 0x80
 800179a:	039b      	lsls	r3, r3, #14
 800179c:	4013      	ands	r3, r2
 800179e:	d003      	beq.n	80017a8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80017a8:	4b22      	ldr	r3, [pc, #136]	; (8001834 <HAL_GPIO_Init+0x2dc>)
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80017ae:	4b21      	ldr	r3, [pc, #132]	; (8001834 <HAL_GPIO_Init+0x2dc>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	43da      	mvns	r2, r3
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	4013      	ands	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685a      	ldr	r2, [r3, #4]
 80017c2:	2380      	movs	r3, #128	; 0x80
 80017c4:	029b      	lsls	r3, r3, #10
 80017c6:	4013      	ands	r3, r2
 80017c8:	d003      	beq.n	80017d2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80017d2:	4b18      	ldr	r3, [pc, #96]	; (8001834 <HAL_GPIO_Init+0x2dc>)
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80017d8:	4b16      	ldr	r3, [pc, #88]	; (8001834 <HAL_GPIO_Init+0x2dc>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	43da      	mvns	r2, r3
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	4013      	ands	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685a      	ldr	r2, [r3, #4]
 80017ec:	2380      	movs	r3, #128	; 0x80
 80017ee:	025b      	lsls	r3, r3, #9
 80017f0:	4013      	ands	r3, r2
 80017f2:	d003      	beq.n	80017fc <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80017fc:	4b0d      	ldr	r3, [pc, #52]	; (8001834 <HAL_GPIO_Init+0x2dc>)
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	3301      	adds	r3, #1
 8001806:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	40da      	lsrs	r2, r3
 8001810:	1e13      	subs	r3, r2, #0
 8001812:	d000      	beq.n	8001816 <HAL_GPIO_Init+0x2be>
 8001814:	e6a8      	b.n	8001568 <HAL_GPIO_Init+0x10>
  } 
}
 8001816:	46c0      	nop			; (mov r8, r8)
 8001818:	46c0      	nop			; (mov r8, r8)
 800181a:	46bd      	mov	sp, r7
 800181c:	b006      	add	sp, #24
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40021000 	.word	0x40021000
 8001824:	40010000 	.word	0x40010000
 8001828:	48000400 	.word	0x48000400
 800182c:	48000800 	.word	0x48000800
 8001830:	48000c00 	.word	0x48000c00
 8001834:	40010400 	.word	0x40010400

08001838 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	000a      	movs	r2, r1
 8001842:	1cbb      	adds	r3, r7, #2
 8001844:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	1cba      	adds	r2, r7, #2
 800184c:	8812      	ldrh	r2, [r2, #0]
 800184e:	4013      	ands	r3, r2
 8001850:	d004      	beq.n	800185c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001852:	230f      	movs	r3, #15
 8001854:	18fb      	adds	r3, r7, r3
 8001856:	2201      	movs	r2, #1
 8001858:	701a      	strb	r2, [r3, #0]
 800185a:	e003      	b.n	8001864 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800185c:	230f      	movs	r3, #15
 800185e:	18fb      	adds	r3, r7, r3
 8001860:	2200      	movs	r2, #0
 8001862:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001864:	230f      	movs	r3, #15
 8001866:	18fb      	adds	r3, r7, r3
 8001868:	781b      	ldrb	r3, [r3, #0]
  }
 800186a:	0018      	movs	r0, r3
 800186c:	46bd      	mov	sp, r7
 800186e:	b004      	add	sp, #16
 8001870:	bd80      	pop	{r7, pc}

08001872 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b082      	sub	sp, #8
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
 800187a:	0008      	movs	r0, r1
 800187c:	0011      	movs	r1, r2
 800187e:	1cbb      	adds	r3, r7, #2
 8001880:	1c02      	adds	r2, r0, #0
 8001882:	801a      	strh	r2, [r3, #0]
 8001884:	1c7b      	adds	r3, r7, #1
 8001886:	1c0a      	adds	r2, r1, #0
 8001888:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800188a:	1c7b      	adds	r3, r7, #1
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d004      	beq.n	800189c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001892:	1cbb      	adds	r3, r7, #2
 8001894:	881a      	ldrh	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800189a:	e003      	b.n	80018a4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800189c:	1cbb      	adds	r3, r7, #2
 800189e:	881a      	ldrh	r2, [r3, #0]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018a4:	46c0      	nop			; (mov r8, r8)
 80018a6:	46bd      	mov	sp, r7
 80018a8:	b002      	add	sp, #8
 80018aa:	bd80      	pop	{r7, pc}

080018ac <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	000a      	movs	r2, r1
 80018b6:	1cbb      	adds	r3, r7, #2
 80018b8:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	695b      	ldr	r3, [r3, #20]
 80018be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018c0:	1cbb      	adds	r3, r7, #2
 80018c2:	881b      	ldrh	r3, [r3, #0]
 80018c4:	68fa      	ldr	r2, [r7, #12]
 80018c6:	4013      	ands	r3, r2
 80018c8:	041a      	lsls	r2, r3, #16
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	43db      	mvns	r3, r3
 80018ce:	1cb9      	adds	r1, r7, #2
 80018d0:	8809      	ldrh	r1, [r1, #0]
 80018d2:	400b      	ands	r3, r1
 80018d4:	431a      	orrs	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	619a      	str	r2, [r3, #24]
}
 80018da:	46c0      	nop			; (mov r8, r8)
 80018dc:	46bd      	mov	sp, r7
 80018de:	b004      	add	sp, #16
 80018e0:	bd80      	pop	{r7, pc}
	...

080018e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b088      	sub	sp, #32
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d101      	bne.n	80018f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e301      	b.n	8001efa <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2201      	movs	r2, #1
 80018fc:	4013      	ands	r3, r2
 80018fe:	d100      	bne.n	8001902 <HAL_RCC_OscConfig+0x1e>
 8001900:	e08d      	b.n	8001a1e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001902:	4bc3      	ldr	r3, [pc, #780]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	220c      	movs	r2, #12
 8001908:	4013      	ands	r3, r2
 800190a:	2b04      	cmp	r3, #4
 800190c:	d00e      	beq.n	800192c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800190e:	4bc0      	ldr	r3, [pc, #768]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	220c      	movs	r2, #12
 8001914:	4013      	ands	r3, r2
 8001916:	2b08      	cmp	r3, #8
 8001918:	d116      	bne.n	8001948 <HAL_RCC_OscConfig+0x64>
 800191a:	4bbd      	ldr	r3, [pc, #756]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 800191c:	685a      	ldr	r2, [r3, #4]
 800191e:	2380      	movs	r3, #128	; 0x80
 8001920:	025b      	lsls	r3, r3, #9
 8001922:	401a      	ands	r2, r3
 8001924:	2380      	movs	r3, #128	; 0x80
 8001926:	025b      	lsls	r3, r3, #9
 8001928:	429a      	cmp	r2, r3
 800192a:	d10d      	bne.n	8001948 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800192c:	4bb8      	ldr	r3, [pc, #736]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	2380      	movs	r3, #128	; 0x80
 8001932:	029b      	lsls	r3, r3, #10
 8001934:	4013      	ands	r3, r2
 8001936:	d100      	bne.n	800193a <HAL_RCC_OscConfig+0x56>
 8001938:	e070      	b.n	8001a1c <HAL_RCC_OscConfig+0x138>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d000      	beq.n	8001944 <HAL_RCC_OscConfig+0x60>
 8001942:	e06b      	b.n	8001a1c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e2d8      	b.n	8001efa <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d107      	bne.n	8001960 <HAL_RCC_OscConfig+0x7c>
 8001950:	4baf      	ldr	r3, [pc, #700]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	4bae      	ldr	r3, [pc, #696]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001956:	2180      	movs	r1, #128	; 0x80
 8001958:	0249      	lsls	r1, r1, #9
 800195a:	430a      	orrs	r2, r1
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	e02f      	b.n	80019c0 <HAL_RCC_OscConfig+0xdc>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d10c      	bne.n	8001982 <HAL_RCC_OscConfig+0x9e>
 8001968:	4ba9      	ldr	r3, [pc, #676]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	4ba8      	ldr	r3, [pc, #672]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 800196e:	49a9      	ldr	r1, [pc, #676]	; (8001c14 <HAL_RCC_OscConfig+0x330>)
 8001970:	400a      	ands	r2, r1
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	4ba6      	ldr	r3, [pc, #664]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	4ba5      	ldr	r3, [pc, #660]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 800197a:	49a7      	ldr	r1, [pc, #668]	; (8001c18 <HAL_RCC_OscConfig+0x334>)
 800197c:	400a      	ands	r2, r1
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	e01e      	b.n	80019c0 <HAL_RCC_OscConfig+0xdc>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2b05      	cmp	r3, #5
 8001988:	d10e      	bne.n	80019a8 <HAL_RCC_OscConfig+0xc4>
 800198a:	4ba1      	ldr	r3, [pc, #644]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	4ba0      	ldr	r3, [pc, #640]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001990:	2180      	movs	r1, #128	; 0x80
 8001992:	02c9      	lsls	r1, r1, #11
 8001994:	430a      	orrs	r2, r1
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	4b9d      	ldr	r3, [pc, #628]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	4b9c      	ldr	r3, [pc, #624]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 800199e:	2180      	movs	r1, #128	; 0x80
 80019a0:	0249      	lsls	r1, r1, #9
 80019a2:	430a      	orrs	r2, r1
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	e00b      	b.n	80019c0 <HAL_RCC_OscConfig+0xdc>
 80019a8:	4b99      	ldr	r3, [pc, #612]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	4b98      	ldr	r3, [pc, #608]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 80019ae:	4999      	ldr	r1, [pc, #612]	; (8001c14 <HAL_RCC_OscConfig+0x330>)
 80019b0:	400a      	ands	r2, r1
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	4b96      	ldr	r3, [pc, #600]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	4b95      	ldr	r3, [pc, #596]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 80019ba:	4997      	ldr	r1, [pc, #604]	; (8001c18 <HAL_RCC_OscConfig+0x334>)
 80019bc:	400a      	ands	r2, r1
 80019be:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d014      	beq.n	80019f2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c8:	f7ff fce4 	bl	8001394 <HAL_GetTick>
 80019cc:	0003      	movs	r3, r0
 80019ce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019d0:	e008      	b.n	80019e4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019d2:	f7ff fcdf 	bl	8001394 <HAL_GetTick>
 80019d6:	0002      	movs	r2, r0
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b64      	cmp	r3, #100	; 0x64
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e28a      	b.n	8001efa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e4:	4b8a      	ldr	r3, [pc, #552]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	2380      	movs	r3, #128	; 0x80
 80019ea:	029b      	lsls	r3, r3, #10
 80019ec:	4013      	ands	r3, r2
 80019ee:	d0f0      	beq.n	80019d2 <HAL_RCC_OscConfig+0xee>
 80019f0:	e015      	b.n	8001a1e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f2:	f7ff fccf 	bl	8001394 <HAL_GetTick>
 80019f6:	0003      	movs	r3, r0
 80019f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019fc:	f7ff fcca 	bl	8001394 <HAL_GetTick>
 8001a00:	0002      	movs	r2, r0
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b64      	cmp	r3, #100	; 0x64
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e275      	b.n	8001efa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a0e:	4b80      	ldr	r3, [pc, #512]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	2380      	movs	r3, #128	; 0x80
 8001a14:	029b      	lsls	r3, r3, #10
 8001a16:	4013      	ands	r3, r2
 8001a18:	d1f0      	bne.n	80019fc <HAL_RCC_OscConfig+0x118>
 8001a1a:	e000      	b.n	8001a1e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a1c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2202      	movs	r2, #2
 8001a24:	4013      	ands	r3, r2
 8001a26:	d100      	bne.n	8001a2a <HAL_RCC_OscConfig+0x146>
 8001a28:	e069      	b.n	8001afe <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a2a:	4b79      	ldr	r3, [pc, #484]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	220c      	movs	r2, #12
 8001a30:	4013      	ands	r3, r2
 8001a32:	d00b      	beq.n	8001a4c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a34:	4b76      	ldr	r3, [pc, #472]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	220c      	movs	r2, #12
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	2b08      	cmp	r3, #8
 8001a3e:	d11c      	bne.n	8001a7a <HAL_RCC_OscConfig+0x196>
 8001a40:	4b73      	ldr	r3, [pc, #460]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	2380      	movs	r3, #128	; 0x80
 8001a46:	025b      	lsls	r3, r3, #9
 8001a48:	4013      	ands	r3, r2
 8001a4a:	d116      	bne.n	8001a7a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a4c:	4b70      	ldr	r3, [pc, #448]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2202      	movs	r2, #2
 8001a52:	4013      	ands	r3, r2
 8001a54:	d005      	beq.n	8001a62 <HAL_RCC_OscConfig+0x17e>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d001      	beq.n	8001a62 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e24b      	b.n	8001efa <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a62:	4b6b      	ldr	r3, [pc, #428]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	22f8      	movs	r2, #248	; 0xf8
 8001a68:	4393      	bics	r3, r2
 8001a6a:	0019      	movs	r1, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	691b      	ldr	r3, [r3, #16]
 8001a70:	00da      	lsls	r2, r3, #3
 8001a72:	4b67      	ldr	r3, [pc, #412]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001a74:	430a      	orrs	r2, r1
 8001a76:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a78:	e041      	b.n	8001afe <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d024      	beq.n	8001acc <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a82:	4b63      	ldr	r3, [pc, #396]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	4b62      	ldr	r3, [pc, #392]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001a88:	2101      	movs	r1, #1
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8e:	f7ff fc81 	bl	8001394 <HAL_GetTick>
 8001a92:	0003      	movs	r3, r0
 8001a94:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a98:	f7ff fc7c 	bl	8001394 <HAL_GetTick>
 8001a9c:	0002      	movs	r2, r0
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e227      	b.n	8001efa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aaa:	4b59      	ldr	r3, [pc, #356]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2202      	movs	r2, #2
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	d0f1      	beq.n	8001a98 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab4:	4b56      	ldr	r3, [pc, #344]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	22f8      	movs	r2, #248	; 0xf8
 8001aba:	4393      	bics	r3, r2
 8001abc:	0019      	movs	r1, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	00da      	lsls	r2, r3, #3
 8001ac4:	4b52      	ldr	r3, [pc, #328]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	e018      	b.n	8001afe <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001acc:	4b50      	ldr	r3, [pc, #320]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	4b4f      	ldr	r3, [pc, #316]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	438a      	bics	r2, r1
 8001ad6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad8:	f7ff fc5c 	bl	8001394 <HAL_GetTick>
 8001adc:	0003      	movs	r3, r0
 8001ade:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ae2:	f7ff fc57 	bl	8001394 <HAL_GetTick>
 8001ae6:	0002      	movs	r2, r0
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e202      	b.n	8001efa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001af4:	4b46      	ldr	r3, [pc, #280]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2202      	movs	r2, #2
 8001afa:	4013      	ands	r3, r2
 8001afc:	d1f1      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2208      	movs	r2, #8
 8001b04:	4013      	ands	r3, r2
 8001b06:	d036      	beq.n	8001b76 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	69db      	ldr	r3, [r3, #28]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d019      	beq.n	8001b44 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b10:	4b3f      	ldr	r3, [pc, #252]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001b12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b14:	4b3e      	ldr	r3, [pc, #248]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001b16:	2101      	movs	r1, #1
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b1c:	f7ff fc3a 	bl	8001394 <HAL_GetTick>
 8001b20:	0003      	movs	r3, r0
 8001b22:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b24:	e008      	b.n	8001b38 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b26:	f7ff fc35 	bl	8001394 <HAL_GetTick>
 8001b2a:	0002      	movs	r2, r0
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e1e0      	b.n	8001efa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b38:	4b35      	ldr	r3, [pc, #212]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	4013      	ands	r3, r2
 8001b40:	d0f1      	beq.n	8001b26 <HAL_RCC_OscConfig+0x242>
 8001b42:	e018      	b.n	8001b76 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b44:	4b32      	ldr	r3, [pc, #200]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001b46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b48:	4b31      	ldr	r3, [pc, #196]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	438a      	bics	r2, r1
 8001b4e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b50:	f7ff fc20 	bl	8001394 <HAL_GetTick>
 8001b54:	0003      	movs	r3, r0
 8001b56:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b58:	e008      	b.n	8001b6c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b5a:	f7ff fc1b 	bl	8001394 <HAL_GetTick>
 8001b5e:	0002      	movs	r2, r0
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e1c6      	b.n	8001efa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b6c:	4b28      	ldr	r3, [pc, #160]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b70:	2202      	movs	r2, #2
 8001b72:	4013      	ands	r3, r2
 8001b74:	d1f1      	bne.n	8001b5a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2204      	movs	r2, #4
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	d100      	bne.n	8001b82 <HAL_RCC_OscConfig+0x29e>
 8001b80:	e0b4      	b.n	8001cec <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b82:	201f      	movs	r0, #31
 8001b84:	183b      	adds	r3, r7, r0
 8001b86:	2200      	movs	r2, #0
 8001b88:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b8a:	4b21      	ldr	r3, [pc, #132]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001b8c:	69da      	ldr	r2, [r3, #28]
 8001b8e:	2380      	movs	r3, #128	; 0x80
 8001b90:	055b      	lsls	r3, r3, #21
 8001b92:	4013      	ands	r3, r2
 8001b94:	d110      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b96:	4b1e      	ldr	r3, [pc, #120]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001b98:	69da      	ldr	r2, [r3, #28]
 8001b9a:	4b1d      	ldr	r3, [pc, #116]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001b9c:	2180      	movs	r1, #128	; 0x80
 8001b9e:	0549      	lsls	r1, r1, #21
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	61da      	str	r2, [r3, #28]
 8001ba4:	4b1a      	ldr	r3, [pc, #104]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001ba6:	69da      	ldr	r2, [r3, #28]
 8001ba8:	2380      	movs	r3, #128	; 0x80
 8001baa:	055b      	lsls	r3, r3, #21
 8001bac:	4013      	ands	r3, r2
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001bb2:	183b      	adds	r3, r7, r0
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb8:	4b18      	ldr	r3, [pc, #96]	; (8001c1c <HAL_RCC_OscConfig+0x338>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	2380      	movs	r3, #128	; 0x80
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	d11a      	bne.n	8001bfa <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bc4:	4b15      	ldr	r3, [pc, #84]	; (8001c1c <HAL_RCC_OscConfig+0x338>)
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	4b14      	ldr	r3, [pc, #80]	; (8001c1c <HAL_RCC_OscConfig+0x338>)
 8001bca:	2180      	movs	r1, #128	; 0x80
 8001bcc:	0049      	lsls	r1, r1, #1
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bd2:	f7ff fbdf 	bl	8001394 <HAL_GetTick>
 8001bd6:	0003      	movs	r3, r0
 8001bd8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bdc:	f7ff fbda 	bl	8001394 <HAL_GetTick>
 8001be0:	0002      	movs	r2, r0
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b64      	cmp	r3, #100	; 0x64
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e185      	b.n	8001efa <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bee:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <HAL_RCC_OscConfig+0x338>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	2380      	movs	r3, #128	; 0x80
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	d0f0      	beq.n	8001bdc <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d10e      	bne.n	8001c20 <HAL_RCC_OscConfig+0x33c>
 8001c02:	4b03      	ldr	r3, [pc, #12]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001c04:	6a1a      	ldr	r2, [r3, #32]
 8001c06:	4b02      	ldr	r3, [pc, #8]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001c08:	2101      	movs	r1, #1
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	621a      	str	r2, [r3, #32]
 8001c0e:	e035      	b.n	8001c7c <HAL_RCC_OscConfig+0x398>
 8001c10:	40021000 	.word	0x40021000
 8001c14:	fffeffff 	.word	0xfffeffff
 8001c18:	fffbffff 	.word	0xfffbffff
 8001c1c:	40007000 	.word	0x40007000
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d10c      	bne.n	8001c42 <HAL_RCC_OscConfig+0x35e>
 8001c28:	4bb6      	ldr	r3, [pc, #728]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001c2a:	6a1a      	ldr	r2, [r3, #32]
 8001c2c:	4bb5      	ldr	r3, [pc, #724]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001c2e:	2101      	movs	r1, #1
 8001c30:	438a      	bics	r2, r1
 8001c32:	621a      	str	r2, [r3, #32]
 8001c34:	4bb3      	ldr	r3, [pc, #716]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001c36:	6a1a      	ldr	r2, [r3, #32]
 8001c38:	4bb2      	ldr	r3, [pc, #712]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001c3a:	2104      	movs	r1, #4
 8001c3c:	438a      	bics	r2, r1
 8001c3e:	621a      	str	r2, [r3, #32]
 8001c40:	e01c      	b.n	8001c7c <HAL_RCC_OscConfig+0x398>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	2b05      	cmp	r3, #5
 8001c48:	d10c      	bne.n	8001c64 <HAL_RCC_OscConfig+0x380>
 8001c4a:	4bae      	ldr	r3, [pc, #696]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001c4c:	6a1a      	ldr	r2, [r3, #32]
 8001c4e:	4bad      	ldr	r3, [pc, #692]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001c50:	2104      	movs	r1, #4
 8001c52:	430a      	orrs	r2, r1
 8001c54:	621a      	str	r2, [r3, #32]
 8001c56:	4bab      	ldr	r3, [pc, #684]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001c58:	6a1a      	ldr	r2, [r3, #32]
 8001c5a:	4baa      	ldr	r3, [pc, #680]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	621a      	str	r2, [r3, #32]
 8001c62:	e00b      	b.n	8001c7c <HAL_RCC_OscConfig+0x398>
 8001c64:	4ba7      	ldr	r3, [pc, #668]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001c66:	6a1a      	ldr	r2, [r3, #32]
 8001c68:	4ba6      	ldr	r3, [pc, #664]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	438a      	bics	r2, r1
 8001c6e:	621a      	str	r2, [r3, #32]
 8001c70:	4ba4      	ldr	r3, [pc, #656]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001c72:	6a1a      	ldr	r2, [r3, #32]
 8001c74:	4ba3      	ldr	r3, [pc, #652]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001c76:	2104      	movs	r1, #4
 8001c78:	438a      	bics	r2, r1
 8001c7a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d014      	beq.n	8001cae <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c84:	f7ff fb86 	bl	8001394 <HAL_GetTick>
 8001c88:	0003      	movs	r3, r0
 8001c8a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c8c:	e009      	b.n	8001ca2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c8e:	f7ff fb81 	bl	8001394 <HAL_GetTick>
 8001c92:	0002      	movs	r2, r0
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	4a9b      	ldr	r2, [pc, #620]	; (8001f08 <HAL_RCC_OscConfig+0x624>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e12b      	b.n	8001efa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca2:	4b98      	ldr	r3, [pc, #608]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001ca4:	6a1b      	ldr	r3, [r3, #32]
 8001ca6:	2202      	movs	r2, #2
 8001ca8:	4013      	ands	r3, r2
 8001caa:	d0f0      	beq.n	8001c8e <HAL_RCC_OscConfig+0x3aa>
 8001cac:	e013      	b.n	8001cd6 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cae:	f7ff fb71 	bl	8001394 <HAL_GetTick>
 8001cb2:	0003      	movs	r3, r0
 8001cb4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cb6:	e009      	b.n	8001ccc <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cb8:	f7ff fb6c 	bl	8001394 <HAL_GetTick>
 8001cbc:	0002      	movs	r2, r0
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	4a91      	ldr	r2, [pc, #580]	; (8001f08 <HAL_RCC_OscConfig+0x624>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e116      	b.n	8001efa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ccc:	4b8d      	ldr	r3, [pc, #564]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001cce:	6a1b      	ldr	r3, [r3, #32]
 8001cd0:	2202      	movs	r2, #2
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	d1f0      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001cd6:	231f      	movs	r3, #31
 8001cd8:	18fb      	adds	r3, r7, r3
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d105      	bne.n	8001cec <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ce0:	4b88      	ldr	r3, [pc, #544]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001ce2:	69da      	ldr	r2, [r3, #28]
 8001ce4:	4b87      	ldr	r3, [pc, #540]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001ce6:	4989      	ldr	r1, [pc, #548]	; (8001f0c <HAL_RCC_OscConfig+0x628>)
 8001ce8:	400a      	ands	r2, r1
 8001cea:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2210      	movs	r2, #16
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	d063      	beq.n	8001dbe <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d12a      	bne.n	8001d54 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001cfe:	4b81      	ldr	r3, [pc, #516]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001d00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d02:	4b80      	ldr	r3, [pc, #512]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001d04:	2104      	movs	r1, #4
 8001d06:	430a      	orrs	r2, r1
 8001d08:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001d0a:	4b7e      	ldr	r3, [pc, #504]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001d0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d0e:	4b7d      	ldr	r3, [pc, #500]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001d10:	2101      	movs	r1, #1
 8001d12:	430a      	orrs	r2, r1
 8001d14:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d16:	f7ff fb3d 	bl	8001394 <HAL_GetTick>
 8001d1a:	0003      	movs	r3, r0
 8001d1c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001d20:	f7ff fb38 	bl	8001394 <HAL_GetTick>
 8001d24:	0002      	movs	r2, r0
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e0e3      	b.n	8001efa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001d32:	4b74      	ldr	r3, [pc, #464]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d36:	2202      	movs	r2, #2
 8001d38:	4013      	ands	r3, r2
 8001d3a:	d0f1      	beq.n	8001d20 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001d3c:	4b71      	ldr	r3, [pc, #452]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d40:	22f8      	movs	r2, #248	; 0xf8
 8001d42:	4393      	bics	r3, r2
 8001d44:	0019      	movs	r1, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	00da      	lsls	r2, r3, #3
 8001d4c:	4b6d      	ldr	r3, [pc, #436]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	635a      	str	r2, [r3, #52]	; 0x34
 8001d52:	e034      	b.n	8001dbe <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	695b      	ldr	r3, [r3, #20]
 8001d58:	3305      	adds	r3, #5
 8001d5a:	d111      	bne.n	8001d80 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001d5c:	4b69      	ldr	r3, [pc, #420]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001d5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d60:	4b68      	ldr	r3, [pc, #416]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001d62:	2104      	movs	r1, #4
 8001d64:	438a      	bics	r2, r1
 8001d66:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001d68:	4b66      	ldr	r3, [pc, #408]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d6c:	22f8      	movs	r2, #248	; 0xf8
 8001d6e:	4393      	bics	r3, r2
 8001d70:	0019      	movs	r1, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	00da      	lsls	r2, r3, #3
 8001d78:	4b62      	ldr	r3, [pc, #392]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	635a      	str	r2, [r3, #52]	; 0x34
 8001d7e:	e01e      	b.n	8001dbe <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001d80:	4b60      	ldr	r3, [pc, #384]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001d82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d84:	4b5f      	ldr	r3, [pc, #380]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001d86:	2104      	movs	r1, #4
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001d8c:	4b5d      	ldr	r3, [pc, #372]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001d8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d90:	4b5c      	ldr	r3, [pc, #368]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001d92:	2101      	movs	r1, #1
 8001d94:	438a      	bics	r2, r1
 8001d96:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d98:	f7ff fafc 	bl	8001394 <HAL_GetTick>
 8001d9c:	0003      	movs	r3, r0
 8001d9e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001da2:	f7ff faf7 	bl	8001394 <HAL_GetTick>
 8001da6:	0002      	movs	r2, r0
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e0a2      	b.n	8001efa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001db4:	4b53      	ldr	r3, [pc, #332]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001db8:	2202      	movs	r2, #2
 8001dba:	4013      	ands	r3, r2
 8001dbc:	d1f1      	bne.n	8001da2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d100      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x4e4>
 8001dc6:	e097      	b.n	8001ef8 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dc8:	4b4e      	ldr	r3, [pc, #312]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	220c      	movs	r2, #12
 8001dce:	4013      	ands	r3, r2
 8001dd0:	2b08      	cmp	r3, #8
 8001dd2:	d100      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x4f2>
 8001dd4:	e06b      	b.n	8001eae <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a1b      	ldr	r3, [r3, #32]
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d14c      	bne.n	8001e78 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dde:	4b49      	ldr	r3, [pc, #292]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	4b48      	ldr	r3, [pc, #288]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001de4:	494a      	ldr	r1, [pc, #296]	; (8001f10 <HAL_RCC_OscConfig+0x62c>)
 8001de6:	400a      	ands	r2, r1
 8001de8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dea:	f7ff fad3 	bl	8001394 <HAL_GetTick>
 8001dee:	0003      	movs	r3, r0
 8001df0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001df4:	f7ff face 	bl	8001394 <HAL_GetTick>
 8001df8:	0002      	movs	r2, r0
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e079      	b.n	8001efa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e06:	4b3f      	ldr	r3, [pc, #252]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	2380      	movs	r3, #128	; 0x80
 8001e0c:	049b      	lsls	r3, r3, #18
 8001e0e:	4013      	ands	r3, r2
 8001e10:	d1f0      	bne.n	8001df4 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e12:	4b3c      	ldr	r3, [pc, #240]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e16:	220f      	movs	r2, #15
 8001e18:	4393      	bics	r3, r2
 8001e1a:	0019      	movs	r1, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e20:	4b38      	ldr	r3, [pc, #224]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001e22:	430a      	orrs	r2, r1
 8001e24:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e26:	4b37      	ldr	r3, [pc, #220]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	4a3a      	ldr	r2, [pc, #232]	; (8001f14 <HAL_RCC_OscConfig+0x630>)
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	0019      	movs	r1, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	4b32      	ldr	r3, [pc, #200]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e40:	4b30      	ldr	r3, [pc, #192]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	4b2f      	ldr	r3, [pc, #188]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001e46:	2180      	movs	r1, #128	; 0x80
 8001e48:	0449      	lsls	r1, r1, #17
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4e:	f7ff faa1 	bl	8001394 <HAL_GetTick>
 8001e52:	0003      	movs	r3, r0
 8001e54:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e58:	f7ff fa9c 	bl	8001394 <HAL_GetTick>
 8001e5c:	0002      	movs	r2, r0
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e047      	b.n	8001efa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e6a:	4b26      	ldr	r3, [pc, #152]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	2380      	movs	r3, #128	; 0x80
 8001e70:	049b      	lsls	r3, r3, #18
 8001e72:	4013      	ands	r3, r2
 8001e74:	d0f0      	beq.n	8001e58 <HAL_RCC_OscConfig+0x574>
 8001e76:	e03f      	b.n	8001ef8 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e78:	4b22      	ldr	r3, [pc, #136]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	4b21      	ldr	r3, [pc, #132]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001e7e:	4924      	ldr	r1, [pc, #144]	; (8001f10 <HAL_RCC_OscConfig+0x62c>)
 8001e80:	400a      	ands	r2, r1
 8001e82:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e84:	f7ff fa86 	bl	8001394 <HAL_GetTick>
 8001e88:	0003      	movs	r3, r0
 8001e8a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e8c:	e008      	b.n	8001ea0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e8e:	f7ff fa81 	bl	8001394 <HAL_GetTick>
 8001e92:	0002      	movs	r2, r0
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e02c      	b.n	8001efa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ea0:	4b18      	ldr	r3, [pc, #96]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	2380      	movs	r3, #128	; 0x80
 8001ea6:	049b      	lsls	r3, r3, #18
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	d1f0      	bne.n	8001e8e <HAL_RCC_OscConfig+0x5aa>
 8001eac:	e024      	b.n	8001ef8 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a1b      	ldr	r3, [r3, #32]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d101      	bne.n	8001eba <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e01f      	b.n	8001efa <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001eba:	4b12      	ldr	r3, [pc, #72]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001ec0:	4b10      	ldr	r3, [pc, #64]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	2380      	movs	r3, #128	; 0x80
 8001eca:	025b      	lsls	r3, r3, #9
 8001ecc:	401a      	ands	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d10e      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	220f      	movs	r2, #15
 8001eda:	401a      	ands	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d107      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001ee4:	697a      	ldr	r2, [r7, #20]
 8001ee6:	23f0      	movs	r3, #240	; 0xf0
 8001ee8:	039b      	lsls	r3, r3, #14
 8001eea:	401a      	ands	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d001      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e000      	b.n	8001efa <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	0018      	movs	r0, r3
 8001efc:	46bd      	mov	sp, r7
 8001efe:	b008      	add	sp, #32
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	46c0      	nop			; (mov r8, r8)
 8001f04:	40021000 	.word	0x40021000
 8001f08:	00001388 	.word	0x00001388
 8001f0c:	efffffff 	.word	0xefffffff
 8001f10:	feffffff 	.word	0xfeffffff
 8001f14:	ffc2ffff 	.word	0xffc2ffff

08001f18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e0b3      	b.n	8002094 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f2c:	4b5b      	ldr	r3, [pc, #364]	; (800209c <HAL_RCC_ClockConfig+0x184>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2201      	movs	r2, #1
 8001f32:	4013      	ands	r3, r2
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d911      	bls.n	8001f5e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f3a:	4b58      	ldr	r3, [pc, #352]	; (800209c <HAL_RCC_ClockConfig+0x184>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	4393      	bics	r3, r2
 8001f42:	0019      	movs	r1, r3
 8001f44:	4b55      	ldr	r3, [pc, #340]	; (800209c <HAL_RCC_ClockConfig+0x184>)
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f4c:	4b53      	ldr	r3, [pc, #332]	; (800209c <HAL_RCC_ClockConfig+0x184>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2201      	movs	r2, #1
 8001f52:	4013      	ands	r3, r2
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d001      	beq.n	8001f5e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e09a      	b.n	8002094 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2202      	movs	r2, #2
 8001f64:	4013      	ands	r3, r2
 8001f66:	d015      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2204      	movs	r2, #4
 8001f6e:	4013      	ands	r3, r2
 8001f70:	d006      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001f72:	4b4b      	ldr	r3, [pc, #300]	; (80020a0 <HAL_RCC_ClockConfig+0x188>)
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	4b4a      	ldr	r3, [pc, #296]	; (80020a0 <HAL_RCC_ClockConfig+0x188>)
 8001f78:	21e0      	movs	r1, #224	; 0xe0
 8001f7a:	00c9      	lsls	r1, r1, #3
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f80:	4b47      	ldr	r3, [pc, #284]	; (80020a0 <HAL_RCC_ClockConfig+0x188>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	22f0      	movs	r2, #240	; 0xf0
 8001f86:	4393      	bics	r3, r2
 8001f88:	0019      	movs	r1, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689a      	ldr	r2, [r3, #8]
 8001f8e:	4b44      	ldr	r3, [pc, #272]	; (80020a0 <HAL_RCC_ClockConfig+0x188>)
 8001f90:	430a      	orrs	r2, r1
 8001f92:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	d040      	beq.n	8002020 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d107      	bne.n	8001fb6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fa6:	4b3e      	ldr	r3, [pc, #248]	; (80020a0 <HAL_RCC_ClockConfig+0x188>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	2380      	movs	r3, #128	; 0x80
 8001fac:	029b      	lsls	r3, r3, #10
 8001fae:	4013      	ands	r3, r2
 8001fb0:	d114      	bne.n	8001fdc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e06e      	b.n	8002094 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d107      	bne.n	8001fce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fbe:	4b38      	ldr	r3, [pc, #224]	; (80020a0 <HAL_RCC_ClockConfig+0x188>)
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	2380      	movs	r3, #128	; 0x80
 8001fc4:	049b      	lsls	r3, r3, #18
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	d108      	bne.n	8001fdc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e062      	b.n	8002094 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fce:	4b34      	ldr	r3, [pc, #208]	; (80020a0 <HAL_RCC_ClockConfig+0x188>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	d101      	bne.n	8001fdc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e05b      	b.n	8002094 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fdc:	4b30      	ldr	r3, [pc, #192]	; (80020a0 <HAL_RCC_ClockConfig+0x188>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	2203      	movs	r2, #3
 8001fe2:	4393      	bics	r3, r2
 8001fe4:	0019      	movs	r1, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	4b2d      	ldr	r3, [pc, #180]	; (80020a0 <HAL_RCC_ClockConfig+0x188>)
 8001fec:	430a      	orrs	r2, r1
 8001fee:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ff0:	f7ff f9d0 	bl	8001394 <HAL_GetTick>
 8001ff4:	0003      	movs	r3, r0
 8001ff6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ff8:	e009      	b.n	800200e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ffa:	f7ff f9cb 	bl	8001394 <HAL_GetTick>
 8001ffe:	0002      	movs	r2, r0
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	4a27      	ldr	r2, [pc, #156]	; (80020a4 <HAL_RCC_ClockConfig+0x18c>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d901      	bls.n	800200e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e042      	b.n	8002094 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800200e:	4b24      	ldr	r3, [pc, #144]	; (80020a0 <HAL_RCC_ClockConfig+0x188>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	220c      	movs	r2, #12
 8002014:	401a      	ands	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	429a      	cmp	r2, r3
 800201e:	d1ec      	bne.n	8001ffa <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002020:	4b1e      	ldr	r3, [pc, #120]	; (800209c <HAL_RCC_ClockConfig+0x184>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2201      	movs	r2, #1
 8002026:	4013      	ands	r3, r2
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	429a      	cmp	r2, r3
 800202c:	d211      	bcs.n	8002052 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800202e:	4b1b      	ldr	r3, [pc, #108]	; (800209c <HAL_RCC_ClockConfig+0x184>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2201      	movs	r2, #1
 8002034:	4393      	bics	r3, r2
 8002036:	0019      	movs	r1, r3
 8002038:	4b18      	ldr	r3, [pc, #96]	; (800209c <HAL_RCC_ClockConfig+0x184>)
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	430a      	orrs	r2, r1
 800203e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002040:	4b16      	ldr	r3, [pc, #88]	; (800209c <HAL_RCC_ClockConfig+0x184>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2201      	movs	r2, #1
 8002046:	4013      	ands	r3, r2
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	429a      	cmp	r2, r3
 800204c:	d001      	beq.n	8002052 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e020      	b.n	8002094 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2204      	movs	r2, #4
 8002058:	4013      	ands	r3, r2
 800205a:	d009      	beq.n	8002070 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800205c:	4b10      	ldr	r3, [pc, #64]	; (80020a0 <HAL_RCC_ClockConfig+0x188>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	4a11      	ldr	r2, [pc, #68]	; (80020a8 <HAL_RCC_ClockConfig+0x190>)
 8002062:	4013      	ands	r3, r2
 8002064:	0019      	movs	r1, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	68da      	ldr	r2, [r3, #12]
 800206a:	4b0d      	ldr	r3, [pc, #52]	; (80020a0 <HAL_RCC_ClockConfig+0x188>)
 800206c:	430a      	orrs	r2, r1
 800206e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002070:	f000 f820 	bl	80020b4 <HAL_RCC_GetSysClockFreq>
 8002074:	0001      	movs	r1, r0
 8002076:	4b0a      	ldr	r3, [pc, #40]	; (80020a0 <HAL_RCC_ClockConfig+0x188>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	091b      	lsrs	r3, r3, #4
 800207c:	220f      	movs	r2, #15
 800207e:	4013      	ands	r3, r2
 8002080:	4a0a      	ldr	r2, [pc, #40]	; (80020ac <HAL_RCC_ClockConfig+0x194>)
 8002082:	5cd3      	ldrb	r3, [r2, r3]
 8002084:	000a      	movs	r2, r1
 8002086:	40da      	lsrs	r2, r3
 8002088:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <HAL_RCC_ClockConfig+0x198>)
 800208a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800208c:	2003      	movs	r0, #3
 800208e:	f7ff f93b 	bl	8001308 <HAL_InitTick>
  
  return HAL_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	0018      	movs	r0, r3
 8002096:	46bd      	mov	sp, r7
 8002098:	b004      	add	sp, #16
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40022000 	.word	0x40022000
 80020a0:	40021000 	.word	0x40021000
 80020a4:	00001388 	.word	0x00001388
 80020a8:	fffff8ff 	.word	0xfffff8ff
 80020ac:	08003028 	.word	0x08003028
 80020b0:	20000000 	.word	0x20000000

080020b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	2300      	movs	r3, #0
 80020c0:	60bb      	str	r3, [r7, #8]
 80020c2:	2300      	movs	r3, #0
 80020c4:	617b      	str	r3, [r7, #20]
 80020c6:	2300      	movs	r3, #0
 80020c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80020ca:	2300      	movs	r3, #0
 80020cc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80020ce:	4b20      	ldr	r3, [pc, #128]	; (8002150 <HAL_RCC_GetSysClockFreq+0x9c>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	220c      	movs	r2, #12
 80020d8:	4013      	ands	r3, r2
 80020da:	2b04      	cmp	r3, #4
 80020dc:	d002      	beq.n	80020e4 <HAL_RCC_GetSysClockFreq+0x30>
 80020de:	2b08      	cmp	r3, #8
 80020e0:	d003      	beq.n	80020ea <HAL_RCC_GetSysClockFreq+0x36>
 80020e2:	e02c      	b.n	800213e <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020e4:	4b1b      	ldr	r3, [pc, #108]	; (8002154 <HAL_RCC_GetSysClockFreq+0xa0>)
 80020e6:	613b      	str	r3, [r7, #16]
      break;
 80020e8:	e02c      	b.n	8002144 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	0c9b      	lsrs	r3, r3, #18
 80020ee:	220f      	movs	r2, #15
 80020f0:	4013      	ands	r3, r2
 80020f2:	4a19      	ldr	r2, [pc, #100]	; (8002158 <HAL_RCC_GetSysClockFreq+0xa4>)
 80020f4:	5cd3      	ldrb	r3, [r2, r3]
 80020f6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80020f8:	4b15      	ldr	r3, [pc, #84]	; (8002150 <HAL_RCC_GetSysClockFreq+0x9c>)
 80020fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fc:	220f      	movs	r2, #15
 80020fe:	4013      	ands	r3, r2
 8002100:	4a16      	ldr	r2, [pc, #88]	; (800215c <HAL_RCC_GetSysClockFreq+0xa8>)
 8002102:	5cd3      	ldrb	r3, [r2, r3]
 8002104:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	2380      	movs	r3, #128	; 0x80
 800210a:	025b      	lsls	r3, r3, #9
 800210c:	4013      	ands	r3, r2
 800210e:	d009      	beq.n	8002124 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002110:	68b9      	ldr	r1, [r7, #8]
 8002112:	4810      	ldr	r0, [pc, #64]	; (8002154 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002114:	f7fd fff8 	bl	8000108 <__udivsi3>
 8002118:	0003      	movs	r3, r0
 800211a:	001a      	movs	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4353      	muls	r3, r2
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	e009      	b.n	8002138 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	000a      	movs	r2, r1
 8002128:	0152      	lsls	r2, r2, #5
 800212a:	1a52      	subs	r2, r2, r1
 800212c:	0193      	lsls	r3, r2, #6
 800212e:	1a9b      	subs	r3, r3, r2
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	185b      	adds	r3, r3, r1
 8002134:	021b      	lsls	r3, r3, #8
 8002136:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	613b      	str	r3, [r7, #16]
      break;
 800213c:	e002      	b.n	8002144 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800213e:	4b05      	ldr	r3, [pc, #20]	; (8002154 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002140:	613b      	str	r3, [r7, #16]
      break;
 8002142:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002144:	693b      	ldr	r3, [r7, #16]
}
 8002146:	0018      	movs	r0, r3
 8002148:	46bd      	mov	sp, r7
 800214a:	b006      	add	sp, #24
 800214c:	bd80      	pop	{r7, pc}
 800214e:	46c0      	nop			; (mov r8, r8)
 8002150:	40021000 	.word	0x40021000
 8002154:	007a1200 	.word	0x007a1200
 8002158:	08003038 	.word	0x08003038
 800215c:	08003048 	.word	0x08003048

08002160 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e0a8      	b.n	80022c4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002176:	2b00      	cmp	r3, #0
 8002178:	d109      	bne.n	800218e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	2382      	movs	r3, #130	; 0x82
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	429a      	cmp	r2, r3
 8002184:	d009      	beq.n	800219a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	61da      	str	r2, [r3, #28]
 800218c:	e005      	b.n	800219a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	225d      	movs	r2, #93	; 0x5d
 80021a4:	5c9b      	ldrb	r3, [r3, r2]
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d107      	bne.n	80021bc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	225c      	movs	r2, #92	; 0x5c
 80021b0:	2100      	movs	r1, #0
 80021b2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	0018      	movs	r0, r3
 80021b8:	f7ff f800 	bl	80011bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	225d      	movs	r2, #93	; 0x5d
 80021c0:	2102      	movs	r1, #2
 80021c2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2140      	movs	r1, #64	; 0x40
 80021d0:	438a      	bics	r2, r1
 80021d2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	68da      	ldr	r2, [r3, #12]
 80021d8:	23e0      	movs	r3, #224	; 0xe0
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	429a      	cmp	r2, r3
 80021de:	d902      	bls.n	80021e6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80021e0:	2300      	movs	r3, #0
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	e002      	b.n	80021ec <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80021e6:	2380      	movs	r3, #128	; 0x80
 80021e8:	015b      	lsls	r3, r3, #5
 80021ea:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	68da      	ldr	r2, [r3, #12]
 80021f0:	23f0      	movs	r3, #240	; 0xf0
 80021f2:	011b      	lsls	r3, r3, #4
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d008      	beq.n	800220a <HAL_SPI_Init+0xaa>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	68da      	ldr	r2, [r3, #12]
 80021fc:	23e0      	movs	r3, #224	; 0xe0
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	429a      	cmp	r2, r3
 8002202:	d002      	beq.n	800220a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685a      	ldr	r2, [r3, #4]
 800220e:	2382      	movs	r3, #130	; 0x82
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	401a      	ands	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6899      	ldr	r1, [r3, #8]
 8002218:	2384      	movs	r3, #132	; 0x84
 800221a:	021b      	lsls	r3, r3, #8
 800221c:	400b      	ands	r3, r1
 800221e:	431a      	orrs	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	2102      	movs	r1, #2
 8002226:	400b      	ands	r3, r1
 8002228:	431a      	orrs	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	2101      	movs	r1, #1
 8002230:	400b      	ands	r3, r1
 8002232:	431a      	orrs	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6999      	ldr	r1, [r3, #24]
 8002238:	2380      	movs	r3, #128	; 0x80
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	400b      	ands	r3, r1
 800223e:	431a      	orrs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	69db      	ldr	r3, [r3, #28]
 8002244:	2138      	movs	r1, #56	; 0x38
 8002246:	400b      	ands	r3, r1
 8002248:	431a      	orrs	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	2180      	movs	r1, #128	; 0x80
 8002250:	400b      	ands	r3, r1
 8002252:	431a      	orrs	r2, r3
 8002254:	0011      	movs	r1, r2
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800225a:	2380      	movs	r3, #128	; 0x80
 800225c:	019b      	lsls	r3, r3, #6
 800225e:	401a      	ands	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	430a      	orrs	r2, r1
 8002266:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	0c1b      	lsrs	r3, r3, #16
 800226e:	2204      	movs	r2, #4
 8002270:	401a      	ands	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002276:	2110      	movs	r1, #16
 8002278:	400b      	ands	r3, r1
 800227a:	431a      	orrs	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002280:	2108      	movs	r1, #8
 8002282:	400b      	ands	r3, r1
 8002284:	431a      	orrs	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	68d9      	ldr	r1, [r3, #12]
 800228a:	23f0      	movs	r3, #240	; 0xf0
 800228c:	011b      	lsls	r3, r3, #4
 800228e:	400b      	ands	r3, r1
 8002290:	431a      	orrs	r2, r3
 8002292:	0011      	movs	r1, r2
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	2380      	movs	r3, #128	; 0x80
 8002298:	015b      	lsls	r3, r3, #5
 800229a:	401a      	ands	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	69da      	ldr	r2, [r3, #28]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4907      	ldr	r1, [pc, #28]	; (80022cc <HAL_SPI_Init+0x16c>)
 80022b0:	400a      	ands	r2, r1
 80022b2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	225d      	movs	r2, #93	; 0x5d
 80022be:	2101      	movs	r1, #1
 80022c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	0018      	movs	r0, r3
 80022c6:	46bd      	mov	sp, r7
 80022c8:	b004      	add	sp, #16
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	fffff7ff 	.word	0xfffff7ff

080022d0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b088      	sub	sp, #32
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	603b      	str	r3, [r7, #0]
 80022dc:	1dbb      	adds	r3, r7, #6
 80022de:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80022e0:	231f      	movs	r3, #31
 80022e2:	18fb      	adds	r3, r7, r3
 80022e4:	2200      	movs	r2, #0
 80022e6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	225c      	movs	r2, #92	; 0x5c
 80022ec:	5c9b      	ldrb	r3, [r3, r2]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d101      	bne.n	80022f6 <HAL_SPI_Transmit+0x26>
 80022f2:	2302      	movs	r3, #2
 80022f4:	e147      	b.n	8002586 <HAL_SPI_Transmit+0x2b6>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	225c      	movs	r2, #92	; 0x5c
 80022fa:	2101      	movs	r1, #1
 80022fc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022fe:	f7ff f849 	bl	8001394 <HAL_GetTick>
 8002302:	0003      	movs	r3, r0
 8002304:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002306:	2316      	movs	r3, #22
 8002308:	18fb      	adds	r3, r7, r3
 800230a:	1dba      	adds	r2, r7, #6
 800230c:	8812      	ldrh	r2, [r2, #0]
 800230e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	225d      	movs	r2, #93	; 0x5d
 8002314:	5c9b      	ldrb	r3, [r3, r2]
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b01      	cmp	r3, #1
 800231a:	d004      	beq.n	8002326 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800231c:	231f      	movs	r3, #31
 800231e:	18fb      	adds	r3, r7, r3
 8002320:	2202      	movs	r2, #2
 8002322:	701a      	strb	r2, [r3, #0]
    goto error;
 8002324:	e128      	b.n	8002578 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <HAL_SPI_Transmit+0x64>
 800232c:	1dbb      	adds	r3, r7, #6
 800232e:	881b      	ldrh	r3, [r3, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d104      	bne.n	800233e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002334:	231f      	movs	r3, #31
 8002336:	18fb      	adds	r3, r7, r3
 8002338:	2201      	movs	r2, #1
 800233a:	701a      	strb	r2, [r3, #0]
    goto error;
 800233c:	e11c      	b.n	8002578 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	225d      	movs	r2, #93	; 0x5d
 8002342:	2103      	movs	r1, #3
 8002344:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2200      	movs	r2, #0
 800234a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	68ba      	ldr	r2, [r7, #8]
 8002350:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	1dba      	adds	r2, r7, #6
 8002356:	8812      	ldrh	r2, [r2, #0]
 8002358:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	1dba      	adds	r2, r7, #6
 800235e:	8812      	ldrh	r2, [r2, #0]
 8002360:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2244      	movs	r2, #68	; 0x44
 800236c:	2100      	movs	r1, #0
 800236e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2246      	movs	r2, #70	; 0x46
 8002374:	2100      	movs	r1, #0
 8002376:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2200      	movs	r2, #0
 800237c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2200      	movs	r2, #0
 8002382:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	2380      	movs	r3, #128	; 0x80
 800238a:	021b      	lsls	r3, r3, #8
 800238c:	429a      	cmp	r2, r3
 800238e:	d110      	bne.n	80023b2 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2140      	movs	r1, #64	; 0x40
 800239c:	438a      	bics	r2, r1
 800239e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2180      	movs	r1, #128	; 0x80
 80023ac:	01c9      	lsls	r1, r1, #7
 80023ae:	430a      	orrs	r2, r1
 80023b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2240      	movs	r2, #64	; 0x40
 80023ba:	4013      	ands	r3, r2
 80023bc:	2b40      	cmp	r3, #64	; 0x40
 80023be:	d007      	beq.n	80023d0 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2140      	movs	r1, #64	; 0x40
 80023cc:	430a      	orrs	r2, r1
 80023ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	68da      	ldr	r2, [r3, #12]
 80023d4:	23e0      	movs	r3, #224	; 0xe0
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	429a      	cmp	r2, r3
 80023da:	d952      	bls.n	8002482 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d004      	beq.n	80023ee <HAL_SPI_Transmit+0x11e>
 80023e4:	2316      	movs	r3, #22
 80023e6:	18fb      	adds	r3, r7, r3
 80023e8:	881b      	ldrh	r3, [r3, #0]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d143      	bne.n	8002476 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f2:	881a      	ldrh	r2, [r3, #0]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023fe:	1c9a      	adds	r2, r3, #2
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002408:	b29b      	uxth	r3, r3
 800240a:	3b01      	subs	r3, #1
 800240c:	b29a      	uxth	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002412:	e030      	b.n	8002476 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	2202      	movs	r2, #2
 800241c:	4013      	ands	r3, r2
 800241e:	2b02      	cmp	r3, #2
 8002420:	d112      	bne.n	8002448 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002426:	881a      	ldrh	r2, [r3, #0]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002432:	1c9a      	adds	r2, r3, #2
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800243c:	b29b      	uxth	r3, r3
 800243e:	3b01      	subs	r3, #1
 8002440:	b29a      	uxth	r2, r3
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002446:	e016      	b.n	8002476 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002448:	f7fe ffa4 	bl	8001394 <HAL_GetTick>
 800244c:	0002      	movs	r2, r0
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	429a      	cmp	r2, r3
 8002456:	d802      	bhi.n	800245e <HAL_SPI_Transmit+0x18e>
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	3301      	adds	r3, #1
 800245c:	d102      	bne.n	8002464 <HAL_SPI_Transmit+0x194>
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d108      	bne.n	8002476 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8002464:	231f      	movs	r3, #31
 8002466:	18fb      	adds	r3, r7, r3
 8002468:	2203      	movs	r2, #3
 800246a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	225d      	movs	r2, #93	; 0x5d
 8002470:	2101      	movs	r1, #1
 8002472:	5499      	strb	r1, [r3, r2]
          goto error;
 8002474:	e080      	b.n	8002578 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800247a:	b29b      	uxth	r3, r3
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1c9      	bne.n	8002414 <HAL_SPI_Transmit+0x144>
 8002480:	e053      	b.n	800252a <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d004      	beq.n	8002494 <HAL_SPI_Transmit+0x1c4>
 800248a:	2316      	movs	r3, #22
 800248c:	18fb      	adds	r3, r7, r3
 800248e:	881b      	ldrh	r3, [r3, #0]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d145      	bne.n	8002520 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	330c      	adds	r3, #12
 800249e:	7812      	ldrb	r2, [r2, #0]
 80024a0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a6:	1c5a      	adds	r2, r3, #1
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	3b01      	subs	r3, #1
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80024ba:	e031      	b.n	8002520 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	2202      	movs	r2, #2
 80024c4:	4013      	ands	r3, r2
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d113      	bne.n	80024f2 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	330c      	adds	r3, #12
 80024d4:	7812      	ldrb	r2, [r2, #0]
 80024d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024dc:	1c5a      	adds	r2, r3, #1
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	3b01      	subs	r3, #1
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80024f0:	e016      	b.n	8002520 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024f2:	f7fe ff4f 	bl	8001394 <HAL_GetTick>
 80024f6:	0002      	movs	r2, r0
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d802      	bhi.n	8002508 <HAL_SPI_Transmit+0x238>
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	3301      	adds	r3, #1
 8002506:	d102      	bne.n	800250e <HAL_SPI_Transmit+0x23e>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d108      	bne.n	8002520 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800250e:	231f      	movs	r3, #31
 8002510:	18fb      	adds	r3, r7, r3
 8002512:	2203      	movs	r2, #3
 8002514:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	225d      	movs	r2, #93	; 0x5d
 800251a:	2101      	movs	r1, #1
 800251c:	5499      	strb	r1, [r3, r2]
          goto error;
 800251e:	e02b      	b.n	8002578 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002524:	b29b      	uxth	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1c8      	bne.n	80024bc <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	6839      	ldr	r1, [r7, #0]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	0018      	movs	r0, r3
 8002532:	f000 fcfb 	bl	8002f2c <SPI_EndRxTxTransaction>
 8002536:	1e03      	subs	r3, r0, #0
 8002538:	d002      	beq.n	8002540 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2220      	movs	r2, #32
 800253e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d10a      	bne.n	800255e <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002548:	2300      	movs	r3, #0
 800254a:	613b      	str	r3, [r7, #16]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	613b      	str	r3, [r7, #16]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	613b      	str	r3, [r7, #16]
 800255c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002562:	2b00      	cmp	r3, #0
 8002564:	d004      	beq.n	8002570 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8002566:	231f      	movs	r3, #31
 8002568:	18fb      	adds	r3, r7, r3
 800256a:	2201      	movs	r2, #1
 800256c:	701a      	strb	r2, [r3, #0]
 800256e:	e003      	b.n	8002578 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	225d      	movs	r2, #93	; 0x5d
 8002574:	2101      	movs	r1, #1
 8002576:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	225c      	movs	r2, #92	; 0x5c
 800257c:	2100      	movs	r1, #0
 800257e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002580:	231f      	movs	r3, #31
 8002582:	18fb      	adds	r3, r7, r3
 8002584:	781b      	ldrb	r3, [r3, #0]
}
 8002586:	0018      	movs	r0, r3
 8002588:	46bd      	mov	sp, r7
 800258a:	b008      	add	sp, #32
 800258c:	bd80      	pop	{r7, pc}
	...

08002590 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002590:	b590      	push	{r4, r7, lr}
 8002592:	b089      	sub	sp, #36	; 0x24
 8002594:	af02      	add	r7, sp, #8
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	603b      	str	r3, [r7, #0]
 800259c:	1dbb      	adds	r3, r7, #6
 800259e:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80025a0:	2117      	movs	r1, #23
 80025a2:	187b      	adds	r3, r7, r1
 80025a4:	2200      	movs	r2, #0
 80025a6:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	225d      	movs	r2, #93	; 0x5d
 80025ac:	5c9b      	ldrb	r3, [r3, r2]
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d003      	beq.n	80025bc <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 80025b4:	187b      	adds	r3, r7, r1
 80025b6:	2202      	movs	r2, #2
 80025b8:	701a      	strb	r2, [r3, #0]
    goto error;
 80025ba:	e12b      	b.n	8002814 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	685a      	ldr	r2, [r3, #4]
 80025c0:	2382      	movs	r3, #130	; 0x82
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d113      	bne.n	80025f0 <HAL_SPI_Receive+0x60>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d10f      	bne.n	80025f0 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	225d      	movs	r2, #93	; 0x5d
 80025d4:	2104      	movs	r1, #4
 80025d6:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80025d8:	1dbb      	adds	r3, r7, #6
 80025da:	881c      	ldrh	r4, [r3, #0]
 80025dc:	68ba      	ldr	r2, [r7, #8]
 80025de:	68b9      	ldr	r1, [r7, #8]
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	9300      	str	r3, [sp, #0]
 80025e6:	0023      	movs	r3, r4
 80025e8:	f000 f924 	bl	8002834 <HAL_SPI_TransmitReceive>
 80025ec:	0003      	movs	r3, r0
 80025ee:	e118      	b.n	8002822 <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	225c      	movs	r2, #92	; 0x5c
 80025f4:	5c9b      	ldrb	r3, [r3, r2]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d101      	bne.n	80025fe <HAL_SPI_Receive+0x6e>
 80025fa:	2302      	movs	r3, #2
 80025fc:	e111      	b.n	8002822 <HAL_SPI_Receive+0x292>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	225c      	movs	r2, #92	; 0x5c
 8002602:	2101      	movs	r1, #1
 8002604:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002606:	f7fe fec5 	bl	8001394 <HAL_GetTick>
 800260a:	0003      	movs	r3, r0
 800260c:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d003      	beq.n	800261c <HAL_SPI_Receive+0x8c>
 8002614:	1dbb      	adds	r3, r7, #6
 8002616:	881b      	ldrh	r3, [r3, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d104      	bne.n	8002626 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 800261c:	2317      	movs	r3, #23
 800261e:	18fb      	adds	r3, r7, r3
 8002620:	2201      	movs	r2, #1
 8002622:	701a      	strb	r2, [r3, #0]
    goto error;
 8002624:	e0f6      	b.n	8002814 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	225d      	movs	r2, #93	; 0x5d
 800262a:	2104      	movs	r1, #4
 800262c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2200      	movs	r2, #0
 8002632:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	68ba      	ldr	r2, [r7, #8]
 8002638:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	1dba      	adds	r2, r7, #6
 800263e:	2144      	movs	r1, #68	; 0x44
 8002640:	8812      	ldrh	r2, [r2, #0]
 8002642:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	1dba      	adds	r2, r7, #6
 8002648:	2146      	movs	r1, #70	; 0x46
 800264a:	8812      	ldrh	r2, [r2, #0]
 800264c:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2200      	movs	r2, #0
 8002652:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2200      	movs	r2, #0
 800265e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	68da      	ldr	r2, [r3, #12]
 8002670:	23e0      	movs	r3, #224	; 0xe0
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	429a      	cmp	r2, r3
 8002676:	d908      	bls.n	800268a <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	685a      	ldr	r2, [r3, #4]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	496a      	ldr	r1, [pc, #424]	; (800282c <HAL_SPI_Receive+0x29c>)
 8002684:	400a      	ands	r2, r1
 8002686:	605a      	str	r2, [r3, #4]
 8002688:	e008      	b.n	800269c <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	685a      	ldr	r2, [r3, #4]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2180      	movs	r1, #128	; 0x80
 8002696:	0149      	lsls	r1, r1, #5
 8002698:	430a      	orrs	r2, r1
 800269a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	2380      	movs	r3, #128	; 0x80
 80026a2:	021b      	lsls	r3, r3, #8
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d10f      	bne.n	80026c8 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2140      	movs	r1, #64	; 0x40
 80026b4:	438a      	bics	r2, r1
 80026b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	495b      	ldr	r1, [pc, #364]	; (8002830 <HAL_SPI_Receive+0x2a0>)
 80026c4:	400a      	ands	r2, r1
 80026c6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2240      	movs	r2, #64	; 0x40
 80026d0:	4013      	ands	r3, r2
 80026d2:	2b40      	cmp	r3, #64	; 0x40
 80026d4:	d007      	beq.n	80026e6 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2140      	movs	r1, #64	; 0x40
 80026e2:	430a      	orrs	r2, r1
 80026e4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	68da      	ldr	r2, [r3, #12]
 80026ea:	23e0      	movs	r3, #224	; 0xe0
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d900      	bls.n	80026f4 <HAL_SPI_Receive+0x164>
 80026f2:	e071      	b.n	80027d8 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80026f4:	e035      	b.n	8002762 <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	2201      	movs	r2, #1
 80026fe:	4013      	ands	r3, r2
 8002700:	2b01      	cmp	r3, #1
 8002702:	d117      	bne.n	8002734 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	330c      	adds	r3, #12
 800270a:	001a      	movs	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002710:	7812      	ldrb	r2, [r2, #0]
 8002712:	b2d2      	uxtb	r2, r2
 8002714:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	1c5a      	adds	r2, r3, #1
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2246      	movs	r2, #70	; 0x46
 8002724:	5a9b      	ldrh	r3, [r3, r2]
 8002726:	b29b      	uxth	r3, r3
 8002728:	3b01      	subs	r3, #1
 800272a:	b299      	uxth	r1, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2246      	movs	r2, #70	; 0x46
 8002730:	5299      	strh	r1, [r3, r2]
 8002732:	e016      	b.n	8002762 <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002734:	f7fe fe2e 	bl	8001394 <HAL_GetTick>
 8002738:	0002      	movs	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	429a      	cmp	r2, r3
 8002742:	d802      	bhi.n	800274a <HAL_SPI_Receive+0x1ba>
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	3301      	adds	r3, #1
 8002748:	d102      	bne.n	8002750 <HAL_SPI_Receive+0x1c0>
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d108      	bne.n	8002762 <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8002750:	2317      	movs	r3, #23
 8002752:	18fb      	adds	r3, r7, r3
 8002754:	2203      	movs	r2, #3
 8002756:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	225d      	movs	r2, #93	; 0x5d
 800275c:	2101      	movs	r1, #1
 800275e:	5499      	strb	r1, [r3, r2]
          goto error;
 8002760:	e058      	b.n	8002814 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2246      	movs	r2, #70	; 0x46
 8002766:	5a9b      	ldrh	r3, [r3, r2]
 8002768:	b29b      	uxth	r3, r3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1c3      	bne.n	80026f6 <HAL_SPI_Receive+0x166>
 800276e:	e039      	b.n	80027e4 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	2201      	movs	r2, #1
 8002778:	4013      	ands	r3, r2
 800277a:	2b01      	cmp	r3, #1
 800277c:	d115      	bne.n	80027aa <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68da      	ldr	r2, [r3, #12]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002788:	b292      	uxth	r2, r2
 800278a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002790:	1c9a      	adds	r2, r3, #2
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2246      	movs	r2, #70	; 0x46
 800279a:	5a9b      	ldrh	r3, [r3, r2]
 800279c:	b29b      	uxth	r3, r3
 800279e:	3b01      	subs	r3, #1
 80027a0:	b299      	uxth	r1, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2246      	movs	r2, #70	; 0x46
 80027a6:	5299      	strh	r1, [r3, r2]
 80027a8:	e016      	b.n	80027d8 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027aa:	f7fe fdf3 	bl	8001394 <HAL_GetTick>
 80027ae:	0002      	movs	r2, r0
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	683a      	ldr	r2, [r7, #0]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d802      	bhi.n	80027c0 <HAL_SPI_Receive+0x230>
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	3301      	adds	r3, #1
 80027be:	d102      	bne.n	80027c6 <HAL_SPI_Receive+0x236>
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d108      	bne.n	80027d8 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 80027c6:	2317      	movs	r3, #23
 80027c8:	18fb      	adds	r3, r7, r3
 80027ca:	2203      	movs	r2, #3
 80027cc:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	225d      	movs	r2, #93	; 0x5d
 80027d2:	2101      	movs	r1, #1
 80027d4:	5499      	strb	r1, [r3, r2]
          goto error;
 80027d6:	e01d      	b.n	8002814 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2246      	movs	r2, #70	; 0x46
 80027dc:	5a9b      	ldrh	r3, [r3, r2]
 80027de:	b29b      	uxth	r3, r3
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1c5      	bne.n	8002770 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	6839      	ldr	r1, [r7, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	0018      	movs	r0, r3
 80027ec:	f000 fb40 	bl	8002e70 <SPI_EndRxTransaction>
 80027f0:	1e03      	subs	r3, r0, #0
 80027f2:	d002      	beq.n	80027fa <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2220      	movs	r2, #32
 80027f8:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d004      	beq.n	800280c <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8002802:	2317      	movs	r3, #23
 8002804:	18fb      	adds	r3, r7, r3
 8002806:	2201      	movs	r2, #1
 8002808:	701a      	strb	r2, [r3, #0]
 800280a:	e003      	b.n	8002814 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	225d      	movs	r2, #93	; 0x5d
 8002810:	2101      	movs	r1, #1
 8002812:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	225c      	movs	r2, #92	; 0x5c
 8002818:	2100      	movs	r1, #0
 800281a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800281c:	2317      	movs	r3, #23
 800281e:	18fb      	adds	r3, r7, r3
 8002820:	781b      	ldrb	r3, [r3, #0]
}
 8002822:	0018      	movs	r0, r3
 8002824:	46bd      	mov	sp, r7
 8002826:	b007      	add	sp, #28
 8002828:	bd90      	pop	{r4, r7, pc}
 800282a:	46c0      	nop			; (mov r8, r8)
 800282c:	ffffefff 	.word	0xffffefff
 8002830:	ffffbfff 	.word	0xffffbfff

08002834 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b08a      	sub	sp, #40	; 0x28
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
 8002840:	001a      	movs	r2, r3
 8002842:	1cbb      	adds	r3, r7, #2
 8002844:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002846:	2301      	movs	r3, #1
 8002848:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800284a:	2323      	movs	r3, #35	; 0x23
 800284c:	18fb      	adds	r3, r7, r3
 800284e:	2200      	movs	r2, #0
 8002850:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	225c      	movs	r2, #92	; 0x5c
 8002856:	5c9b      	ldrb	r3, [r3, r2]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d101      	bne.n	8002860 <HAL_SPI_TransmitReceive+0x2c>
 800285c:	2302      	movs	r3, #2
 800285e:	e1c4      	b.n	8002bea <HAL_SPI_TransmitReceive+0x3b6>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	225c      	movs	r2, #92	; 0x5c
 8002864:	2101      	movs	r1, #1
 8002866:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002868:	f7fe fd94 	bl	8001394 <HAL_GetTick>
 800286c:	0003      	movs	r3, r0
 800286e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002870:	201b      	movs	r0, #27
 8002872:	183b      	adds	r3, r7, r0
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	215d      	movs	r1, #93	; 0x5d
 8002878:	5c52      	ldrb	r2, [r2, r1]
 800287a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002882:	2312      	movs	r3, #18
 8002884:	18fb      	adds	r3, r7, r3
 8002886:	1cba      	adds	r2, r7, #2
 8002888:	8812      	ldrh	r2, [r2, #0]
 800288a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800288c:	183b      	adds	r3, r7, r0
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d011      	beq.n	80028b8 <HAL_SPI_TransmitReceive+0x84>
 8002894:	697a      	ldr	r2, [r7, #20]
 8002896:	2382      	movs	r3, #130	; 0x82
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	429a      	cmp	r2, r3
 800289c:	d107      	bne.n	80028ae <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d103      	bne.n	80028ae <HAL_SPI_TransmitReceive+0x7a>
 80028a6:	183b      	adds	r3, r7, r0
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	2b04      	cmp	r3, #4
 80028ac:	d004      	beq.n	80028b8 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80028ae:	2323      	movs	r3, #35	; 0x23
 80028b0:	18fb      	adds	r3, r7, r3
 80028b2:	2202      	movs	r2, #2
 80028b4:	701a      	strb	r2, [r3, #0]
    goto error;
 80028b6:	e191      	b.n	8002bdc <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d006      	beq.n	80028cc <HAL_SPI_TransmitReceive+0x98>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d003      	beq.n	80028cc <HAL_SPI_TransmitReceive+0x98>
 80028c4:	1cbb      	adds	r3, r7, #2
 80028c6:	881b      	ldrh	r3, [r3, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d104      	bne.n	80028d6 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80028cc:	2323      	movs	r3, #35	; 0x23
 80028ce:	18fb      	adds	r3, r7, r3
 80028d0:	2201      	movs	r2, #1
 80028d2:	701a      	strb	r2, [r3, #0]
    goto error;
 80028d4:	e182      	b.n	8002bdc <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	225d      	movs	r2, #93	; 0x5d
 80028da:	5c9b      	ldrb	r3, [r3, r2]
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b04      	cmp	r3, #4
 80028e0:	d003      	beq.n	80028ea <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	225d      	movs	r2, #93	; 0x5d
 80028e6:	2105      	movs	r1, #5
 80028e8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	1cba      	adds	r2, r7, #2
 80028fa:	2146      	movs	r1, #70	; 0x46
 80028fc:	8812      	ldrh	r2, [r2, #0]
 80028fe:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	1cba      	adds	r2, r7, #2
 8002904:	2144      	movs	r1, #68	; 0x44
 8002906:	8812      	ldrh	r2, [r2, #0]
 8002908:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	68ba      	ldr	r2, [r7, #8]
 800290e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	1cba      	adds	r2, r7, #2
 8002914:	8812      	ldrh	r2, [r2, #0]
 8002916:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	1cba      	adds	r2, r7, #2
 800291c:	8812      	ldrh	r2, [r2, #0]
 800291e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	68da      	ldr	r2, [r3, #12]
 8002930:	23e0      	movs	r3, #224	; 0xe0
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	429a      	cmp	r2, r3
 8002936:	d908      	bls.n	800294a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	49ac      	ldr	r1, [pc, #688]	; (8002bf4 <HAL_SPI_TransmitReceive+0x3c0>)
 8002944:	400a      	ands	r2, r1
 8002946:	605a      	str	r2, [r3, #4]
 8002948:	e008      	b.n	800295c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2180      	movs	r1, #128	; 0x80
 8002956:	0149      	lsls	r1, r1, #5
 8002958:	430a      	orrs	r2, r1
 800295a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2240      	movs	r2, #64	; 0x40
 8002964:	4013      	ands	r3, r2
 8002966:	2b40      	cmp	r3, #64	; 0x40
 8002968:	d007      	beq.n	800297a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2140      	movs	r1, #64	; 0x40
 8002976:	430a      	orrs	r2, r1
 8002978:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	68da      	ldr	r2, [r3, #12]
 800297e:	23e0      	movs	r3, #224	; 0xe0
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	429a      	cmp	r2, r3
 8002984:	d800      	bhi.n	8002988 <HAL_SPI_TransmitReceive+0x154>
 8002986:	e083      	b.n	8002a90 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d005      	beq.n	800299c <HAL_SPI_TransmitReceive+0x168>
 8002990:	2312      	movs	r3, #18
 8002992:	18fb      	adds	r3, r7, r3
 8002994:	881b      	ldrh	r3, [r3, #0]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d000      	beq.n	800299c <HAL_SPI_TransmitReceive+0x168>
 800299a:	e06d      	b.n	8002a78 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a0:	881a      	ldrh	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ac:	1c9a      	adds	r2, r3, #2
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	3b01      	subs	r3, #1
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029c0:	e05a      	b.n	8002a78 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	2202      	movs	r2, #2
 80029ca:	4013      	ands	r3, r2
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d11b      	bne.n	8002a08 <HAL_SPI_TransmitReceive+0x1d4>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d016      	beq.n	8002a08 <HAL_SPI_TransmitReceive+0x1d4>
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d113      	bne.n	8002a08 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e4:	881a      	ldrh	r2, [r3, #0]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f0:	1c9a      	adds	r2, r3, #2
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	3b01      	subs	r3, #1
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a04:	2300      	movs	r3, #0
 8002a06:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	4013      	ands	r3, r2
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d11c      	bne.n	8002a50 <HAL_SPI_TransmitReceive+0x21c>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2246      	movs	r2, #70	; 0x46
 8002a1a:	5a9b      	ldrh	r3, [r3, r2]
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d016      	beq.n	8002a50 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68da      	ldr	r2, [r3, #12]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2c:	b292      	uxth	r2, r2
 8002a2e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a34:	1c9a      	adds	r2, r3, #2
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2246      	movs	r2, #70	; 0x46
 8002a3e:	5a9b      	ldrh	r3, [r3, r2]
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	3b01      	subs	r3, #1
 8002a44:	b299      	uxth	r1, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2246      	movs	r2, #70	; 0x46
 8002a4a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002a50:	f7fe fca0 	bl	8001394 <HAL_GetTick>
 8002a54:	0002      	movs	r2, r0
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d80b      	bhi.n	8002a78 <HAL_SPI_TransmitReceive+0x244>
 8002a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a62:	3301      	adds	r3, #1
 8002a64:	d008      	beq.n	8002a78 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8002a66:	2323      	movs	r3, #35	; 0x23
 8002a68:	18fb      	adds	r3, r7, r3
 8002a6a:	2203      	movs	r2, #3
 8002a6c:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	225d      	movs	r2, #93	; 0x5d
 8002a72:	2101      	movs	r1, #1
 8002a74:	5499      	strb	r1, [r3, r2]
        goto error;
 8002a76:	e0b1      	b.n	8002bdc <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d19f      	bne.n	80029c2 <HAL_SPI_TransmitReceive+0x18e>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2246      	movs	r2, #70	; 0x46
 8002a86:	5a9b      	ldrh	r3, [r3, r2]
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d199      	bne.n	80029c2 <HAL_SPI_TransmitReceive+0x18e>
 8002a8e:	e089      	b.n	8002ba4 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d005      	beq.n	8002aa4 <HAL_SPI_TransmitReceive+0x270>
 8002a98:	2312      	movs	r3, #18
 8002a9a:	18fb      	adds	r3, r7, r3
 8002a9c:	881b      	ldrh	r3, [r3, #0]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d000      	beq.n	8002aa4 <HAL_SPI_TransmitReceive+0x270>
 8002aa2:	e074      	b.n	8002b8e <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	330c      	adds	r3, #12
 8002aae:	7812      	ldrb	r2, [r2, #0]
 8002ab0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab6:	1c5a      	adds	r2, r3, #1
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002aca:	e060      	b.n	8002b8e <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d11c      	bne.n	8002b14 <HAL_SPI_TransmitReceive+0x2e0>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d017      	beq.n	8002b14 <HAL_SPI_TransmitReceive+0x2e0>
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d114      	bne.n	8002b14 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	330c      	adds	r3, #12
 8002af4:	7812      	ldrb	r2, [r2, #0]
 8002af6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afc:	1c5a      	adds	r2, r3, #1
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b10:	2300      	movs	r3, #0
 8002b12:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d11e      	bne.n	8002b60 <HAL_SPI_TransmitReceive+0x32c>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2246      	movs	r2, #70	; 0x46
 8002b26:	5a9b      	ldrh	r3, [r3, r2]
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d018      	beq.n	8002b60 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	330c      	adds	r3, #12
 8002b34:	001a      	movs	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	7812      	ldrb	r2, [r2, #0]
 8002b3c:	b2d2      	uxtb	r2, r2
 8002b3e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b44:	1c5a      	adds	r2, r3, #1
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2246      	movs	r2, #70	; 0x46
 8002b4e:	5a9b      	ldrh	r3, [r3, r2]
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	3b01      	subs	r3, #1
 8002b54:	b299      	uxth	r1, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2246      	movs	r2, #70	; 0x46
 8002b5a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002b60:	f7fe fc18 	bl	8001394 <HAL_GetTick>
 8002b64:	0002      	movs	r2, r0
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d802      	bhi.n	8002b76 <HAL_SPI_TransmitReceive+0x342>
 8002b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b72:	3301      	adds	r3, #1
 8002b74:	d102      	bne.n	8002b7c <HAL_SPI_TransmitReceive+0x348>
 8002b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d108      	bne.n	8002b8e <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8002b7c:	2323      	movs	r3, #35	; 0x23
 8002b7e:	18fb      	adds	r3, r7, r3
 8002b80:	2203      	movs	r2, #3
 8002b82:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	225d      	movs	r2, #93	; 0x5d
 8002b88:	2101      	movs	r1, #1
 8002b8a:	5499      	strb	r1, [r3, r2]
        goto error;
 8002b8c:	e026      	b.n	8002bdc <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d199      	bne.n	8002acc <HAL_SPI_TransmitReceive+0x298>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2246      	movs	r2, #70	; 0x46
 8002b9c:	5a9b      	ldrh	r3, [r3, r2]
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d193      	bne.n	8002acc <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ba4:	69fa      	ldr	r2, [r7, #28]
 8002ba6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	0018      	movs	r0, r3
 8002bac:	f000 f9be 	bl	8002f2c <SPI_EndRxTxTransaction>
 8002bb0:	1e03      	subs	r3, r0, #0
 8002bb2:	d006      	beq.n	8002bc2 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8002bb4:	2323      	movs	r3, #35	; 0x23
 8002bb6:	18fb      	adds	r3, r7, r3
 8002bb8:	2201      	movs	r2, #1
 8002bba:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d004      	beq.n	8002bd4 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8002bca:	2323      	movs	r3, #35	; 0x23
 8002bcc:	18fb      	adds	r3, r7, r3
 8002bce:	2201      	movs	r2, #1
 8002bd0:	701a      	strb	r2, [r3, #0]
 8002bd2:	e003      	b.n	8002bdc <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	225d      	movs	r2, #93	; 0x5d
 8002bd8:	2101      	movs	r1, #1
 8002bda:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	225c      	movs	r2, #92	; 0x5c
 8002be0:	2100      	movs	r1, #0
 8002be2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002be4:	2323      	movs	r3, #35	; 0x23
 8002be6:	18fb      	adds	r3, r7, r3
 8002be8:	781b      	ldrb	r3, [r3, #0]
}
 8002bea:	0018      	movs	r0, r3
 8002bec:	46bd      	mov	sp, r7
 8002bee:	b00a      	add	sp, #40	; 0x28
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	46c0      	nop			; (mov r8, r8)
 8002bf4:	ffffefff 	.word	0xffffefff

08002bf8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	225d      	movs	r2, #93	; 0x5d
 8002c04:	5c9b      	ldrb	r3, [r3, r2]
 8002c06:	b2db      	uxtb	r3, r3
}
 8002c08:	0018      	movs	r0, r3
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	b002      	add	sp, #8
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b088      	sub	sp, #32
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	603b      	str	r3, [r7, #0]
 8002c1c:	1dfb      	adds	r3, r7, #7
 8002c1e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002c20:	f7fe fbb8 	bl	8001394 <HAL_GetTick>
 8002c24:	0002      	movs	r2, r0
 8002c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c28:	1a9b      	subs	r3, r3, r2
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	18d3      	adds	r3, r2, r3
 8002c2e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002c30:	f7fe fbb0 	bl	8001394 <HAL_GetTick>
 8002c34:	0003      	movs	r3, r0
 8002c36:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c38:	4b3a      	ldr	r3, [pc, #232]	; (8002d24 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	015b      	lsls	r3, r3, #5
 8002c3e:	0d1b      	lsrs	r3, r3, #20
 8002c40:	69fa      	ldr	r2, [r7, #28]
 8002c42:	4353      	muls	r3, r2
 8002c44:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c46:	e058      	b.n	8002cfa <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	d055      	beq.n	8002cfa <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c4e:	f7fe fba1 	bl	8001394 <HAL_GetTick>
 8002c52:	0002      	movs	r2, r0
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	69fa      	ldr	r2, [r7, #28]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d902      	bls.n	8002c64 <SPI_WaitFlagStateUntilTimeout+0x54>
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d142      	bne.n	8002cea <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	685a      	ldr	r2, [r3, #4]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	21e0      	movs	r1, #224	; 0xe0
 8002c70:	438a      	bics	r2, r1
 8002c72:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	2382      	movs	r3, #130	; 0x82
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d113      	bne.n	8002ca8 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	689a      	ldr	r2, [r3, #8]
 8002c84:	2380      	movs	r3, #128	; 0x80
 8002c86:	021b      	lsls	r3, r3, #8
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d005      	beq.n	8002c98 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	2380      	movs	r3, #128	; 0x80
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d107      	bne.n	8002ca8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2140      	movs	r1, #64	; 0x40
 8002ca4:	438a      	bics	r2, r1
 8002ca6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cac:	2380      	movs	r3, #128	; 0x80
 8002cae:	019b      	lsls	r3, r3, #6
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d110      	bne.n	8002cd6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	491a      	ldr	r1, [pc, #104]	; (8002d28 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002cc0:	400a      	ands	r2, r1
 8002cc2:	601a      	str	r2, [r3, #0]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2180      	movs	r1, #128	; 0x80
 8002cd0:	0189      	lsls	r1, r1, #6
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	225d      	movs	r2, #93	; 0x5d
 8002cda:	2101      	movs	r1, #1
 8002cdc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	225c      	movs	r2, #92	; 0x5c
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e017      	b.n	8002d1a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d101      	bne.n	8002cf4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	68ba      	ldr	r2, [r7, #8]
 8002d02:	4013      	ands	r3, r2
 8002d04:	68ba      	ldr	r2, [r7, #8]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	425a      	negs	r2, r3
 8002d0a:	4153      	adcs	r3, r2
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	001a      	movs	r2, r3
 8002d10:	1dfb      	adds	r3, r7, #7
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d197      	bne.n	8002c48 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	0018      	movs	r0, r3
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	b008      	add	sp, #32
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	46c0      	nop			; (mov r8, r8)
 8002d24:	20000000 	.word	0x20000000
 8002d28:	ffffdfff 	.word	0xffffdfff

08002d2c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b08a      	sub	sp, #40	; 0x28
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
 8002d38:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002d3a:	2317      	movs	r3, #23
 8002d3c:	18fb      	adds	r3, r7, r3
 8002d3e:	2200      	movs	r2, #0
 8002d40:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002d42:	f7fe fb27 	bl	8001394 <HAL_GetTick>
 8002d46:	0002      	movs	r2, r0
 8002d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4a:	1a9b      	subs	r3, r3, r2
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	18d3      	adds	r3, r2, r3
 8002d50:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002d52:	f7fe fb1f 	bl	8001394 <HAL_GetTick>
 8002d56:	0003      	movs	r3, r0
 8002d58:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	330c      	adds	r3, #12
 8002d60:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002d62:	4b41      	ldr	r3, [pc, #260]	; (8002e68 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	0013      	movs	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	189b      	adds	r3, r3, r2
 8002d6c:	00da      	lsls	r2, r3, #3
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	0d1b      	lsrs	r3, r3, #20
 8002d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d74:	4353      	muls	r3, r2
 8002d76:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002d78:	e068      	b.n	8002e4c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002d7a:	68ba      	ldr	r2, [r7, #8]
 8002d7c:	23c0      	movs	r3, #192	; 0xc0
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d10a      	bne.n	8002d9a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d107      	bne.n	8002d9a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	b2da      	uxtb	r2, r3
 8002d90:	2117      	movs	r1, #23
 8002d92:	187b      	adds	r3, r7, r1
 8002d94:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002d96:	187b      	adds	r3, r7, r1
 8002d98:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	d055      	beq.n	8002e4c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002da0:	f7fe faf8 	bl	8001394 <HAL_GetTick>
 8002da4:	0002      	movs	r2, r0
 8002da6:	6a3b      	ldr	r3, [r7, #32]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d902      	bls.n	8002db6 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d142      	bne.n	8002e3c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	21e0      	movs	r1, #224	; 0xe0
 8002dc2:	438a      	bics	r2, r1
 8002dc4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	685a      	ldr	r2, [r3, #4]
 8002dca:	2382      	movs	r3, #130	; 0x82
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d113      	bne.n	8002dfa <SPI_WaitFifoStateUntilTimeout+0xce>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	689a      	ldr	r2, [r3, #8]
 8002dd6:	2380      	movs	r3, #128	; 0x80
 8002dd8:	021b      	lsls	r3, r3, #8
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d005      	beq.n	8002dea <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	689a      	ldr	r2, [r3, #8]
 8002de2:	2380      	movs	r3, #128	; 0x80
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d107      	bne.n	8002dfa <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2140      	movs	r1, #64	; 0x40
 8002df6:	438a      	bics	r2, r1
 8002df8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dfe:	2380      	movs	r3, #128	; 0x80
 8002e00:	019b      	lsls	r3, r3, #6
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d110      	bne.n	8002e28 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4916      	ldr	r1, [pc, #88]	; (8002e6c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002e12:	400a      	ands	r2, r1
 8002e14:	601a      	str	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2180      	movs	r1, #128	; 0x80
 8002e22:	0189      	lsls	r1, r1, #6
 8002e24:	430a      	orrs	r2, r1
 8002e26:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	225d      	movs	r2, #93	; 0x5d
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	225c      	movs	r2, #92	; 0x5c
 8002e34:	2100      	movs	r1, #0
 8002e36:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e010      	b.n	8002e5e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002e42:	2300      	movs	r3, #0
 8002e44:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	68ba      	ldr	r2, [r7, #8]
 8002e54:	4013      	ands	r3, r2
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d18e      	bne.n	8002d7a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	0018      	movs	r0, r3
 8002e60:	46bd      	mov	sp, r7
 8002e62:	b00a      	add	sp, #40	; 0x28
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	46c0      	nop			; (mov r8, r8)
 8002e68:	20000000 	.word	0x20000000
 8002e6c:	ffffdfff 	.word	0xffffdfff

08002e70 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af02      	add	r7, sp, #8
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	2382      	movs	r3, #130	; 0x82
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d113      	bne.n	8002eb0 <SPI_EndRxTransaction+0x40>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	2380      	movs	r3, #128	; 0x80
 8002e8e:	021b      	lsls	r3, r3, #8
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d005      	beq.n	8002ea0 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	2380      	movs	r3, #128	; 0x80
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d107      	bne.n	8002eb0 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2140      	movs	r1, #64	; 0x40
 8002eac:	438a      	bics	r2, r1
 8002eae:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002eb0:	68ba      	ldr	r2, [r7, #8]
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	9300      	str	r3, [sp, #0]
 8002eb8:	0013      	movs	r3, r2
 8002eba:	2200      	movs	r2, #0
 8002ebc:	2180      	movs	r1, #128	; 0x80
 8002ebe:	f7ff fea7 	bl	8002c10 <SPI_WaitFlagStateUntilTimeout>
 8002ec2:	1e03      	subs	r3, r0, #0
 8002ec4:	d007      	beq.n	8002ed6 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eca:	2220      	movs	r2, #32
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e026      	b.n	8002f24 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	2382      	movs	r3, #130	; 0x82
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d11f      	bne.n	8002f22 <SPI_EndRxTransaction+0xb2>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	689a      	ldr	r2, [r3, #8]
 8002ee6:	2380      	movs	r3, #128	; 0x80
 8002ee8:	021b      	lsls	r3, r3, #8
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d005      	beq.n	8002efa <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	689a      	ldr	r2, [r3, #8]
 8002ef2:	2380      	movs	r3, #128	; 0x80
 8002ef4:	00db      	lsls	r3, r3, #3
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d113      	bne.n	8002f22 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002efa:	68ba      	ldr	r2, [r7, #8]
 8002efc:	23c0      	movs	r3, #192	; 0xc0
 8002efe:	00d9      	lsls	r1, r3, #3
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	0013      	movs	r3, r2
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f7ff ff0f 	bl	8002d2c <SPI_WaitFifoStateUntilTimeout>
 8002f0e:	1e03      	subs	r3, r0, #0
 8002f10:	d007      	beq.n	8002f22 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f16:	2220      	movs	r2, #32
 8002f18:	431a      	orrs	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e000      	b.n	8002f24 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	0018      	movs	r0, r3
 8002f26:	46bd      	mov	sp, r7
 8002f28:	b004      	add	sp, #16
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af02      	add	r7, sp, #8
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f38:	68ba      	ldr	r2, [r7, #8]
 8002f3a:	23c0      	movs	r3, #192	; 0xc0
 8002f3c:	0159      	lsls	r1, r3, #5
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	9300      	str	r3, [sp, #0]
 8002f44:	0013      	movs	r3, r2
 8002f46:	2200      	movs	r2, #0
 8002f48:	f7ff fef0 	bl	8002d2c <SPI_WaitFifoStateUntilTimeout>
 8002f4c:	1e03      	subs	r3, r0, #0
 8002f4e:	d007      	beq.n	8002f60 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f54:	2220      	movs	r2, #32
 8002f56:	431a      	orrs	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e027      	b.n	8002fb0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f60:	68ba      	ldr	r2, [r7, #8]
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	9300      	str	r3, [sp, #0]
 8002f68:	0013      	movs	r3, r2
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	2180      	movs	r1, #128	; 0x80
 8002f6e:	f7ff fe4f 	bl	8002c10 <SPI_WaitFlagStateUntilTimeout>
 8002f72:	1e03      	subs	r3, r0, #0
 8002f74:	d007      	beq.n	8002f86 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f7a:	2220      	movs	r2, #32
 8002f7c:	431a      	orrs	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e014      	b.n	8002fb0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f86:	68ba      	ldr	r2, [r7, #8]
 8002f88:	23c0      	movs	r3, #192	; 0xc0
 8002f8a:	00d9      	lsls	r1, r3, #3
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	0013      	movs	r3, r2
 8002f94:	2200      	movs	r2, #0
 8002f96:	f7ff fec9 	bl	8002d2c <SPI_WaitFifoStateUntilTimeout>
 8002f9a:	1e03      	subs	r3, r0, #0
 8002f9c:	d007      	beq.n	8002fae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	431a      	orrs	r2, r3
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e000      	b.n	8002fb0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	b004      	add	sp, #16
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <memset>:
 8002fb8:	0003      	movs	r3, r0
 8002fba:	1882      	adds	r2, r0, r2
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d100      	bne.n	8002fc2 <memset+0xa>
 8002fc0:	4770      	bx	lr
 8002fc2:	7019      	strb	r1, [r3, #0]
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	e7f9      	b.n	8002fbc <memset+0x4>

08002fc8 <__libc_init_array>:
 8002fc8:	b570      	push	{r4, r5, r6, lr}
 8002fca:	2600      	movs	r6, #0
 8002fcc:	4c0c      	ldr	r4, [pc, #48]	; (8003000 <__libc_init_array+0x38>)
 8002fce:	4d0d      	ldr	r5, [pc, #52]	; (8003004 <__libc_init_array+0x3c>)
 8002fd0:	1b64      	subs	r4, r4, r5
 8002fd2:	10a4      	asrs	r4, r4, #2
 8002fd4:	42a6      	cmp	r6, r4
 8002fd6:	d109      	bne.n	8002fec <__libc_init_array+0x24>
 8002fd8:	2600      	movs	r6, #0
 8002fda:	f000 f819 	bl	8003010 <_init>
 8002fde:	4c0a      	ldr	r4, [pc, #40]	; (8003008 <__libc_init_array+0x40>)
 8002fe0:	4d0a      	ldr	r5, [pc, #40]	; (800300c <__libc_init_array+0x44>)
 8002fe2:	1b64      	subs	r4, r4, r5
 8002fe4:	10a4      	asrs	r4, r4, #2
 8002fe6:	42a6      	cmp	r6, r4
 8002fe8:	d105      	bne.n	8002ff6 <__libc_init_array+0x2e>
 8002fea:	bd70      	pop	{r4, r5, r6, pc}
 8002fec:	00b3      	lsls	r3, r6, #2
 8002fee:	58eb      	ldr	r3, [r5, r3]
 8002ff0:	4798      	blx	r3
 8002ff2:	3601      	adds	r6, #1
 8002ff4:	e7ee      	b.n	8002fd4 <__libc_init_array+0xc>
 8002ff6:	00b3      	lsls	r3, r6, #2
 8002ff8:	58eb      	ldr	r3, [r5, r3]
 8002ffa:	4798      	blx	r3
 8002ffc:	3601      	adds	r6, #1
 8002ffe:	e7f2      	b.n	8002fe6 <__libc_init_array+0x1e>
 8003000:	08003058 	.word	0x08003058
 8003004:	08003058 	.word	0x08003058
 8003008:	0800305c 	.word	0x0800305c
 800300c:	08003058 	.word	0x08003058

08003010 <_init>:
 8003010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003012:	46c0      	nop			; (mov r8, r8)
 8003014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003016:	bc08      	pop	{r3}
 8003018:	469e      	mov	lr, r3
 800301a:	4770      	bx	lr

0800301c <_fini>:
 800301c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800301e:	46c0      	nop			; (mov r8, r8)
 8003020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003022:	bc08      	pop	{r3}
 8003024:	469e      	mov	lr, r3
 8003026:	4770      	bx	lr
