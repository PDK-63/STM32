
FW bang led Trung.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f9c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014d8  080070b0  080070b0  000080b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008588  08008588  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008588  08008588  00009588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008590  08008590  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008590  08008590  00009590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008594  08008594  00009594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08008598  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000638  200001d4  0800876c  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000080c  0800876c  0000a80c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000decd  00000000  00000000  0000a1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002224  00000000  00000000  000180ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  0001a2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000035c5  00000000  00000000  0001b030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000fb72  00000000  00000000  0001e5f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008fc01  00000000  00000000  0002e167  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000bdd68  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000a47  00000000  00000000  000bddab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004808  00000000  00000000  000be7f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000c2ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08007094 	.word	0x08007094

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08007094 	.word	0x08007094

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <HAL_TIM_PeriodElapsedCallback>:
 *      Author: os
 */

#include "led.h"
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim1.Instance)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	4b04      	ldr	r3, [pc, #16]	@ (8000aa8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d101      	bne.n	8000aa0 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		quetledMT();
 8000a9c:	f000 fa5a 	bl	8000f54 <quetledMT>
	}
}
 8000aa0:	bf00      	nop
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	200005f4 	.word	0x200005f4

08000aac <MT_Send1>:

/*
 * Hiện tại bẳng led đấu từ data 8 -> 1
 */
void MT_Send1(uint8_t data1,uint8_t data2,uint8_t data3,uint8_t data4,uint8_t data5,uint8_t data6,uint8_t data7,uint8_t data8)
{
 8000aac:	b590      	push	{r4, r7, lr}
 8000aae:	b087      	sub	sp, #28
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	4608      	mov	r0, r1
 8000ab6:	4611      	mov	r1, r2
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4623      	mov	r3, r4
 8000abc:	71fb      	strb	r3, [r7, #7]
 8000abe:	4603      	mov	r3, r0
 8000ac0:	71bb      	strb	r3, [r7, #6]
 8000ac2:	460b      	mov	r3, r1
 8000ac4:	717b      	strb	r3, [r7, #5]
 8000ac6:	4613      	mov	r3, r2
 8000ac8:	713b      	strb	r3, [r7, #4]
	uint8_t i,tg1,tg2,tg3,tg4,tg5,tg6,tg7,tg8;

	for(i=0;i<8;i++)
 8000aca:	2300      	movs	r3, #0
 8000acc:	75fb      	strb	r3, [r7, #23]
 8000ace:	e0dc      	b.n	8000c8a <MT_Send1+0x1de>
	{
		tg1 = data1;
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
 8000ad2:	75bb      	strb	r3, [r7, #22]
		tg1 = tg1&0x80;
 8000ad4:	7dbb      	ldrb	r3, [r7, #22]
 8000ad6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000ada:	75bb      	strb	r3, [r7, #22]
		tg2 = data2;
 8000adc:	79bb      	ldrb	r3, [r7, #6]
 8000ade:	757b      	strb	r3, [r7, #21]
		tg2 = tg2&0x80;
 8000ae0:	7d7b      	ldrb	r3, [r7, #21]
 8000ae2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000ae6:	757b      	strb	r3, [r7, #21]
		tg3 = data3;
 8000ae8:	797b      	ldrb	r3, [r7, #5]
 8000aea:	753b      	strb	r3, [r7, #20]
		tg3 = tg3&0x80;
 8000aec:	7d3b      	ldrb	r3, [r7, #20]
 8000aee:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000af2:	753b      	strb	r3, [r7, #20]
		tg4 = data4;
 8000af4:	793b      	ldrb	r3, [r7, #4]
 8000af6:	74fb      	strb	r3, [r7, #19]
		tg4 = tg4&0x80;
 8000af8:	7cfb      	ldrb	r3, [r7, #19]
 8000afa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000afe:	74fb      	strb	r3, [r7, #19]
		tg5 = data5;
 8000b00:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000b04:	74bb      	strb	r3, [r7, #18]
		tg5 = tg5&0x80;
 8000b06:	7cbb      	ldrb	r3, [r7, #18]
 8000b08:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000b0c:	74bb      	strb	r3, [r7, #18]
		tg6 = data6;
 8000b0e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000b12:	747b      	strb	r3, [r7, #17]
		tg6 = tg6&0x80;
 8000b14:	7c7b      	ldrb	r3, [r7, #17]
 8000b16:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000b1a:	747b      	strb	r3, [r7, #17]
		tg7 = data7;
 8000b1c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000b20:	743b      	strb	r3, [r7, #16]
		tg7 = tg7&0x80;
 8000b22:	7c3b      	ldrb	r3, [r7, #16]
 8000b24:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000b28:	743b      	strb	r3, [r7, #16]
		tg8 = data8;
 8000b2a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000b2e:	73fb      	strb	r3, [r7, #15]
		tg8 = tg8&0x80;
 8000b30:	7bfb      	ldrb	r3, [r7, #15]
 8000b32:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000b36:	73fb      	strb	r3, [r7, #15]

		if(tg1 == 0x80)
 8000b38:	7dbb      	ldrb	r3, [r7, #22]
 8000b3a:	2b80      	cmp	r3, #128	@ 0x80
 8000b3c:	d106      	bne.n	8000b4c <MT_Send1+0xa0>
		{
			HAL_GPIO_WritePin(MT_R8_GPIO_Port, MT_R8_Pin, GPIO_PIN_RESET);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b44:	4855      	ldr	r0, [pc, #340]	@ (8000c9c <MT_Send1+0x1f0>)
 8000b46:	f001 fef8 	bl	800293a <HAL_GPIO_WritePin>
 8000b4a:	e005      	b.n	8000b58 <MT_Send1+0xac>
		}
		else
		{
			HAL_GPIO_WritePin(MT_R8_GPIO_Port, MT_R8_Pin, GPIO_PIN_SET);
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b52:	4852      	ldr	r0, [pc, #328]	@ (8000c9c <MT_Send1+0x1f0>)
 8000b54:	f001 fef1 	bl	800293a <HAL_GPIO_WritePin>
		}
		if(tg2 == 0x80)
 8000b58:	7d7b      	ldrb	r3, [r7, #21]
 8000b5a:	2b80      	cmp	r3, #128	@ 0x80
 8000b5c:	d106      	bne.n	8000b6c <MT_Send1+0xc0>
		{
			HAL_GPIO_WritePin(MT_R7_GPIO_Port, MT_R7_Pin, GPIO_PIN_RESET);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b64:	484d      	ldr	r0, [pc, #308]	@ (8000c9c <MT_Send1+0x1f0>)
 8000b66:	f001 fee8 	bl	800293a <HAL_GPIO_WritePin>
 8000b6a:	e005      	b.n	8000b78 <MT_Send1+0xcc>
		}
		else
		{
			HAL_GPIO_WritePin(MT_R7_GPIO_Port, MT_R7_Pin, GPIO_PIN_SET);
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b72:	484a      	ldr	r0, [pc, #296]	@ (8000c9c <MT_Send1+0x1f0>)
 8000b74:	f001 fee1 	bl	800293a <HAL_GPIO_WritePin>
		}
		if(tg3 == 0x80)
 8000b78:	7d3b      	ldrb	r3, [r7, #20]
 8000b7a:	2b80      	cmp	r3, #128	@ 0x80
 8000b7c:	d106      	bne.n	8000b8c <MT_Send1+0xe0>
		{
			HAL_GPIO_WritePin(MT_R6_GPIO_Port, MT_R6_Pin, GPIO_PIN_RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b84:	4845      	ldr	r0, [pc, #276]	@ (8000c9c <MT_Send1+0x1f0>)
 8000b86:	f001 fed8 	bl	800293a <HAL_GPIO_WritePin>
 8000b8a:	e005      	b.n	8000b98 <MT_Send1+0xec>
		}
		else
		{
			HAL_GPIO_WritePin(MT_R6_GPIO_Port, MT_R6_Pin, GPIO_PIN_SET);
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b92:	4842      	ldr	r0, [pc, #264]	@ (8000c9c <MT_Send1+0x1f0>)
 8000b94:	f001 fed1 	bl	800293a <HAL_GPIO_WritePin>
		}
		if(tg4 == 0x80)
 8000b98:	7cfb      	ldrb	r3, [r7, #19]
 8000b9a:	2b80      	cmp	r3, #128	@ 0x80
 8000b9c:	d106      	bne.n	8000bac <MT_Send1+0x100>
		{
			HAL_GPIO_WritePin(MT_R5_GPIO_Port, MT_R5_Pin, GPIO_PIN_RESET);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ba4:	483d      	ldr	r0, [pc, #244]	@ (8000c9c <MT_Send1+0x1f0>)
 8000ba6:	f001 fec8 	bl	800293a <HAL_GPIO_WritePin>
 8000baa:	e005      	b.n	8000bb8 <MT_Send1+0x10c>
		}
		else
		{
			HAL_GPIO_WritePin(MT_R5_GPIO_Port, MT_R5_Pin, GPIO_PIN_SET);
 8000bac:	2201      	movs	r2, #1
 8000bae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bb2:	483a      	ldr	r0, [pc, #232]	@ (8000c9c <MT_Send1+0x1f0>)
 8000bb4:	f001 fec1 	bl	800293a <HAL_GPIO_WritePin>
		}
		if(tg5 == 0x80)
 8000bb8:	7cbb      	ldrb	r3, [r7, #18]
 8000bba:	2b80      	cmp	r3, #128	@ 0x80
 8000bbc:	d106      	bne.n	8000bcc <MT_Send1+0x120>
		{
			HAL_GPIO_WritePin(MT_R4_GPIO_Port, MT_R4_Pin, GPIO_PIN_RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bc4:	4835      	ldr	r0, [pc, #212]	@ (8000c9c <MT_Send1+0x1f0>)
 8000bc6:	f001 feb8 	bl	800293a <HAL_GPIO_WritePin>
 8000bca:	e005      	b.n	8000bd8 <MT_Send1+0x12c>
		}
		else
		{
			HAL_GPIO_WritePin(MT_R4_GPIO_Port, MT_R4_Pin, GPIO_PIN_SET);
 8000bcc:	2201      	movs	r2, #1
 8000bce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bd2:	4832      	ldr	r0, [pc, #200]	@ (8000c9c <MT_Send1+0x1f0>)
 8000bd4:	f001 feb1 	bl	800293a <HAL_GPIO_WritePin>
		}
		if(tg6 == 0x80)
 8000bd8:	7c7b      	ldrb	r3, [r7, #17]
 8000bda:	2b80      	cmp	r3, #128	@ 0x80
 8000bdc:	d106      	bne.n	8000bec <MT_Send1+0x140>
		{
			HAL_GPIO_WritePin(MT_R3_GPIO_Port, MT_R3_Pin, GPIO_PIN_RESET);
 8000bde:	2200      	movs	r2, #0
 8000be0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000be4:	482d      	ldr	r0, [pc, #180]	@ (8000c9c <MT_Send1+0x1f0>)
 8000be6:	f001 fea8 	bl	800293a <HAL_GPIO_WritePin>
 8000bea:	e005      	b.n	8000bf8 <MT_Send1+0x14c>
		}
		else
		{
			HAL_GPIO_WritePin(MT_R3_GPIO_Port, MT_R3_Pin, GPIO_PIN_SET);
 8000bec:	2201      	movs	r2, #1
 8000bee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bf2:	482a      	ldr	r0, [pc, #168]	@ (8000c9c <MT_Send1+0x1f0>)
 8000bf4:	f001 fea1 	bl	800293a <HAL_GPIO_WritePin>
		}
		if(tg7 == 0x80)
 8000bf8:	7c3b      	ldrb	r3, [r7, #16]
 8000bfa:	2b80      	cmp	r3, #128	@ 0x80
 8000bfc:	d105      	bne.n	8000c0a <MT_Send1+0x15e>
		{
			HAL_GPIO_WritePin(MT_R2_GPIO_Port, MT_R2_Pin, GPIO_PIN_RESET);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2102      	movs	r1, #2
 8000c02:	4827      	ldr	r0, [pc, #156]	@ (8000ca0 <MT_Send1+0x1f4>)
 8000c04:	f001 fe99 	bl	800293a <HAL_GPIO_WritePin>
 8000c08:	e004      	b.n	8000c14 <MT_Send1+0x168>
		}
		else
		{
			HAL_GPIO_WritePin(MT_R2_GPIO_Port, MT_R2_Pin, GPIO_PIN_SET);
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	2102      	movs	r1, #2
 8000c0e:	4824      	ldr	r0, [pc, #144]	@ (8000ca0 <MT_Send1+0x1f4>)
 8000c10:	f001 fe93 	bl	800293a <HAL_GPIO_WritePin>
		}
		if(tg8 == 0x80)
 8000c14:	7bfb      	ldrb	r3, [r7, #15]
 8000c16:	2b80      	cmp	r3, #128	@ 0x80
 8000c18:	d105      	bne.n	8000c26 <MT_Send1+0x17a>
		{
			HAL_GPIO_WritePin(MT_R1_GPIO_Port, MT_R1_Pin, GPIO_PIN_RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	4820      	ldr	r0, [pc, #128]	@ (8000ca0 <MT_Send1+0x1f4>)
 8000c20:	f001 fe8b 	bl	800293a <HAL_GPIO_WritePin>
 8000c24:	e004      	b.n	8000c30 <MT_Send1+0x184>
		}
		else
		{
			HAL_GPIO_WritePin(MT_R1_GPIO_Port, MT_R1_Pin, GPIO_PIN_SET);
 8000c26:	2201      	movs	r2, #1
 8000c28:	2101      	movs	r1, #1
 8000c2a:	481d      	ldr	r0, [pc, #116]	@ (8000ca0 <MT_Send1+0x1f4>)
 8000c2c:	f001 fe85 	bl	800293a <HAL_GPIO_WritePin>
		}
		HAL_GPIO_WritePin(MT_CLK_GPIO_Port, MT_CLK_Pin, GPIO_PIN_RESET);
 8000c30:	2200      	movs	r2, #0
 8000c32:	2110      	movs	r1, #16
 8000c34:	4819      	ldr	r0, [pc, #100]	@ (8000c9c <MT_Send1+0x1f0>)
 8000c36:	f001 fe80 	bl	800293a <HAL_GPIO_WritePin>
		data1 <<=1;
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	71fb      	strb	r3, [r7, #7]
		data2 <<=1;
 8000c40:	79bb      	ldrb	r3, [r7, #6]
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	71bb      	strb	r3, [r7, #6]
		data3 <<=1;
 8000c46:	797b      	ldrb	r3, [r7, #5]
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	717b      	strb	r3, [r7, #5]
		data4 <<=1;
 8000c4c:	793b      	ldrb	r3, [r7, #4]
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	713b      	strb	r3, [r7, #4]
		data5 <<=1;
 8000c52:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
		data6 <<=1;
 8000c5c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
		data7 <<=1;
 8000c66:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
		data8 <<=1;
 8000c70:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
		HAL_GPIO_WritePin(MT_CLK_GPIO_Port, MT_CLK_Pin, GPIO_PIN_SET);
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	2110      	movs	r1, #16
 8000c7e:	4807      	ldr	r0, [pc, #28]	@ (8000c9c <MT_Send1+0x1f0>)
 8000c80:	f001 fe5b 	bl	800293a <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8000c84:	7dfb      	ldrb	r3, [r7, #23]
 8000c86:	3301      	adds	r3, #1
 8000c88:	75fb      	strb	r3, [r7, #23]
 8000c8a:	7dfb      	ldrb	r3, [r7, #23]
 8000c8c:	2b07      	cmp	r3, #7
 8000c8e:	f67f af1f 	bls.w	8000ad0 <MT_Send1+0x24>
	}
}
 8000c92:	bf00      	nop
 8000c94:	bf00      	nop
 8000c96:	371c      	adds	r7, #28
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd90      	pop	{r4, r7, pc}
 8000c9c:	40010c00 	.word	0x40010c00
 8000ca0:	40010800 	.word	0x40010800

08000ca4 <write_char1>:
    }
    return len_heigh;
}

u8 write_char1(u8 font,u8 data, u16 x, u16 y)
{
 8000ca4:	b590      	push	{r4, r7, lr}
 8000ca6:	b089      	sub	sp, #36	@ 0x24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4604      	mov	r4, r0
 8000cac:	4608      	mov	r0, r1
 8000cae:	4611      	mov	r1, r2
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4623      	mov	r3, r4
 8000cb4:	71fb      	strb	r3, [r7, #7]
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71bb      	strb	r3, [r7, #6]
 8000cba:	460b      	mov	r3, r1
 8000cbc:	80bb      	strh	r3, [r7, #4]
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	807b      	strh	r3, [r7, #2]
    u16 i,j,k,len_heigh,max_bit,data_font,count_bit = 0,count_font = 0,tg;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	82fb      	strh	r3, [r7, #22]
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	82bb      	strh	r3, [r7, #20]
    unsigned char * pointer;
//    pointer = (unsigned char *)GUI_FontArialNarrow16_CharInfo[data - 0x20].pData;
//    len_heigh = GUI_FontArialNarrow16_CharInfo[data - 0x20].BytesPerLine;
//    max_bit = GUI_FontArialNarrow16_CharInfo[data - 0x20].XSize;

    pointer = (unsigned char *)GUI_FontHPSimplified15_CharInfo[data - 0x20].pData;
 8000cca:	79bb      	ldrb	r3, [r7, #6]
 8000ccc:	3b20      	subs	r3, #32
 8000cce:	4a5b      	ldr	r2, [pc, #364]	@ (8000e3c <write_char1+0x198>)
 8000cd0:	00db      	lsls	r3, r3, #3
 8000cd2:	4413      	add	r3, r2
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	613b      	str	r3, [r7, #16]
    len_heigh = GUI_FontHPSimplified15_CharInfo[data - 0x20].BytesPerLine;
 8000cd8:	79bb      	ldrb	r3, [r7, #6]
 8000cda:	3b20      	subs	r3, #32
 8000cdc:	4a57      	ldr	r2, [pc, #348]	@ (8000e3c <write_char1+0x198>)
 8000cde:	00db      	lsls	r3, r3, #3
 8000ce0:	4413      	add	r3, r2
 8000ce2:	789b      	ldrb	r3, [r3, #2]
 8000ce4:	81fb      	strh	r3, [r7, #14]
    max_bit = GUI_FontHPSimplified15_CharInfo[data - 0x20].XSize;
 8000ce6:	79bb      	ldrb	r3, [r7, #6]
 8000ce8:	3b20      	subs	r3, #32
 8000cea:	4a54      	ldr	r2, [pc, #336]	@ (8000e3c <write_char1+0x198>)
 8000cec:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8000cf0:	81bb      	strh	r3, [r7, #12]

    for(j=0;j<15;j++)//15 là số hàng của font
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	83bb      	strh	r3, [r7, #28]
 8000cf6:	e050      	b.n	8000d9a <write_char1+0xf6>
    {
    	count_bit = 0;//xoa count bit
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	82fb      	strh	r3, [r7, #22]
		for(i=0;i<len_heigh;i++)//lặp số cột của font
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	83fb      	strh	r3, [r7, #30]
 8000d00:	e044      	b.n	8000d8c <write_char1+0xe8>
		{
			data_font = pointer[count_font++];//lấy data từ font
 8000d02:	8abb      	ldrh	r3, [r7, #20]
 8000d04:	1c5a      	adds	r2, r3, #1
 8000d06:	82ba      	strh	r2, [r7, #20]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	833b      	strh	r3, [r7, #24]
			for(k=0;k<8;k++)
 8000d12:	2300      	movs	r3, #0
 8000d14:	837b      	strh	r3, [r7, #26]
 8000d16:	e02f      	b.n	8000d78 <write_char1+0xd4>
			{
				if(x+count_bit >= 64) break;
 8000d18:	88ba      	ldrh	r2, [r7, #4]
 8000d1a:	8afb      	ldrh	r3, [r7, #22]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d20:	dc2e      	bgt.n	8000d80 <write_char1+0xdc>

				//kiểm tra bit của font để set pixel
				if( (data_font &0x80) == 0x80)
 8000d22:	8b3b      	ldrh	r3, [r7, #24]
 8000d24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d00c      	beq.n	8000d46 <write_char1+0xa2>
					setpixel(x+count_bit, y+j, 1);
 8000d2c:	88ba      	ldrh	r2, [r7, #4]
 8000d2e:	8afb      	ldrh	r3, [r7, #22]
 8000d30:	4413      	add	r3, r2
 8000d32:	b298      	uxth	r0, r3
 8000d34:	887a      	ldrh	r2, [r7, #2]
 8000d36:	8bbb      	ldrh	r3, [r7, #28]
 8000d38:	4413      	add	r3, r2
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	4619      	mov	r1, r3
 8000d40:	f000 face 	bl	80012e0 <setpixel>
 8000d44:	e00b      	b.n	8000d5e <write_char1+0xba>
				else
					setpixel(x+count_bit, y+j, 0);
 8000d46:	88ba      	ldrh	r2, [r7, #4]
 8000d48:	8afb      	ldrh	r3, [r7, #22]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	b298      	uxth	r0, r3
 8000d4e:	887a      	ldrh	r2, [r7, #2]
 8000d50:	8bbb      	ldrh	r3, [r7, #28]
 8000d52:	4413      	add	r3, r2
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	2200      	movs	r2, #0
 8000d58:	4619      	mov	r1, r3
 8000d5a:	f000 fac1 	bl	80012e0 <setpixel>
				data_font *= 2;
 8000d5e:	8b3b      	ldrh	r3, [r7, #24]
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	833b      	strh	r3, [r7, #24]

				count_bit++;//nếu số bit đếm = max bit của font thì break
 8000d64:	8afb      	ldrh	r3, [r7, #22]
 8000d66:	3301      	adds	r3, #1
 8000d68:	82fb      	strh	r3, [r7, #22]
				if(count_bit>=max_bit) break;
 8000d6a:	8afa      	ldrh	r2, [r7, #22]
 8000d6c:	89bb      	ldrh	r3, [r7, #12]
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d208      	bcs.n	8000d84 <write_char1+0xe0>
			for(k=0;k<8;k++)
 8000d72:	8b7b      	ldrh	r3, [r7, #26]
 8000d74:	3301      	adds	r3, #1
 8000d76:	837b      	strh	r3, [r7, #26]
 8000d78:	8b7b      	ldrh	r3, [r7, #26]
 8000d7a:	2b07      	cmp	r3, #7
 8000d7c:	d9cc      	bls.n	8000d18 <write_char1+0x74>
 8000d7e:	e002      	b.n	8000d86 <write_char1+0xe2>
				if(x+count_bit >= 64) break;
 8000d80:	bf00      	nop
 8000d82:	e000      	b.n	8000d86 <write_char1+0xe2>
				if(count_bit>=max_bit) break;
 8000d84:	bf00      	nop
		for(i=0;i<len_heigh;i++)//lặp số cột của font
 8000d86:	8bfb      	ldrh	r3, [r7, #30]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	83fb      	strh	r3, [r7, #30]
 8000d8c:	8bfa      	ldrh	r2, [r7, #30]
 8000d8e:	89fb      	ldrh	r3, [r7, #14]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d3b6      	bcc.n	8000d02 <write_char1+0x5e>
    for(j=0;j<15;j++)//15 là số hàng của font
 8000d94:	8bbb      	ldrh	r3, [r7, #28]
 8000d96:	3301      	adds	r3, #1
 8000d98:	83bb      	strh	r3, [r7, #28]
 8000d9a:	8bbb      	ldrh	r3, [r7, #28]
 8000d9c:	2b0e      	cmp	r3, #14
 8000d9e:	d9ab      	bls.n	8000cf8 <write_char1+0x54>

		}
    }

    //check bảo hành
	if(flag_hetBH == 1)
 8000da0:	4b27      	ldr	r3, [pc, #156]	@ (8000e40 <write_char1+0x19c>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d143      	bne.n	8000e30 <write_char1+0x18c>
	{
		for(i=0;i<8;i++)
 8000da8:	2300      	movs	r3, #0
 8000daa:	83fb      	strh	r3, [r7, #30]
 8000dac:	e03d      	b.n	8000e2a <write_char1+0x186>
		{
			for(j=0;j<8;j++)
 8000dae:	2300      	movs	r3, #0
 8000db0:	83bb      	strh	r3, [r7, #28]
 8000db2:	e034      	b.n	8000e1e <write_char1+0x17a>
			{
				setpixel(5 + i,5 + j, 0);
 8000db4:	8bfb      	ldrh	r3, [r7, #30]
 8000db6:	3305      	adds	r3, #5
 8000db8:	b298      	uxth	r0, r3
 8000dba:	8bbb      	ldrh	r3, [r7, #28]
 8000dbc:	3305      	adds	r3, #5
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	f000 fa8c 	bl	80012e0 <setpixel>

				setpixel(14 + i,16 + j, 0);
 8000dc8:	8bfb      	ldrh	r3, [r7, #30]
 8000dca:	330e      	adds	r3, #14
 8000dcc:	b298      	uxth	r0, r3
 8000dce:	8bbb      	ldrh	r3, [r7, #28]
 8000dd0:	3310      	adds	r3, #16
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	f000 fa82 	bl	80012e0 <setpixel>

				setpixel(24 + i,32 + j, 0);
 8000ddc:	8bfb      	ldrh	r3, [r7, #30]
 8000dde:	3318      	adds	r3, #24
 8000de0:	b298      	uxth	r0, r3
 8000de2:	8bbb      	ldrh	r3, [r7, #28]
 8000de4:	3320      	adds	r3, #32
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	2200      	movs	r2, #0
 8000dea:	4619      	mov	r1, r3
 8000dec:	f000 fa78 	bl	80012e0 <setpixel>

				setpixel(34 + i,48 + j, 0);
 8000df0:	8bfb      	ldrh	r3, [r7, #30]
 8000df2:	3322      	adds	r3, #34	@ 0x22
 8000df4:	b298      	uxth	r0, r3
 8000df6:	8bbb      	ldrh	r3, [r7, #28]
 8000df8:	3330      	adds	r3, #48	@ 0x30
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	4619      	mov	r1, r3
 8000e00:	f000 fa6e 	bl	80012e0 <setpixel>

				setpixel(44 + i,64 + j, 0);
 8000e04:	8bfb      	ldrh	r3, [r7, #30]
 8000e06:	332c      	adds	r3, #44	@ 0x2c
 8000e08:	b298      	uxth	r0, r3
 8000e0a:	8bbb      	ldrh	r3, [r7, #28]
 8000e0c:	3340      	adds	r3, #64	@ 0x40
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	2200      	movs	r2, #0
 8000e12:	4619      	mov	r1, r3
 8000e14:	f000 fa64 	bl	80012e0 <setpixel>
			for(j=0;j<8;j++)
 8000e18:	8bbb      	ldrh	r3, [r7, #28]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	83bb      	strh	r3, [r7, #28]
 8000e1e:	8bbb      	ldrh	r3, [r7, #28]
 8000e20:	2b07      	cmp	r3, #7
 8000e22:	d9c7      	bls.n	8000db4 <write_char1+0x110>
		for(i=0;i<8;i++)
 8000e24:	8bfb      	ldrh	r3, [r7, #30]
 8000e26:	3301      	adds	r3, #1
 8000e28:	83fb      	strh	r3, [r7, #30]
 8000e2a:	8bfb      	ldrh	r3, [r7, #30]
 8000e2c:	2b07      	cmp	r3, #7
 8000e2e:	d9be      	bls.n	8000dae <write_char1+0x10a>

			}
		}
	}
    return max_bit;
 8000e30:	89bb      	ldrh	r3, [r7, #12]
 8000e32:	b2db      	uxtb	r3, r3
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3724      	adds	r7, #36	@ 0x24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd90      	pop	{r4, r7, pc}
 8000e3c:	08007e0c 	.word	0x08007e0c
 8000e40:	20000684 	.word	0x20000684

08000e44 <clear_lcd>:

void clear_lcd(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
	for(uint16_t i=0;i<SO_BUFFER_RAM;i++)
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	80fb      	strh	r3, [r7, #6]
 8000e4e:	e022      	b.n	8000e96 <clear_lcd+0x52>
	{
		buffer_quet1[i] = 0;
 8000e50:	88fb      	ldrh	r3, [r7, #6]
 8000e52:	4a15      	ldr	r2, [pc, #84]	@ (8000ea8 <clear_lcd+0x64>)
 8000e54:	2100      	movs	r1, #0
 8000e56:	54d1      	strb	r1, [r2, r3]
		buffer_quet2[i] = 0;
 8000e58:	88fb      	ldrh	r3, [r7, #6]
 8000e5a:	4a14      	ldr	r2, [pc, #80]	@ (8000eac <clear_lcd+0x68>)
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	54d1      	strb	r1, [r2, r3]
		buffer_quet3[i] = 0;
 8000e60:	88fb      	ldrh	r3, [r7, #6]
 8000e62:	4a13      	ldr	r2, [pc, #76]	@ (8000eb0 <clear_lcd+0x6c>)
 8000e64:	2100      	movs	r1, #0
 8000e66:	54d1      	strb	r1, [r2, r3]
		buffer_quet4[i] = 0;
 8000e68:	88fb      	ldrh	r3, [r7, #6]
 8000e6a:	4a12      	ldr	r2, [pc, #72]	@ (8000eb4 <clear_lcd+0x70>)
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	54d1      	strb	r1, [r2, r3]
		buffer_quet5[i] = 0;
 8000e70:	88fb      	ldrh	r3, [r7, #6]
 8000e72:	4a11      	ldr	r2, [pc, #68]	@ (8000eb8 <clear_lcd+0x74>)
 8000e74:	2100      	movs	r1, #0
 8000e76:	54d1      	strb	r1, [r2, r3]
		buffer_quet6[i] = 0;
 8000e78:	88fb      	ldrh	r3, [r7, #6]
 8000e7a:	4a10      	ldr	r2, [pc, #64]	@ (8000ebc <clear_lcd+0x78>)
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	54d1      	strb	r1, [r2, r3]
		buffer_quet7[i] = 0;
 8000e80:	88fb      	ldrh	r3, [r7, #6]
 8000e82:	4a0f      	ldr	r2, [pc, #60]	@ (8000ec0 <clear_lcd+0x7c>)
 8000e84:	2100      	movs	r1, #0
 8000e86:	54d1      	strb	r1, [r2, r3]
		buffer_quet8[i] = 0;
 8000e88:	88fb      	ldrh	r3, [r7, #6]
 8000e8a:	4a0e      	ldr	r2, [pc, #56]	@ (8000ec4 <clear_lcd+0x80>)
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i=0;i<SO_BUFFER_RAM;i++)
 8000e90:	88fb      	ldrh	r3, [r7, #6]
 8000e92:	3301      	adds	r3, #1
 8000e94:	80fb      	strh	r3, [r7, #6]
 8000e96:	88fb      	ldrh	r3, [r7, #6]
 8000e98:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e9a:	d9d9      	bls.n	8000e50 <clear_lcd+0xc>
	}
}
 8000e9c:	bf00      	nop
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr
 8000ea8:	200001f0 	.word	0x200001f0
 8000eac:	20000270 	.word	0x20000270
 8000eb0:	200002f0 	.word	0x200002f0
 8000eb4:	20000370 	.word	0x20000370
 8000eb8:	200003f0 	.word	0x200003f0
 8000ebc:	20000470 	.word	0x20000470
 8000ec0:	200004f0 	.word	0x200004f0
 8000ec4:	20000570 	.word	0x20000570

08000ec8 <write_string>:

u8 write_string(u8 font,u8 *data, u8 x, u8 y)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6039      	str	r1, [r7, #0]
 8000ed0:	4611      	mov	r1, r2
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	71fb      	strb	r3, [r7, #7]
 8000ed8:	460b      	mov	r3, r1
 8000eda:	71bb      	strb	r3, [r7, #6]
 8000edc:	4613      	mov	r3, r2
 8000ede:	717b      	strb	r3, [r7, #5]
    u8 x_pointer = 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	73fb      	strb	r3, [r7, #15]
    while(*data)
 8000ee4:	e011      	b.n	8000f0a <write_string+0x42>
    {
        x_pointer += write_char1(0,*data,x_pointer,y) -1;
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	7819      	ldrb	r1, [r3, #0]
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
 8000eec:	b29a      	uxth	r2, r3
 8000eee:	797b      	ldrb	r3, [r7, #5]
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f7ff fed6 	bl	8000ca4 <write_char1>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	3b01      	subs	r3, #1
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
 8000f00:	4413      	add	r3, r2
 8000f02:	73fb      	strb	r3, [r7, #15]
        data++;
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	3301      	adds	r3, #1
 8000f08:	603b      	str	r3, [r7, #0]
    while(*data)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d1e9      	bne.n	8000ee6 <write_string+0x1e>

    }
    return x_pointer;
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <led_init>:

void led_init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
	for(uint16_t j=0;j<SO_BUFFER_RAM;j++)
 8000f22:	2300      	movs	r3, #0
 8000f24:	80fb      	strh	r3, [r7, #6]
 8000f26:	e006      	b.n	8000f36 <led_init+0x1a>
	{
		buffer_quet1[j] = 0;
 8000f28:	88fb      	ldrh	r3, [r7, #6]
 8000f2a:	4a08      	ldr	r2, [pc, #32]	@ (8000f4c <led_init+0x30>)
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	54d1      	strb	r1, [r2, r3]
	for(uint16_t j=0;j<SO_BUFFER_RAM;j++)
 8000f30:	88fb      	ldrh	r3, [r7, #6]
 8000f32:	3301      	adds	r3, #1
 8000f34:	80fb      	strh	r3, [r7, #6]
 8000f36:	88fb      	ldrh	r3, [r7, #6]
 8000f38:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f3a:	d9f5      	bls.n	8000f28 <led_init+0xc>
	}
	HAL_TIM_Base_Start_IT(&htim1);
 8000f3c:	4804      	ldr	r0, [pc, #16]	@ (8000f50 <led_init+0x34>)
 8000f3e:	f002 f975 	bl	800322c <HAL_TIM_Base_Start_IT>
	{
	  setpixel(x, y, 0);
//	  HAL_Delay(1);
	}
#endif
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	200001f0 	.word	0x200001f0
 8000f50:	200005f4 	.word	0x200005f4

08000f54 <quetledMT>:

void quetledMT(void)
{
 8000f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f56:	b087      	sub	sp, #28
 8000f58:	af04      	add	r7, sp, #16
	static uint8_t quetlled = 0;

	//day data ra
	for(uint8_t i=0;i<((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8);i++)
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	71fb      	strb	r3, [r7, #7]
 8000f5e:	e142      	b.n	80011e6 <quetledMT+0x292>
	{
//	MT_Send(buffer_quet1[48*SO_BANG_SU_DUNG + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)]);
//	MT_Send(buffer_quet1[32*SO_BANG_SU_DUNG + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)]);
//	MT_Send(buffer_quet1[16*SO_BANG_SU_DUNG + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)]);
//	MT_Send(buffer_quet1[0  + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)]);
	MT_Send1(buffer_quet1[48*SO_BANG_SU_DUNG + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)],
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8000f66:	4ba8      	ldr	r3, [pc, #672]	@ (8001208 <quetledMT+0x2b4>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	00db      	lsls	r3, r3, #3
 8000f6c:	4413      	add	r3, r2
 8000f6e:	4aa7      	ldr	r2, [pc, #668]	@ (800120c <quetledMT+0x2b8>)
 8000f70:	5cd5      	ldrb	r5, [r2, r3]
			buffer_quet2[48*SO_BANG_SU_DUNG + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)],
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8000f78:	4ba3      	ldr	r3, [pc, #652]	@ (8001208 <quetledMT+0x2b4>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	00db      	lsls	r3, r3, #3
 8000f7e:	4413      	add	r3, r2
	MT_Send1(buffer_quet1[48*SO_BANG_SU_DUNG + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)],
 8000f80:	4aa3      	ldr	r2, [pc, #652]	@ (8001210 <quetledMT+0x2bc>)
 8000f82:	5cd6      	ldrb	r6, [r2, r3]
			buffer_quet3[48*SO_BANG_SU_DUNG + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)],
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8000f8a:	4b9f      	ldr	r3, [pc, #636]	@ (8001208 <quetledMT+0x2b4>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	00db      	lsls	r3, r3, #3
 8000f90:	4413      	add	r3, r2
	MT_Send1(buffer_quet1[48*SO_BANG_SU_DUNG + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)],
 8000f92:	4aa0      	ldr	r2, [pc, #640]	@ (8001214 <quetledMT+0x2c0>)
 8000f94:	f812 c003 	ldrb.w	ip, [r2, r3]
			buffer_quet4[48*SO_BANG_SU_DUNG + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)],
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8000f9e:	4b9a      	ldr	r3, [pc, #616]	@ (8001208 <quetledMT+0x2b4>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	00db      	lsls	r3, r3, #3
 8000fa4:	4413      	add	r3, r2
	MT_Send1(buffer_quet1[48*SO_BANG_SU_DUNG + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)],
 8000fa6:	4a9c      	ldr	r2, [pc, #624]	@ (8001218 <quetledMT+0x2c4>)
 8000fa8:	f812 e003 	ldrb.w	lr, [r2, r3]
			buffer_quet5[48*SO_BANG_SU_DUNG + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)],
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8000fb2:	4b95      	ldr	r3, [pc, #596]	@ (8001208 <quetledMT+0x2b4>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	4413      	add	r3, r2
	MT_Send1(buffer_quet1[48*SO_BANG_SU_DUNG + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)],
 8000fba:	4a98      	ldr	r2, [pc, #608]	@ (800121c <quetledMT+0x2c8>)
 8000fbc:	5cd3      	ldrb	r3, [r2, r3]
			buffer_quet6[48*SO_BANG_SU_DUNG + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)],
 8000fbe:	79fa      	ldrb	r2, [r7, #7]
 8000fc0:	f102 0160 	add.w	r1, r2, #96	@ 0x60
 8000fc4:	4a90      	ldr	r2, [pc, #576]	@ (8001208 <quetledMT+0x2b4>)
 8000fc6:	7812      	ldrb	r2, [r2, #0]
 8000fc8:	00d2      	lsls	r2, r2, #3
 8000fca:	440a      	add	r2, r1
	MT_Send1(buffer_quet1[48*SO_BANG_SU_DUNG + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)],
 8000fcc:	4994      	ldr	r1, [pc, #592]	@ (8001220 <quetledMT+0x2cc>)
 8000fce:	5c8a      	ldrb	r2, [r1, r2]
			buffer_quet7[48*SO_BANG_SU_DUNG + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)],
 8000fd0:	79f9      	ldrb	r1, [r7, #7]
 8000fd2:	f101 0060 	add.w	r0, r1, #96	@ 0x60
 8000fd6:	498c      	ldr	r1, [pc, #560]	@ (8001208 <quetledMT+0x2b4>)
 8000fd8:	7809      	ldrb	r1, [r1, #0]
 8000fda:	00c9      	lsls	r1, r1, #3
 8000fdc:	4401      	add	r1, r0
	MT_Send1(buffer_quet1[48*SO_BANG_SU_DUNG + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)],
 8000fde:	4891      	ldr	r0, [pc, #580]	@ (8001224 <quetledMT+0x2d0>)
 8000fe0:	5c41      	ldrb	r1, [r0, r1]
			buffer_quet8[48*SO_BANG_SU_DUNG + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)]);
 8000fe2:	79f8      	ldrb	r0, [r7, #7]
 8000fe4:	f100 0460 	add.w	r4, r0, #96	@ 0x60
 8000fe8:	4887      	ldr	r0, [pc, #540]	@ (8001208 <quetledMT+0x2b4>)
 8000fea:	7800      	ldrb	r0, [r0, #0]
 8000fec:	00c0      	lsls	r0, r0, #3
 8000fee:	4420      	add	r0, r4
	MT_Send1(buffer_quet1[48*SO_BANG_SU_DUNG + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)],
 8000ff0:	4c8d      	ldr	r4, [pc, #564]	@ (8001228 <quetledMT+0x2d4>)
 8000ff2:	5c20      	ldrb	r0, [r4, r0]
 8000ff4:	9003      	str	r0, [sp, #12]
 8000ff6:	9102      	str	r1, [sp, #8]
 8000ff8:	9201      	str	r2, [sp, #4]
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	4673      	mov	r3, lr
 8000ffe:	4662      	mov	r2, ip
 8001000:	4631      	mov	r1, r6
 8001002:	4628      	mov	r0, r5
 8001004:	f7ff fd52 	bl	8000aac <MT_Send1>
	MT_Send1(buffer_quet1[32*SO_BANG_SU_DUNG + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)],
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800100e:	4b7e      	ldr	r3, [pc, #504]	@ (8001208 <quetledMT+0x2b4>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	4413      	add	r3, r2
 8001016:	4a7d      	ldr	r2, [pc, #500]	@ (800120c <quetledMT+0x2b8>)
 8001018:	5cd5      	ldrb	r5, [r2, r3]
			buffer_quet2[32*SO_BANG_SU_DUNG + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)],
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8001020:	4b79      	ldr	r3, [pc, #484]	@ (8001208 <quetledMT+0x2b4>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	00db      	lsls	r3, r3, #3
 8001026:	4413      	add	r3, r2
	MT_Send1(buffer_quet1[32*SO_BANG_SU_DUNG + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)],
 8001028:	4a79      	ldr	r2, [pc, #484]	@ (8001210 <quetledMT+0x2bc>)
 800102a:	5cd6      	ldrb	r6, [r2, r3]
			buffer_quet3[32*SO_BANG_SU_DUNG + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)],
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8001032:	4b75      	ldr	r3, [pc, #468]	@ (8001208 <quetledMT+0x2b4>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	00db      	lsls	r3, r3, #3
 8001038:	4413      	add	r3, r2
	MT_Send1(buffer_quet1[32*SO_BANG_SU_DUNG + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)],
 800103a:	4a76      	ldr	r2, [pc, #472]	@ (8001214 <quetledMT+0x2c0>)
 800103c:	f812 c003 	ldrb.w	ip, [r2, r3]
			buffer_quet4[32*SO_BANG_SU_DUNG + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)],
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8001046:	4b70      	ldr	r3, [pc, #448]	@ (8001208 <quetledMT+0x2b4>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	4413      	add	r3, r2
	MT_Send1(buffer_quet1[32*SO_BANG_SU_DUNG + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)],
 800104e:	4a72      	ldr	r2, [pc, #456]	@ (8001218 <quetledMT+0x2c4>)
 8001050:	f812 e003 	ldrb.w	lr, [r2, r3]
			buffer_quet5[32*SO_BANG_SU_DUNG + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)],
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800105a:	4b6b      	ldr	r3, [pc, #428]	@ (8001208 <quetledMT+0x2b4>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	00db      	lsls	r3, r3, #3
 8001060:	4413      	add	r3, r2
	MT_Send1(buffer_quet1[32*SO_BANG_SU_DUNG + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)],
 8001062:	4a6e      	ldr	r2, [pc, #440]	@ (800121c <quetledMT+0x2c8>)
 8001064:	5cd3      	ldrb	r3, [r2, r3]
			buffer_quet6[32*SO_BANG_SU_DUNG + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)],
 8001066:	79fa      	ldrb	r2, [r7, #7]
 8001068:	f102 0140 	add.w	r1, r2, #64	@ 0x40
 800106c:	4a66      	ldr	r2, [pc, #408]	@ (8001208 <quetledMT+0x2b4>)
 800106e:	7812      	ldrb	r2, [r2, #0]
 8001070:	00d2      	lsls	r2, r2, #3
 8001072:	440a      	add	r2, r1
	MT_Send1(buffer_quet1[32*SO_BANG_SU_DUNG + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)],
 8001074:	496a      	ldr	r1, [pc, #424]	@ (8001220 <quetledMT+0x2cc>)
 8001076:	5c8a      	ldrb	r2, [r1, r2]
			buffer_quet7[32*SO_BANG_SU_DUNG + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)],
 8001078:	79f9      	ldrb	r1, [r7, #7]
 800107a:	f101 0040 	add.w	r0, r1, #64	@ 0x40
 800107e:	4962      	ldr	r1, [pc, #392]	@ (8001208 <quetledMT+0x2b4>)
 8001080:	7809      	ldrb	r1, [r1, #0]
 8001082:	00c9      	lsls	r1, r1, #3
 8001084:	4401      	add	r1, r0
	MT_Send1(buffer_quet1[32*SO_BANG_SU_DUNG + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)],
 8001086:	4867      	ldr	r0, [pc, #412]	@ (8001224 <quetledMT+0x2d0>)
 8001088:	5c41      	ldrb	r1, [r0, r1]
			buffer_quet8[32*SO_BANG_SU_DUNG + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)]);
 800108a:	79f8      	ldrb	r0, [r7, #7]
 800108c:	f100 0440 	add.w	r4, r0, #64	@ 0x40
 8001090:	485d      	ldr	r0, [pc, #372]	@ (8001208 <quetledMT+0x2b4>)
 8001092:	7800      	ldrb	r0, [r0, #0]
 8001094:	00c0      	lsls	r0, r0, #3
 8001096:	4420      	add	r0, r4
	MT_Send1(buffer_quet1[32*SO_BANG_SU_DUNG + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)],
 8001098:	4c63      	ldr	r4, [pc, #396]	@ (8001228 <quetledMT+0x2d4>)
 800109a:	5c20      	ldrb	r0, [r4, r0]
 800109c:	9003      	str	r0, [sp, #12]
 800109e:	9102      	str	r1, [sp, #8]
 80010a0:	9201      	str	r2, [sp, #4]
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	4673      	mov	r3, lr
 80010a6:	4662      	mov	r2, ip
 80010a8:	4631      	mov	r1, r6
 80010aa:	4628      	mov	r0, r5
 80010ac:	f7ff fcfe 	bl	8000aac <MT_Send1>
	MT_Send1(buffer_quet1[16*SO_BANG_SU_DUNG + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)],
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	f103 0220 	add.w	r2, r3, #32
 80010b6:	4b54      	ldr	r3, [pc, #336]	@ (8001208 <quetledMT+0x2b4>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	00db      	lsls	r3, r3, #3
 80010bc:	4413      	add	r3, r2
 80010be:	4a53      	ldr	r2, [pc, #332]	@ (800120c <quetledMT+0x2b8>)
 80010c0:	5cd5      	ldrb	r5, [r2, r3]
			buffer_quet2[16*SO_BANG_SU_DUNG + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)],
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	f103 0220 	add.w	r2, r3, #32
 80010c8:	4b4f      	ldr	r3, [pc, #316]	@ (8001208 <quetledMT+0x2b4>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	4413      	add	r3, r2
	MT_Send1(buffer_quet1[16*SO_BANG_SU_DUNG + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)],
 80010d0:	4a4f      	ldr	r2, [pc, #316]	@ (8001210 <quetledMT+0x2bc>)
 80010d2:	5cd6      	ldrb	r6, [r2, r3]
			buffer_quet3[16*SO_BANG_SU_DUNG + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)],
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	f103 0220 	add.w	r2, r3, #32
 80010da:	4b4b      	ldr	r3, [pc, #300]	@ (8001208 <quetledMT+0x2b4>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	00db      	lsls	r3, r3, #3
 80010e0:	4413      	add	r3, r2
	MT_Send1(buffer_quet1[16*SO_BANG_SU_DUNG + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)],
 80010e2:	4a4c      	ldr	r2, [pc, #304]	@ (8001214 <quetledMT+0x2c0>)
 80010e4:	f812 c003 	ldrb.w	ip, [r2, r3]
			buffer_quet4[16*SO_BANG_SU_DUNG + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)],
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	f103 0220 	add.w	r2, r3, #32
 80010ee:	4b46      	ldr	r3, [pc, #280]	@ (8001208 <quetledMT+0x2b4>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	00db      	lsls	r3, r3, #3
 80010f4:	4413      	add	r3, r2
	MT_Send1(buffer_quet1[16*SO_BANG_SU_DUNG + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)],
 80010f6:	4a48      	ldr	r2, [pc, #288]	@ (8001218 <quetledMT+0x2c4>)
 80010f8:	f812 e003 	ldrb.w	lr, [r2, r3]
			buffer_quet5[16*SO_BANG_SU_DUNG + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)],
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	f103 0220 	add.w	r2, r3, #32
 8001102:	4b41      	ldr	r3, [pc, #260]	@ (8001208 <quetledMT+0x2b4>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	00db      	lsls	r3, r3, #3
 8001108:	4413      	add	r3, r2
	MT_Send1(buffer_quet1[16*SO_BANG_SU_DUNG + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)],
 800110a:	4a44      	ldr	r2, [pc, #272]	@ (800121c <quetledMT+0x2c8>)
 800110c:	5cd3      	ldrb	r3, [r2, r3]
			buffer_quet6[16*SO_BANG_SU_DUNG + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)],
 800110e:	79fa      	ldrb	r2, [r7, #7]
 8001110:	f102 0120 	add.w	r1, r2, #32
 8001114:	4a3c      	ldr	r2, [pc, #240]	@ (8001208 <quetledMT+0x2b4>)
 8001116:	7812      	ldrb	r2, [r2, #0]
 8001118:	00d2      	lsls	r2, r2, #3
 800111a:	440a      	add	r2, r1
	MT_Send1(buffer_quet1[16*SO_BANG_SU_DUNG + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)],
 800111c:	4940      	ldr	r1, [pc, #256]	@ (8001220 <quetledMT+0x2cc>)
 800111e:	5c8a      	ldrb	r2, [r1, r2]
			buffer_quet7[16*SO_BANG_SU_DUNG + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)],
 8001120:	79f9      	ldrb	r1, [r7, #7]
 8001122:	f101 0020 	add.w	r0, r1, #32
 8001126:	4938      	ldr	r1, [pc, #224]	@ (8001208 <quetledMT+0x2b4>)
 8001128:	7809      	ldrb	r1, [r1, #0]
 800112a:	00c9      	lsls	r1, r1, #3
 800112c:	4401      	add	r1, r0
	MT_Send1(buffer_quet1[16*SO_BANG_SU_DUNG + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)],
 800112e:	483d      	ldr	r0, [pc, #244]	@ (8001224 <quetledMT+0x2d0>)
 8001130:	5c41      	ldrb	r1, [r0, r1]
			buffer_quet8[16*SO_BANG_SU_DUNG + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)]);
 8001132:	79f8      	ldrb	r0, [r7, #7]
 8001134:	f100 0420 	add.w	r4, r0, #32
 8001138:	4833      	ldr	r0, [pc, #204]	@ (8001208 <quetledMT+0x2b4>)
 800113a:	7800      	ldrb	r0, [r0, #0]
 800113c:	00c0      	lsls	r0, r0, #3
 800113e:	4420      	add	r0, r4
	MT_Send1(buffer_quet1[16*SO_BANG_SU_DUNG + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)],
 8001140:	4c39      	ldr	r4, [pc, #228]	@ (8001228 <quetledMT+0x2d4>)
 8001142:	5c20      	ldrb	r0, [r4, r0]
 8001144:	9003      	str	r0, [sp, #12]
 8001146:	9102      	str	r1, [sp, #8]
 8001148:	9201      	str	r2, [sp, #4]
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	4673      	mov	r3, lr
 800114e:	4662      	mov	r2, ip
 8001150:	4631      	mov	r1, r6
 8001152:	4628      	mov	r0, r5
 8001154:	f7ff fcaa 	bl	8000aac <MT_Send1>
	MT_Send1(buffer_quet1[0  + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)],
 8001158:	79fa      	ldrb	r2, [r7, #7]
 800115a:	4b2b      	ldr	r3, [pc, #172]	@ (8001208 <quetledMT+0x2b4>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	4413      	add	r3, r2
 8001162:	4a2a      	ldr	r2, [pc, #168]	@ (800120c <quetledMT+0x2b8>)
 8001164:	5cd5      	ldrb	r5, [r2, r3]
			buffer_quet2[0  + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)],
 8001166:	79fa      	ldrb	r2, [r7, #7]
 8001168:	4b27      	ldr	r3, [pc, #156]	@ (8001208 <quetledMT+0x2b4>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	00db      	lsls	r3, r3, #3
 800116e:	4413      	add	r3, r2
	MT_Send1(buffer_quet1[0  + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)],
 8001170:	4a27      	ldr	r2, [pc, #156]	@ (8001210 <quetledMT+0x2bc>)
 8001172:	5cd6      	ldrb	r6, [r2, r3]
			buffer_quet3[0  + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)],
 8001174:	79fa      	ldrb	r2, [r7, #7]
 8001176:	4b24      	ldr	r3, [pc, #144]	@ (8001208 <quetledMT+0x2b4>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	4413      	add	r3, r2
	MT_Send1(buffer_quet1[0  + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)],
 800117e:	4a25      	ldr	r2, [pc, #148]	@ (8001214 <quetledMT+0x2c0>)
 8001180:	f812 c003 	ldrb.w	ip, [r2, r3]
			buffer_quet4[0  + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)],
 8001184:	79fa      	ldrb	r2, [r7, #7]
 8001186:	4b20      	ldr	r3, [pc, #128]	@ (8001208 <quetledMT+0x2b4>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	4413      	add	r3, r2
	MT_Send1(buffer_quet1[0  + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)],
 800118e:	4a22      	ldr	r2, [pc, #136]	@ (8001218 <quetledMT+0x2c4>)
 8001190:	f812 e003 	ldrb.w	lr, [r2, r3]
			buffer_quet5[0  + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)],
 8001194:	79fa      	ldrb	r2, [r7, #7]
 8001196:	4b1c      	ldr	r3, [pc, #112]	@ (8001208 <quetledMT+0x2b4>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	4413      	add	r3, r2
	MT_Send1(buffer_quet1[0  + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)],
 800119e:	4a1f      	ldr	r2, [pc, #124]	@ (800121c <quetledMT+0x2c8>)
 80011a0:	5cd3      	ldrb	r3, [r2, r3]
			buffer_quet6[0  + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)],
 80011a2:	79f9      	ldrb	r1, [r7, #7]
 80011a4:	4a18      	ldr	r2, [pc, #96]	@ (8001208 <quetledMT+0x2b4>)
 80011a6:	7812      	ldrb	r2, [r2, #0]
 80011a8:	00d2      	lsls	r2, r2, #3
 80011aa:	440a      	add	r2, r1
	MT_Send1(buffer_quet1[0  + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)],
 80011ac:	491c      	ldr	r1, [pc, #112]	@ (8001220 <quetledMT+0x2cc>)
 80011ae:	5c8a      	ldrb	r2, [r1, r2]
			buffer_quet7[0  + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)],
 80011b0:	79f8      	ldrb	r0, [r7, #7]
 80011b2:	4915      	ldr	r1, [pc, #84]	@ (8001208 <quetledMT+0x2b4>)
 80011b4:	7809      	ldrb	r1, [r1, #0]
 80011b6:	00c9      	lsls	r1, r1, #3
 80011b8:	4401      	add	r1, r0
	MT_Send1(buffer_quet1[0  + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)],
 80011ba:	481a      	ldr	r0, [pc, #104]	@ (8001224 <quetledMT+0x2d0>)
 80011bc:	5c41      	ldrb	r1, [r0, r1]
			buffer_quet8[0  + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)]);
 80011be:	79fc      	ldrb	r4, [r7, #7]
 80011c0:	4811      	ldr	r0, [pc, #68]	@ (8001208 <quetledMT+0x2b4>)
 80011c2:	7800      	ldrb	r0, [r0, #0]
 80011c4:	00c0      	lsls	r0, r0, #3
 80011c6:	4420      	add	r0, r4
	MT_Send1(buffer_quet1[0  + i + quetlled*((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8)],
 80011c8:	4c17      	ldr	r4, [pc, #92]	@ (8001228 <quetledMT+0x2d4>)
 80011ca:	5c20      	ldrb	r0, [r4, r0]
 80011cc:	9003      	str	r0, [sp, #12]
 80011ce:	9102      	str	r1, [sp, #8]
 80011d0:	9201      	str	r2, [sp, #4]
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	4673      	mov	r3, lr
 80011d6:	4662      	mov	r2, ip
 80011d8:	4631      	mov	r1, r6
 80011da:	4628      	mov	r0, r5
 80011dc:	f7ff fc66 	bl	8000aac <MT_Send1>
	for(uint8_t i=0;i<((SO_DOT_TREN_HANG*SO_BANG_SU_DUNG)/8);i++)
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	3301      	adds	r3, #1
 80011e4:	71fb      	strb	r3, [r7, #7]
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	2b07      	cmp	r3, #7
 80011ea:	f67f aeb9 	bls.w	8000f60 <quetledMT+0xc>
	}

	HAL_GPIO_WritePin(MT_OE_GPIO_Port, MT_OE_Pin, GPIO_PIN_RESET);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2140      	movs	r1, #64	@ 0x40
 80011f2:	480e      	ldr	r0, [pc, #56]	@ (800122c <quetledMT+0x2d8>)
 80011f4:	f001 fba1 	bl	800293a <HAL_GPIO_WritePin>
	//chot du lieu
	HAL_GPIO_WritePin(MT_LAT_GPIO_Port, MT_LAT_Pin, GPIO_PIN_SET);
 80011f8:	2201      	movs	r2, #1
 80011fa:	2108      	movs	r1, #8
 80011fc:	480b      	ldr	r0, [pc, #44]	@ (800122c <quetledMT+0x2d8>)
 80011fe:	f001 fb9c 	bl	800293a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MT_LAT_GPIO_Port, MT_LAT_Pin, GPIO_PIN_RESET);
 8001202:	2200      	movs	r2, #0
 8001204:	2108      	movs	r1, #8
 8001206:	e013      	b.n	8001230 <quetledMT+0x2dc>
 8001208:	200005f0 	.word	0x200005f0
 800120c:	200001f0 	.word	0x200001f0
 8001210:	20000270 	.word	0x20000270
 8001214:	200002f0 	.word	0x200002f0
 8001218:	20000370 	.word	0x20000370
 800121c:	200003f0 	.word	0x200003f0
 8001220:	20000470 	.word	0x20000470
 8001224:	200004f0 	.word	0x200004f0
 8001228:	20000570 	.word	0x20000570
 800122c:	40010c00 	.word	0x40010c00
 8001230:	4829      	ldr	r0, [pc, #164]	@ (80012d8 <quetledMT+0x384>)
 8001232:	f001 fb82 	bl	800293a <HAL_GPIO_WritePin>

	//tat data di


	//count quet led
	if(quetlled == 0)
 8001236:	4b29      	ldr	r3, [pc, #164]	@ (80012dc <quetledMT+0x388>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d10a      	bne.n	8001254 <quetledMT+0x300>
	{
	HAL_GPIO_WritePin(MT_A_GPIO_Port, MT_A_Pin, GPIO_PIN_RESET);
 800123e:	2200      	movs	r2, #0
 8001240:	2180      	movs	r1, #128	@ 0x80
 8001242:	4825      	ldr	r0, [pc, #148]	@ (80012d8 <quetledMT+0x384>)
 8001244:	f001 fb79 	bl	800293a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MT_B_GPIO_Port, MT_B_Pin, GPIO_PIN_RESET);
 8001248:	2200      	movs	r2, #0
 800124a:	2120      	movs	r1, #32
 800124c:	4822      	ldr	r0, [pc, #136]	@ (80012d8 <quetledMT+0x384>)
 800124e:	f001 fb74 	bl	800293a <HAL_GPIO_WritePin>
 8001252:	e02b      	b.n	80012ac <quetledMT+0x358>
	}
	else if(quetlled == 1)
 8001254:	4b21      	ldr	r3, [pc, #132]	@ (80012dc <quetledMT+0x388>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d10a      	bne.n	8001272 <quetledMT+0x31e>
	{
	HAL_GPIO_WritePin(MT_A_GPIO_Port, MT_A_Pin, GPIO_PIN_SET);
 800125c:	2201      	movs	r2, #1
 800125e:	2180      	movs	r1, #128	@ 0x80
 8001260:	481d      	ldr	r0, [pc, #116]	@ (80012d8 <quetledMT+0x384>)
 8001262:	f001 fb6a 	bl	800293a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MT_B_GPIO_Port, MT_B_Pin, GPIO_PIN_RESET);
 8001266:	2200      	movs	r2, #0
 8001268:	2120      	movs	r1, #32
 800126a:	481b      	ldr	r0, [pc, #108]	@ (80012d8 <quetledMT+0x384>)
 800126c:	f001 fb65 	bl	800293a <HAL_GPIO_WritePin>
 8001270:	e01c      	b.n	80012ac <quetledMT+0x358>
	}
	else if(quetlled == 2)
 8001272:	4b1a      	ldr	r3, [pc, #104]	@ (80012dc <quetledMT+0x388>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b02      	cmp	r3, #2
 8001278:	d10a      	bne.n	8001290 <quetledMT+0x33c>
	{
	HAL_GPIO_WritePin(MT_A_GPIO_Port, MT_A_Pin, GPIO_PIN_RESET);
 800127a:	2200      	movs	r2, #0
 800127c:	2180      	movs	r1, #128	@ 0x80
 800127e:	4816      	ldr	r0, [pc, #88]	@ (80012d8 <quetledMT+0x384>)
 8001280:	f001 fb5b 	bl	800293a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MT_B_GPIO_Port, MT_B_Pin, GPIO_PIN_SET);
 8001284:	2201      	movs	r2, #1
 8001286:	2120      	movs	r1, #32
 8001288:	4813      	ldr	r0, [pc, #76]	@ (80012d8 <quetledMT+0x384>)
 800128a:	f001 fb56 	bl	800293a <HAL_GPIO_WritePin>
 800128e:	e00d      	b.n	80012ac <quetledMT+0x358>
	}
	else if(quetlled == 3)
 8001290:	4b12      	ldr	r3, [pc, #72]	@ (80012dc <quetledMT+0x388>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b03      	cmp	r3, #3
 8001296:	d109      	bne.n	80012ac <quetledMT+0x358>
	{
	HAL_GPIO_WritePin(MT_A_GPIO_Port, MT_A_Pin, GPIO_PIN_SET);
 8001298:	2201      	movs	r2, #1
 800129a:	2180      	movs	r1, #128	@ 0x80
 800129c:	480e      	ldr	r0, [pc, #56]	@ (80012d8 <quetledMT+0x384>)
 800129e:	f001 fb4c 	bl	800293a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MT_B_GPIO_Port, MT_B_Pin, GPIO_PIN_SET);
 80012a2:	2201      	movs	r2, #1
 80012a4:	2120      	movs	r1, #32
 80012a6:	480c      	ldr	r0, [pc, #48]	@ (80012d8 <quetledMT+0x384>)
 80012a8:	f001 fb47 	bl	800293a <HAL_GPIO_WritePin>
	}

	quetlled ++;
 80012ac:	4b0b      	ldr	r3, [pc, #44]	@ (80012dc <quetledMT+0x388>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	3301      	adds	r3, #1
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	4b09      	ldr	r3, [pc, #36]	@ (80012dc <quetledMT+0x388>)
 80012b6:	701a      	strb	r2, [r3, #0]
	if(quetlled > 3) quetlled = 0;
 80012b8:	4b08      	ldr	r3, [pc, #32]	@ (80012dc <quetledMT+0x388>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b03      	cmp	r3, #3
 80012be:	d902      	bls.n	80012c6 <quetledMT+0x372>
 80012c0:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <quetledMT+0x388>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(MT_OE_GPIO_Port, MT_OE_Pin, GPIO_PIN_SET);
 80012c6:	2201      	movs	r2, #1
 80012c8:	2140      	movs	r1, #64	@ 0x40
 80012ca:	4803      	ldr	r0, [pc, #12]	@ (80012d8 <quetledMT+0x384>)
 80012cc:	f001 fb35 	bl	800293a <HAL_GPIO_WritePin>
//	HAL_Delay(2);
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012d8:	40010c00 	.word	0x40010c00
 80012dc:	200005f0 	.word	0x200005f0

080012e0 <setpixel>:

void setpixel(uint16_t x,uint16_t y,uint8_t data)// x sẽ từ 0 -> 64 , y sẽ từ 0 -> 128
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	80fb      	strh	r3, [r7, #6]
 80012ea:	460b      	mov	r3, r1
 80012ec:	80bb      	strh	r3, [r7, #4]
 80012ee:	4613      	mov	r3, r2
 80012f0:	70fb      	strb	r3, [r7, #3]
	uint16_t convertx,converty,offsetx,offsety;

	convertx = x/8;//chia lấy nguyên sẽ ra vị trí
 80012f2:	88fb      	ldrh	r3, [r7, #6]
 80012f4:	08db      	lsrs	r3, r3, #3
 80012f6:	81fb      	strh	r3, [r7, #14]
	offsetx = x-convertx*8;//lấy phần dư sẽ ra vị trí cần set điểm
 80012f8:	89fb      	ldrh	r3, [r7, #14]
 80012fa:	00db      	lsls	r3, r3, #3
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	88fa      	ldrh	r2, [r7, #6]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	81bb      	strh	r3, [r7, #12]

	converty = y/SO_DOT_TREN_COT;//chia dư cho 16 để lấy ra xem là mảng nào
 8001304:	88bb      	ldrh	r3, [r7, #4]
 8001306:	091b      	lsrs	r3, r3, #4
 8001308:	817b      	strh	r3, [r7, #10]
	offsety = y - converty*SO_DOT_TREN_COT;
 800130a:	897b      	ldrh	r3, [r7, #10]
 800130c:	011b      	lsls	r3, r3, #4
 800130e:	b29b      	uxth	r3, r3
 8001310:	88ba      	ldrh	r2, [r7, #4]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	813b      	strh	r3, [r7, #8]

	if(data == 1)//nếu data = 1 thì dùng phép |
 8001316:	78fb      	ldrb	r3, [r7, #3]
 8001318:	2b01      	cmp	r3, #1
 800131a:	f040 80d9 	bne.w	80014d0 <setpixel+0x1f0>
	{
		if(converty == 0)// nếu là 0 thì là của buffer số 1
 800131e:	897b      	ldrh	r3, [r7, #10]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d117      	bne.n	8001354 <setpixel+0x74>
		{
			buffer_quet1[offsety*SO_BYTE_TREN_HANG + convertx] |= (1<<(7 - offsetx));
 8001324:	893b      	ldrh	r3, [r7, #8]
 8001326:	00da      	lsls	r2, r3, #3
 8001328:	89fb      	ldrh	r3, [r7, #14]
 800132a:	4413      	add	r3, r2
 800132c:	4a94      	ldr	r2, [pc, #592]	@ (8001580 <setpixel+0x2a0>)
 800132e:	5cd3      	ldrb	r3, [r2, r3]
 8001330:	b25a      	sxtb	r2, r3
 8001332:	89bb      	ldrh	r3, [r7, #12]
 8001334:	f1c3 0307 	rsb	r3, r3, #7
 8001338:	2101      	movs	r1, #1
 800133a:	fa01 f303 	lsl.w	r3, r1, r3
 800133e:	b25b      	sxtb	r3, r3
 8001340:	4313      	orrs	r3, r2
 8001342:	b259      	sxtb	r1, r3
 8001344:	893b      	ldrh	r3, [r7, #8]
 8001346:	00da      	lsls	r2, r3, #3
 8001348:	89fb      	ldrh	r3, [r7, #14]
 800134a:	4413      	add	r3, r2
 800134c:	b2c9      	uxtb	r1, r1
 800134e:	4a8c      	ldr	r2, [pc, #560]	@ (8001580 <setpixel+0x2a0>)
 8001350:	54d1      	strb	r1, [r2, r3]
		{
			buffer_quet8[offsety*SO_BYTE_TREN_HANG + convertx] &= (~(1<<(7 - offsetx)));
		}
	}

}
 8001352:	e1b5      	b.n	80016c0 <setpixel+0x3e0>
		else if(converty == 1)// nếu là 1 thì là của buffer số 2
 8001354:	897b      	ldrh	r3, [r7, #10]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d117      	bne.n	800138a <setpixel+0xaa>
			buffer_quet2[offsety*SO_BYTE_TREN_HANG + convertx] |= (1<<(7 - offsetx));
 800135a:	893b      	ldrh	r3, [r7, #8]
 800135c:	00da      	lsls	r2, r3, #3
 800135e:	89fb      	ldrh	r3, [r7, #14]
 8001360:	4413      	add	r3, r2
 8001362:	4a88      	ldr	r2, [pc, #544]	@ (8001584 <setpixel+0x2a4>)
 8001364:	5cd3      	ldrb	r3, [r2, r3]
 8001366:	b25a      	sxtb	r2, r3
 8001368:	89bb      	ldrh	r3, [r7, #12]
 800136a:	f1c3 0307 	rsb	r3, r3, #7
 800136e:	2101      	movs	r1, #1
 8001370:	fa01 f303 	lsl.w	r3, r1, r3
 8001374:	b25b      	sxtb	r3, r3
 8001376:	4313      	orrs	r3, r2
 8001378:	b259      	sxtb	r1, r3
 800137a:	893b      	ldrh	r3, [r7, #8]
 800137c:	00da      	lsls	r2, r3, #3
 800137e:	89fb      	ldrh	r3, [r7, #14]
 8001380:	4413      	add	r3, r2
 8001382:	b2c9      	uxtb	r1, r1
 8001384:	4a7f      	ldr	r2, [pc, #508]	@ (8001584 <setpixel+0x2a4>)
 8001386:	54d1      	strb	r1, [r2, r3]
}
 8001388:	e19a      	b.n	80016c0 <setpixel+0x3e0>
		else if(converty == 2)// nếu là 2 thì là của buffer số 3
 800138a:	897b      	ldrh	r3, [r7, #10]
 800138c:	2b02      	cmp	r3, #2
 800138e:	d117      	bne.n	80013c0 <setpixel+0xe0>
			buffer_quet3[offsety*SO_BYTE_TREN_HANG + convertx] |= (1<<(7 - offsetx));
 8001390:	893b      	ldrh	r3, [r7, #8]
 8001392:	00da      	lsls	r2, r3, #3
 8001394:	89fb      	ldrh	r3, [r7, #14]
 8001396:	4413      	add	r3, r2
 8001398:	4a7b      	ldr	r2, [pc, #492]	@ (8001588 <setpixel+0x2a8>)
 800139a:	5cd3      	ldrb	r3, [r2, r3]
 800139c:	b25a      	sxtb	r2, r3
 800139e:	89bb      	ldrh	r3, [r7, #12]
 80013a0:	f1c3 0307 	rsb	r3, r3, #7
 80013a4:	2101      	movs	r1, #1
 80013a6:	fa01 f303 	lsl.w	r3, r1, r3
 80013aa:	b25b      	sxtb	r3, r3
 80013ac:	4313      	orrs	r3, r2
 80013ae:	b259      	sxtb	r1, r3
 80013b0:	893b      	ldrh	r3, [r7, #8]
 80013b2:	00da      	lsls	r2, r3, #3
 80013b4:	89fb      	ldrh	r3, [r7, #14]
 80013b6:	4413      	add	r3, r2
 80013b8:	b2c9      	uxtb	r1, r1
 80013ba:	4a73      	ldr	r2, [pc, #460]	@ (8001588 <setpixel+0x2a8>)
 80013bc:	54d1      	strb	r1, [r2, r3]
}
 80013be:	e17f      	b.n	80016c0 <setpixel+0x3e0>
		else if(converty == 3)// nếu là 3 thì là của buffer số 4
 80013c0:	897b      	ldrh	r3, [r7, #10]
 80013c2:	2b03      	cmp	r3, #3
 80013c4:	d117      	bne.n	80013f6 <setpixel+0x116>
			buffer_quet4[offsety*SO_BYTE_TREN_HANG + convertx] |= (1<<(7 - offsetx));
 80013c6:	893b      	ldrh	r3, [r7, #8]
 80013c8:	00da      	lsls	r2, r3, #3
 80013ca:	89fb      	ldrh	r3, [r7, #14]
 80013cc:	4413      	add	r3, r2
 80013ce:	4a6f      	ldr	r2, [pc, #444]	@ (800158c <setpixel+0x2ac>)
 80013d0:	5cd3      	ldrb	r3, [r2, r3]
 80013d2:	b25a      	sxtb	r2, r3
 80013d4:	89bb      	ldrh	r3, [r7, #12]
 80013d6:	f1c3 0307 	rsb	r3, r3, #7
 80013da:	2101      	movs	r1, #1
 80013dc:	fa01 f303 	lsl.w	r3, r1, r3
 80013e0:	b25b      	sxtb	r3, r3
 80013e2:	4313      	orrs	r3, r2
 80013e4:	b259      	sxtb	r1, r3
 80013e6:	893b      	ldrh	r3, [r7, #8]
 80013e8:	00da      	lsls	r2, r3, #3
 80013ea:	89fb      	ldrh	r3, [r7, #14]
 80013ec:	4413      	add	r3, r2
 80013ee:	b2c9      	uxtb	r1, r1
 80013f0:	4a66      	ldr	r2, [pc, #408]	@ (800158c <setpixel+0x2ac>)
 80013f2:	54d1      	strb	r1, [r2, r3]
}
 80013f4:	e164      	b.n	80016c0 <setpixel+0x3e0>
		else if(converty == 4)// nếu là 4 thì là của buffer số 5
 80013f6:	897b      	ldrh	r3, [r7, #10]
 80013f8:	2b04      	cmp	r3, #4
 80013fa:	d117      	bne.n	800142c <setpixel+0x14c>
			buffer_quet5[offsety*SO_BYTE_TREN_HANG + convertx] |= (1<<(7 - offsetx));
 80013fc:	893b      	ldrh	r3, [r7, #8]
 80013fe:	00da      	lsls	r2, r3, #3
 8001400:	89fb      	ldrh	r3, [r7, #14]
 8001402:	4413      	add	r3, r2
 8001404:	4a62      	ldr	r2, [pc, #392]	@ (8001590 <setpixel+0x2b0>)
 8001406:	5cd3      	ldrb	r3, [r2, r3]
 8001408:	b25a      	sxtb	r2, r3
 800140a:	89bb      	ldrh	r3, [r7, #12]
 800140c:	f1c3 0307 	rsb	r3, r3, #7
 8001410:	2101      	movs	r1, #1
 8001412:	fa01 f303 	lsl.w	r3, r1, r3
 8001416:	b25b      	sxtb	r3, r3
 8001418:	4313      	orrs	r3, r2
 800141a:	b259      	sxtb	r1, r3
 800141c:	893b      	ldrh	r3, [r7, #8]
 800141e:	00da      	lsls	r2, r3, #3
 8001420:	89fb      	ldrh	r3, [r7, #14]
 8001422:	4413      	add	r3, r2
 8001424:	b2c9      	uxtb	r1, r1
 8001426:	4a5a      	ldr	r2, [pc, #360]	@ (8001590 <setpixel+0x2b0>)
 8001428:	54d1      	strb	r1, [r2, r3]
}
 800142a:	e149      	b.n	80016c0 <setpixel+0x3e0>
		else if(converty == 5)// nếu là 5 thì là của buffer số 6
 800142c:	897b      	ldrh	r3, [r7, #10]
 800142e:	2b05      	cmp	r3, #5
 8001430:	d117      	bne.n	8001462 <setpixel+0x182>
			buffer_quet6[offsety*SO_BYTE_TREN_HANG + convertx] |= (1<<(7 - offsetx));
 8001432:	893b      	ldrh	r3, [r7, #8]
 8001434:	00da      	lsls	r2, r3, #3
 8001436:	89fb      	ldrh	r3, [r7, #14]
 8001438:	4413      	add	r3, r2
 800143a:	4a56      	ldr	r2, [pc, #344]	@ (8001594 <setpixel+0x2b4>)
 800143c:	5cd3      	ldrb	r3, [r2, r3]
 800143e:	b25a      	sxtb	r2, r3
 8001440:	89bb      	ldrh	r3, [r7, #12]
 8001442:	f1c3 0307 	rsb	r3, r3, #7
 8001446:	2101      	movs	r1, #1
 8001448:	fa01 f303 	lsl.w	r3, r1, r3
 800144c:	b25b      	sxtb	r3, r3
 800144e:	4313      	orrs	r3, r2
 8001450:	b259      	sxtb	r1, r3
 8001452:	893b      	ldrh	r3, [r7, #8]
 8001454:	00da      	lsls	r2, r3, #3
 8001456:	89fb      	ldrh	r3, [r7, #14]
 8001458:	4413      	add	r3, r2
 800145a:	b2c9      	uxtb	r1, r1
 800145c:	4a4d      	ldr	r2, [pc, #308]	@ (8001594 <setpixel+0x2b4>)
 800145e:	54d1      	strb	r1, [r2, r3]
}
 8001460:	e12e      	b.n	80016c0 <setpixel+0x3e0>
		else if(converty == 6)// nếu là 6 thì là của buffer số 7
 8001462:	897b      	ldrh	r3, [r7, #10]
 8001464:	2b06      	cmp	r3, #6
 8001466:	d117      	bne.n	8001498 <setpixel+0x1b8>
			buffer_quet7[offsety*SO_BYTE_TREN_HANG + convertx] |= (1<<(7 - offsetx));
 8001468:	893b      	ldrh	r3, [r7, #8]
 800146a:	00da      	lsls	r2, r3, #3
 800146c:	89fb      	ldrh	r3, [r7, #14]
 800146e:	4413      	add	r3, r2
 8001470:	4a49      	ldr	r2, [pc, #292]	@ (8001598 <setpixel+0x2b8>)
 8001472:	5cd3      	ldrb	r3, [r2, r3]
 8001474:	b25a      	sxtb	r2, r3
 8001476:	89bb      	ldrh	r3, [r7, #12]
 8001478:	f1c3 0307 	rsb	r3, r3, #7
 800147c:	2101      	movs	r1, #1
 800147e:	fa01 f303 	lsl.w	r3, r1, r3
 8001482:	b25b      	sxtb	r3, r3
 8001484:	4313      	orrs	r3, r2
 8001486:	b259      	sxtb	r1, r3
 8001488:	893b      	ldrh	r3, [r7, #8]
 800148a:	00da      	lsls	r2, r3, #3
 800148c:	89fb      	ldrh	r3, [r7, #14]
 800148e:	4413      	add	r3, r2
 8001490:	b2c9      	uxtb	r1, r1
 8001492:	4a41      	ldr	r2, [pc, #260]	@ (8001598 <setpixel+0x2b8>)
 8001494:	54d1      	strb	r1, [r2, r3]
}
 8001496:	e113      	b.n	80016c0 <setpixel+0x3e0>
		else if(converty == 7)// nếu là 7 thì là của buffer số 8
 8001498:	897b      	ldrh	r3, [r7, #10]
 800149a:	2b07      	cmp	r3, #7
 800149c:	f040 8110 	bne.w	80016c0 <setpixel+0x3e0>
			buffer_quet8[offsety*SO_BYTE_TREN_HANG + convertx] |= (1<<(7 - offsetx));
 80014a0:	893b      	ldrh	r3, [r7, #8]
 80014a2:	00da      	lsls	r2, r3, #3
 80014a4:	89fb      	ldrh	r3, [r7, #14]
 80014a6:	4413      	add	r3, r2
 80014a8:	4a3c      	ldr	r2, [pc, #240]	@ (800159c <setpixel+0x2bc>)
 80014aa:	5cd3      	ldrb	r3, [r2, r3]
 80014ac:	b25a      	sxtb	r2, r3
 80014ae:	89bb      	ldrh	r3, [r7, #12]
 80014b0:	f1c3 0307 	rsb	r3, r3, #7
 80014b4:	2101      	movs	r1, #1
 80014b6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ba:	b25b      	sxtb	r3, r3
 80014bc:	4313      	orrs	r3, r2
 80014be:	b259      	sxtb	r1, r3
 80014c0:	893b      	ldrh	r3, [r7, #8]
 80014c2:	00da      	lsls	r2, r3, #3
 80014c4:	89fb      	ldrh	r3, [r7, #14]
 80014c6:	4413      	add	r3, r2
 80014c8:	b2c9      	uxtb	r1, r1
 80014ca:	4a34      	ldr	r2, [pc, #208]	@ (800159c <setpixel+0x2bc>)
 80014cc:	54d1      	strb	r1, [r2, r3]
}
 80014ce:	e0f7      	b.n	80016c0 <setpixel+0x3e0>
		if(converty == 0)// nếu là 0 thì là của buffer số 1
 80014d0:	897b      	ldrh	r3, [r7, #10]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d119      	bne.n	800150a <setpixel+0x22a>
			buffer_quet1[offsety*SO_BYTE_TREN_HANG + convertx] &= (~(1<<(7 - offsetx)));
 80014d6:	893b      	ldrh	r3, [r7, #8]
 80014d8:	00da      	lsls	r2, r3, #3
 80014da:	89fb      	ldrh	r3, [r7, #14]
 80014dc:	4413      	add	r3, r2
 80014de:	4a28      	ldr	r2, [pc, #160]	@ (8001580 <setpixel+0x2a0>)
 80014e0:	5cd3      	ldrb	r3, [r2, r3]
 80014e2:	b25a      	sxtb	r2, r3
 80014e4:	89bb      	ldrh	r3, [r7, #12]
 80014e6:	f1c3 0307 	rsb	r3, r3, #7
 80014ea:	2101      	movs	r1, #1
 80014ec:	fa01 f303 	lsl.w	r3, r1, r3
 80014f0:	b25b      	sxtb	r3, r3
 80014f2:	43db      	mvns	r3, r3
 80014f4:	b25b      	sxtb	r3, r3
 80014f6:	4013      	ands	r3, r2
 80014f8:	b259      	sxtb	r1, r3
 80014fa:	893b      	ldrh	r3, [r7, #8]
 80014fc:	00da      	lsls	r2, r3, #3
 80014fe:	89fb      	ldrh	r3, [r7, #14]
 8001500:	4413      	add	r3, r2
 8001502:	b2c9      	uxtb	r1, r1
 8001504:	4a1e      	ldr	r2, [pc, #120]	@ (8001580 <setpixel+0x2a0>)
 8001506:	54d1      	strb	r1, [r2, r3]
}
 8001508:	e0da      	b.n	80016c0 <setpixel+0x3e0>
		else if(converty == 1)// nếu là 1 thì là của buffer số 2
 800150a:	897b      	ldrh	r3, [r7, #10]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d119      	bne.n	8001544 <setpixel+0x264>
			buffer_quet2[offsety*SO_BYTE_TREN_HANG + convertx] &= (~(1<<(7 - offsetx)));
 8001510:	893b      	ldrh	r3, [r7, #8]
 8001512:	00da      	lsls	r2, r3, #3
 8001514:	89fb      	ldrh	r3, [r7, #14]
 8001516:	4413      	add	r3, r2
 8001518:	4a1a      	ldr	r2, [pc, #104]	@ (8001584 <setpixel+0x2a4>)
 800151a:	5cd3      	ldrb	r3, [r2, r3]
 800151c:	b25a      	sxtb	r2, r3
 800151e:	89bb      	ldrh	r3, [r7, #12]
 8001520:	f1c3 0307 	rsb	r3, r3, #7
 8001524:	2101      	movs	r1, #1
 8001526:	fa01 f303 	lsl.w	r3, r1, r3
 800152a:	b25b      	sxtb	r3, r3
 800152c:	43db      	mvns	r3, r3
 800152e:	b25b      	sxtb	r3, r3
 8001530:	4013      	ands	r3, r2
 8001532:	b259      	sxtb	r1, r3
 8001534:	893b      	ldrh	r3, [r7, #8]
 8001536:	00da      	lsls	r2, r3, #3
 8001538:	89fb      	ldrh	r3, [r7, #14]
 800153a:	4413      	add	r3, r2
 800153c:	b2c9      	uxtb	r1, r1
 800153e:	4a11      	ldr	r2, [pc, #68]	@ (8001584 <setpixel+0x2a4>)
 8001540:	54d1      	strb	r1, [r2, r3]
}
 8001542:	e0bd      	b.n	80016c0 <setpixel+0x3e0>
		else if(converty == 2)// nếu là 2 thì là của buffer số 3
 8001544:	897b      	ldrh	r3, [r7, #10]
 8001546:	2b02      	cmp	r3, #2
 8001548:	d12a      	bne.n	80015a0 <setpixel+0x2c0>
			buffer_quet3[offsety*SO_BYTE_TREN_HANG + convertx] &= (~(1<<(7 - offsetx)));
 800154a:	893b      	ldrh	r3, [r7, #8]
 800154c:	00da      	lsls	r2, r3, #3
 800154e:	89fb      	ldrh	r3, [r7, #14]
 8001550:	4413      	add	r3, r2
 8001552:	4a0d      	ldr	r2, [pc, #52]	@ (8001588 <setpixel+0x2a8>)
 8001554:	5cd3      	ldrb	r3, [r2, r3]
 8001556:	b25a      	sxtb	r2, r3
 8001558:	89bb      	ldrh	r3, [r7, #12]
 800155a:	f1c3 0307 	rsb	r3, r3, #7
 800155e:	2101      	movs	r1, #1
 8001560:	fa01 f303 	lsl.w	r3, r1, r3
 8001564:	b25b      	sxtb	r3, r3
 8001566:	43db      	mvns	r3, r3
 8001568:	b25b      	sxtb	r3, r3
 800156a:	4013      	ands	r3, r2
 800156c:	b259      	sxtb	r1, r3
 800156e:	893b      	ldrh	r3, [r7, #8]
 8001570:	00da      	lsls	r2, r3, #3
 8001572:	89fb      	ldrh	r3, [r7, #14]
 8001574:	4413      	add	r3, r2
 8001576:	b2c9      	uxtb	r1, r1
 8001578:	4a03      	ldr	r2, [pc, #12]	@ (8001588 <setpixel+0x2a8>)
 800157a:	54d1      	strb	r1, [r2, r3]
}
 800157c:	e0a0      	b.n	80016c0 <setpixel+0x3e0>
 800157e:	bf00      	nop
 8001580:	200001f0 	.word	0x200001f0
 8001584:	20000270 	.word	0x20000270
 8001588:	200002f0 	.word	0x200002f0
 800158c:	20000370 	.word	0x20000370
 8001590:	200003f0 	.word	0x200003f0
 8001594:	20000470 	.word	0x20000470
 8001598:	200004f0 	.word	0x200004f0
 800159c:	20000570 	.word	0x20000570
		else if(converty == 3)// nếu là 3 thì là của buffer số 4
 80015a0:	897b      	ldrh	r3, [r7, #10]
 80015a2:	2b03      	cmp	r3, #3
 80015a4:	d119      	bne.n	80015da <setpixel+0x2fa>
			buffer_quet4[offsety*SO_BYTE_TREN_HANG + convertx] &= (~(1<<(7 - offsetx)));
 80015a6:	893b      	ldrh	r3, [r7, #8]
 80015a8:	00da      	lsls	r2, r3, #3
 80015aa:	89fb      	ldrh	r3, [r7, #14]
 80015ac:	4413      	add	r3, r2
 80015ae:	4a47      	ldr	r2, [pc, #284]	@ (80016cc <setpixel+0x3ec>)
 80015b0:	5cd3      	ldrb	r3, [r2, r3]
 80015b2:	b25a      	sxtb	r2, r3
 80015b4:	89bb      	ldrh	r3, [r7, #12]
 80015b6:	f1c3 0307 	rsb	r3, r3, #7
 80015ba:	2101      	movs	r1, #1
 80015bc:	fa01 f303 	lsl.w	r3, r1, r3
 80015c0:	b25b      	sxtb	r3, r3
 80015c2:	43db      	mvns	r3, r3
 80015c4:	b25b      	sxtb	r3, r3
 80015c6:	4013      	ands	r3, r2
 80015c8:	b259      	sxtb	r1, r3
 80015ca:	893b      	ldrh	r3, [r7, #8]
 80015cc:	00da      	lsls	r2, r3, #3
 80015ce:	89fb      	ldrh	r3, [r7, #14]
 80015d0:	4413      	add	r3, r2
 80015d2:	b2c9      	uxtb	r1, r1
 80015d4:	4a3d      	ldr	r2, [pc, #244]	@ (80016cc <setpixel+0x3ec>)
 80015d6:	54d1      	strb	r1, [r2, r3]
}
 80015d8:	e072      	b.n	80016c0 <setpixel+0x3e0>
		else if(converty == 4)// nếu là 4 thì là của buffer số 5
 80015da:	897b      	ldrh	r3, [r7, #10]
 80015dc:	2b04      	cmp	r3, #4
 80015de:	d119      	bne.n	8001614 <setpixel+0x334>
			buffer_quet5[offsety*SO_BYTE_TREN_HANG + convertx] &= (~(1<<(7 - offsetx)));
 80015e0:	893b      	ldrh	r3, [r7, #8]
 80015e2:	00da      	lsls	r2, r3, #3
 80015e4:	89fb      	ldrh	r3, [r7, #14]
 80015e6:	4413      	add	r3, r2
 80015e8:	4a39      	ldr	r2, [pc, #228]	@ (80016d0 <setpixel+0x3f0>)
 80015ea:	5cd3      	ldrb	r3, [r2, r3]
 80015ec:	b25a      	sxtb	r2, r3
 80015ee:	89bb      	ldrh	r3, [r7, #12]
 80015f0:	f1c3 0307 	rsb	r3, r3, #7
 80015f4:	2101      	movs	r1, #1
 80015f6:	fa01 f303 	lsl.w	r3, r1, r3
 80015fa:	b25b      	sxtb	r3, r3
 80015fc:	43db      	mvns	r3, r3
 80015fe:	b25b      	sxtb	r3, r3
 8001600:	4013      	ands	r3, r2
 8001602:	b259      	sxtb	r1, r3
 8001604:	893b      	ldrh	r3, [r7, #8]
 8001606:	00da      	lsls	r2, r3, #3
 8001608:	89fb      	ldrh	r3, [r7, #14]
 800160a:	4413      	add	r3, r2
 800160c:	b2c9      	uxtb	r1, r1
 800160e:	4a30      	ldr	r2, [pc, #192]	@ (80016d0 <setpixel+0x3f0>)
 8001610:	54d1      	strb	r1, [r2, r3]
}
 8001612:	e055      	b.n	80016c0 <setpixel+0x3e0>
		else if(converty == 5)// nếu là 5 thì là của buffer số 6
 8001614:	897b      	ldrh	r3, [r7, #10]
 8001616:	2b05      	cmp	r3, #5
 8001618:	d119      	bne.n	800164e <setpixel+0x36e>
			buffer_quet6[offsety*SO_BYTE_TREN_HANG + convertx] &= (~(1<<(7 - offsetx)));
 800161a:	893b      	ldrh	r3, [r7, #8]
 800161c:	00da      	lsls	r2, r3, #3
 800161e:	89fb      	ldrh	r3, [r7, #14]
 8001620:	4413      	add	r3, r2
 8001622:	4a2c      	ldr	r2, [pc, #176]	@ (80016d4 <setpixel+0x3f4>)
 8001624:	5cd3      	ldrb	r3, [r2, r3]
 8001626:	b25a      	sxtb	r2, r3
 8001628:	89bb      	ldrh	r3, [r7, #12]
 800162a:	f1c3 0307 	rsb	r3, r3, #7
 800162e:	2101      	movs	r1, #1
 8001630:	fa01 f303 	lsl.w	r3, r1, r3
 8001634:	b25b      	sxtb	r3, r3
 8001636:	43db      	mvns	r3, r3
 8001638:	b25b      	sxtb	r3, r3
 800163a:	4013      	ands	r3, r2
 800163c:	b259      	sxtb	r1, r3
 800163e:	893b      	ldrh	r3, [r7, #8]
 8001640:	00da      	lsls	r2, r3, #3
 8001642:	89fb      	ldrh	r3, [r7, #14]
 8001644:	4413      	add	r3, r2
 8001646:	b2c9      	uxtb	r1, r1
 8001648:	4a22      	ldr	r2, [pc, #136]	@ (80016d4 <setpixel+0x3f4>)
 800164a:	54d1      	strb	r1, [r2, r3]
}
 800164c:	e038      	b.n	80016c0 <setpixel+0x3e0>
		else if(converty == 6)// nếu là 6 thì là của buffer số 7
 800164e:	897b      	ldrh	r3, [r7, #10]
 8001650:	2b06      	cmp	r3, #6
 8001652:	d119      	bne.n	8001688 <setpixel+0x3a8>
			buffer_quet7[offsety*SO_BYTE_TREN_HANG + convertx] &= (~(1<<(7 - offsetx)));
 8001654:	893b      	ldrh	r3, [r7, #8]
 8001656:	00da      	lsls	r2, r3, #3
 8001658:	89fb      	ldrh	r3, [r7, #14]
 800165a:	4413      	add	r3, r2
 800165c:	4a1e      	ldr	r2, [pc, #120]	@ (80016d8 <setpixel+0x3f8>)
 800165e:	5cd3      	ldrb	r3, [r2, r3]
 8001660:	b25a      	sxtb	r2, r3
 8001662:	89bb      	ldrh	r3, [r7, #12]
 8001664:	f1c3 0307 	rsb	r3, r3, #7
 8001668:	2101      	movs	r1, #1
 800166a:	fa01 f303 	lsl.w	r3, r1, r3
 800166e:	b25b      	sxtb	r3, r3
 8001670:	43db      	mvns	r3, r3
 8001672:	b25b      	sxtb	r3, r3
 8001674:	4013      	ands	r3, r2
 8001676:	b259      	sxtb	r1, r3
 8001678:	893b      	ldrh	r3, [r7, #8]
 800167a:	00da      	lsls	r2, r3, #3
 800167c:	89fb      	ldrh	r3, [r7, #14]
 800167e:	4413      	add	r3, r2
 8001680:	b2c9      	uxtb	r1, r1
 8001682:	4a15      	ldr	r2, [pc, #84]	@ (80016d8 <setpixel+0x3f8>)
 8001684:	54d1      	strb	r1, [r2, r3]
}
 8001686:	e01b      	b.n	80016c0 <setpixel+0x3e0>
		else if(converty == 7)// nếu là 7 thì là của buffer số 8
 8001688:	897b      	ldrh	r3, [r7, #10]
 800168a:	2b07      	cmp	r3, #7
 800168c:	d118      	bne.n	80016c0 <setpixel+0x3e0>
			buffer_quet8[offsety*SO_BYTE_TREN_HANG + convertx] &= (~(1<<(7 - offsetx)));
 800168e:	893b      	ldrh	r3, [r7, #8]
 8001690:	00da      	lsls	r2, r3, #3
 8001692:	89fb      	ldrh	r3, [r7, #14]
 8001694:	4413      	add	r3, r2
 8001696:	4a11      	ldr	r2, [pc, #68]	@ (80016dc <setpixel+0x3fc>)
 8001698:	5cd3      	ldrb	r3, [r2, r3]
 800169a:	b25a      	sxtb	r2, r3
 800169c:	89bb      	ldrh	r3, [r7, #12]
 800169e:	f1c3 0307 	rsb	r3, r3, #7
 80016a2:	2101      	movs	r1, #1
 80016a4:	fa01 f303 	lsl.w	r3, r1, r3
 80016a8:	b25b      	sxtb	r3, r3
 80016aa:	43db      	mvns	r3, r3
 80016ac:	b25b      	sxtb	r3, r3
 80016ae:	4013      	ands	r3, r2
 80016b0:	b259      	sxtb	r1, r3
 80016b2:	893b      	ldrh	r3, [r7, #8]
 80016b4:	00da      	lsls	r2, r3, #3
 80016b6:	89fb      	ldrh	r3, [r7, #14]
 80016b8:	4413      	add	r3, r2
 80016ba:	b2c9      	uxtb	r1, r1
 80016bc:	4a07      	ldr	r2, [pc, #28]	@ (80016dc <setpixel+0x3fc>)
 80016be:	54d1      	strb	r1, [r2, r3]
}
 80016c0:	bf00      	nop
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	20000370 	.word	0x20000370
 80016d0:	200003f0 	.word	0x200003f0
 80016d4:	20000470 	.word	0x20000470
 80016d8:	200004f0 	.word	0x200004f0
 80016dc:	20000570 	.word	0x20000570

080016e0 <HienThiPin>:
void COUNTDOWN(void);
void DK_Pin(void);
void Pause();

void HienThiPin(uint8_t level)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08c      	sub	sp, #48	@ 0x30
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	71fb      	strb	r3, [r7, #7]
//		{
//			setpixel(a, b, 1);
//		}
//	}
	//hien thi khung pin ngang(tren)
	for(int i = 36;i < 37+22;i++)
 80016ea:	2324      	movs	r3, #36	@ 0x24
 80016ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016ee:	e009      	b.n	8001704 <HienThiPin+0x24>
	{
		setpixel(i, 18, 1);
 80016f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	2201      	movs	r2, #1
 80016f6:	2112      	movs	r1, #18
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff fdf1 	bl	80012e0 <setpixel>
	for(int i = 36;i < 37+22;i++)
 80016fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001700:	3301      	adds	r3, #1
 8001702:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001706:	2b3a      	cmp	r3, #58	@ 0x3a
 8001708:	ddf2      	ble.n	80016f0 <HienThiPin+0x10>
	}
	//hien thi khung pin ngang(duoi)
	for(int i = 36;i < 37+22;i++)
 800170a:	2324      	movs	r3, #36	@ 0x24
 800170c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800170e:	e009      	b.n	8001724 <HienThiPin+0x44>
	{
		setpixel(i, 21 + 2, 1);
 8001710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001712:	b29b      	uxth	r3, r3
 8001714:	2201      	movs	r2, #1
 8001716:	2117      	movs	r1, #23
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff fde1 	bl	80012e0 <setpixel>
	for(int i = 36;i < 37+22;i++)
 800171e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001720:	3301      	adds	r3, #1
 8001722:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001726:	2b3a      	cmp	r3, #58	@ 0x3a
 8001728:	ddf2      	ble.n	8001710 <HienThiPin+0x30>
	}
	// hien thi khung Pin doc(trai)
	for(int i=18;i<18+6;i++)
 800172a:	2312      	movs	r3, #18
 800172c:	627b      	str	r3, [r7, #36]	@ 0x24
 800172e:	e009      	b.n	8001744 <HienThiPin+0x64>
	{
		setpixel(36, i, 1);
 8001730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001732:	b29b      	uxth	r3, r3
 8001734:	2201      	movs	r2, #1
 8001736:	4619      	mov	r1, r3
 8001738:	2024      	movs	r0, #36	@ 0x24
 800173a:	f7ff fdd1 	bl	80012e0 <setpixel>
	for(int i=18;i<18+6;i++)
 800173e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001740:	3301      	adds	r3, #1
 8001742:	627b      	str	r3, [r7, #36]	@ 0x24
 8001744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001746:	2b17      	cmp	r3, #23
 8001748:	ddf2      	ble.n	8001730 <HienThiPin+0x50>
	}
	// hien thi khung Pin doc(phai)
	for(int i=18;i<18+6;i++)
 800174a:	2312      	movs	r3, #18
 800174c:	623b      	str	r3, [r7, #32]
 800174e:	e009      	b.n	8001764 <HienThiPin+0x84>
	{
		setpixel(36+22, i, 1);
 8001750:	6a3b      	ldr	r3, [r7, #32]
 8001752:	b29b      	uxth	r3, r3
 8001754:	2201      	movs	r2, #1
 8001756:	4619      	mov	r1, r3
 8001758:	203a      	movs	r0, #58	@ 0x3a
 800175a:	f7ff fdc1 	bl	80012e0 <setpixel>
	for(int i=18;i<18+6;i++)
 800175e:	6a3b      	ldr	r3, [r7, #32]
 8001760:	3301      	adds	r3, #1
 8001762:	623b      	str	r3, [r7, #32]
 8001764:	6a3b      	ldr	r3, [r7, #32]
 8001766:	2b17      	cmp	r3, #23
 8001768:	ddf2      	ble.n	8001750 <HienThiPin+0x70>
	}
	// hien thi dau cuc Pin
	for(int i=19;i<18+5;i++)
 800176a:	2313      	movs	r3, #19
 800176c:	61fb      	str	r3, [r7, #28]
 800176e:	e009      	b.n	8001784 <HienThiPin+0xa4>
	{
			setpixel(36+23, i, 1);
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	b29b      	uxth	r3, r3
 8001774:	2201      	movs	r2, #1
 8001776:	4619      	mov	r1, r3
 8001778:	203b      	movs	r0, #59	@ 0x3b
 800177a:	f7ff fdb1 	bl	80012e0 <setpixel>
	for(int i=19;i<18+5;i++)
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	3301      	adds	r3, #1
 8001782:	61fb      	str	r3, [r7, #28]
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	2b16      	cmp	r3, #22
 8001788:	ddf2      	ble.n	8001770 <HienThiPin+0x90>
	}

	// hien thi Level
	switch (level)
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	2b04      	cmp	r3, #4
 800178e:	d81c      	bhi.n	80017ca <HienThiPin+0xea>
 8001790:	a201      	add	r2, pc, #4	@ (adr r2, 8001798 <HienThiPin+0xb8>)
 8001792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001796:	bf00      	nop
 8001798:	080017ad 	.word	0x080017ad
 800179c:	080017b3 	.word	0x080017b3
 80017a0:	080017b9 	.word	0x080017b9
 80017a4:	080017bf 	.word	0x080017bf
 80017a8:	080017c5 	.word	0x080017c5
	{
		case 0:
			level = 1;
 80017ac:	2301      	movs	r3, #1
 80017ae:	71fb      	strb	r3, [r7, #7]
			break;
 80017b0:	e00b      	b.n	80017ca <HienThiPin+0xea>
		case 1:
			level = 2;
 80017b2:	2302      	movs	r3, #2
 80017b4:	71fb      	strb	r3, [r7, #7]
			break;
 80017b6:	e008      	b.n	80017ca <HienThiPin+0xea>
		case 2:
			level = 3;
 80017b8:	2303      	movs	r3, #3
 80017ba:	71fb      	strb	r3, [r7, #7]
			break;
 80017bc:	e005      	b.n	80017ca <HienThiPin+0xea>
		case 3:
			level = 4;
 80017be:	2304      	movs	r3, #4
 80017c0:	71fb      	strb	r3, [r7, #7]
			break;
 80017c2:	e002      	b.n	80017ca <HienThiPin+0xea>
		case 4:
			level = 5;
 80017c4:	2305      	movs	r3, #5
 80017c6:	71fb      	strb	r3, [r7, #7]
			break;
 80017c8:	bf00      	nop
	}

	int vtri_batdau = 39 - 1;
 80017ca:	2326      	movs	r3, #38	@ 0x26
 80017cc:	61bb      	str	r3, [r7, #24]
	for(int t = 0; t < level; t++)
 80017ce:	2300      	movs	r3, #0
 80017d0:	617b      	str	r3, [r7, #20]
 80017d2:	e021      	b.n	8001818 <HienThiPin+0x138>
	{
		for(int i = vtri_batdau; i < vtri_batdau + 3; i++)
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	e013      	b.n	8001802 <HienThiPin+0x122>
		{
			for(int j = 18; j < 24; j++)
 80017da:	2312      	movs	r3, #18
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	e00a      	b.n	80017f6 <HienThiPin+0x116>
			{
				setpixel(i, j, 1);
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	b291      	uxth	r1, r2
 80017e8:	2201      	movs	r2, #1
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff fd78 	bl	80012e0 <setpixel>
			for(int j = 18; j < 24; j++)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	3301      	adds	r3, #1
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2b17      	cmp	r3, #23
 80017fa:	ddf1      	ble.n	80017e0 <HienThiPin+0x100>
		for(int i = vtri_batdau; i < vtri_batdau + 3; i++)
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	3301      	adds	r3, #1
 8001800:	613b      	str	r3, [r7, #16]
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	3302      	adds	r3, #2
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	429a      	cmp	r2, r3
 800180a:	dde6      	ble.n	80017da <HienThiPin+0xfa>
			}
		}
		vtri_batdau += 4;
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	3304      	adds	r3, #4
 8001810:	61bb      	str	r3, [r7, #24]
	for(int t = 0; t < level; t++)
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	3301      	adds	r3, #1
 8001816:	617b      	str	r3, [r7, #20]
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	697a      	ldr	r2, [r7, #20]
 800181c:	429a      	cmp	r2, r3
 800181e:	dbd9      	blt.n	80017d4 <HienThiPin+0xf4>
//				}
//			}
//			break;
//		}
//	}
}
 8001820:	bf00      	nop
 8001822:	bf00      	nop
 8001824:	3730      	adds	r7, #48	@ 0x30
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop

0800182c <DK_Pin>:

uint16_t trangthaiPin = 0;
uint16_t demPin = 0;
void DK_Pin(){
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(INPUT5_GPIO_Port,INPUT5_Pin) == 0){
 8001830:	2102      	movs	r1, #2
 8001832:	4824      	ldr	r0, [pc, #144]	@ (80018c4 <DK_Pin+0x98>)
 8001834:	f001 f86a 	bl	800290c <HAL_GPIO_ReadPin>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d13c      	bne.n	80018b8 <DK_Pin+0x8c>
		if(trangthaiPin == 1){
 800183e:	4b22      	ldr	r3, [pc, #136]	@ (80018c8 <DK_Pin+0x9c>)
 8001840:	881b      	ldrh	r3, [r3, #0]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d105      	bne.n	8001852 <DK_Pin+0x26>
			demPin++;
 8001846:	4b21      	ldr	r3, [pc, #132]	@ (80018cc <DK_Pin+0xa0>)
 8001848:	881b      	ldrh	r3, [r3, #0]
 800184a:	3301      	adds	r3, #1
 800184c:	b29a      	uxth	r2, r3
 800184e:	4b1f      	ldr	r3, [pc, #124]	@ (80018cc <DK_Pin+0xa0>)
 8001850:	801a      	strh	r2, [r3, #0]
		}
		if(demPin == 1)
 8001852:	4b1e      	ldr	r3, [pc, #120]	@ (80018cc <DK_Pin+0xa0>)
 8001854:	881b      	ldrh	r3, [r3, #0]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d103      	bne.n	8001862 <DK_Pin+0x36>
		{
			HienThiPin(0);
 800185a:	2000      	movs	r0, #0
 800185c:	f7ff ff40 	bl	80016e0 <HienThiPin>
 8001860:	e026      	b.n	80018b0 <DK_Pin+0x84>
		}
		else if(demPin == 2)
 8001862:	4b1a      	ldr	r3, [pc, #104]	@ (80018cc <DK_Pin+0xa0>)
 8001864:	881b      	ldrh	r3, [r3, #0]
 8001866:	2b02      	cmp	r3, #2
 8001868:	d103      	bne.n	8001872 <DK_Pin+0x46>
		{
			HienThiPin(1);
 800186a:	2001      	movs	r0, #1
 800186c:	f7ff ff38 	bl	80016e0 <HienThiPin>
 8001870:	e01e      	b.n	80018b0 <DK_Pin+0x84>
		}
		else if(demPin == 3)
 8001872:	4b16      	ldr	r3, [pc, #88]	@ (80018cc <DK_Pin+0xa0>)
 8001874:	881b      	ldrh	r3, [r3, #0]
 8001876:	2b03      	cmp	r3, #3
 8001878:	d103      	bne.n	8001882 <DK_Pin+0x56>
		{
			HienThiPin(2);
 800187a:	2002      	movs	r0, #2
 800187c:	f7ff ff30 	bl	80016e0 <HienThiPin>
 8001880:	e016      	b.n	80018b0 <DK_Pin+0x84>
		}
		else if(demPin == 4)
 8001882:	4b12      	ldr	r3, [pc, #72]	@ (80018cc <DK_Pin+0xa0>)
 8001884:	881b      	ldrh	r3, [r3, #0]
 8001886:	2b04      	cmp	r3, #4
 8001888:	d103      	bne.n	8001892 <DK_Pin+0x66>
		{
			HienThiPin(3);
 800188a:	2003      	movs	r0, #3
 800188c:	f7ff ff28 	bl	80016e0 <HienThiPin>
 8001890:	e00e      	b.n	80018b0 <DK_Pin+0x84>
		}
		else if(demPin == 5)
 8001892:	4b0e      	ldr	r3, [pc, #56]	@ (80018cc <DK_Pin+0xa0>)
 8001894:	881b      	ldrh	r3, [r3, #0]
 8001896:	2b05      	cmp	r3, #5
 8001898:	d103      	bne.n	80018a2 <DK_Pin+0x76>
		{
			HienThiPin(4);
 800189a:	2004      	movs	r0, #4
 800189c:	f7ff ff20 	bl	80016e0 <HienThiPin>
 80018a0:	e006      	b.n	80018b0 <DK_Pin+0x84>
		}
		else if(demPin >= 6){
 80018a2:	4b0a      	ldr	r3, [pc, #40]	@ (80018cc <DK_Pin+0xa0>)
 80018a4:	881b      	ldrh	r3, [r3, #0]
 80018a6:	2b05      	cmp	r3, #5
 80018a8:	d902      	bls.n	80018b0 <DK_Pin+0x84>
			demPin = 1;
 80018aa:	4b08      	ldr	r3, [pc, #32]	@ (80018cc <DK_Pin+0xa0>)
 80018ac:	2201      	movs	r2, #1
 80018ae:	801a      	strh	r2, [r3, #0]
		}
		trangthaiPin = 0;
 80018b0:	4b05      	ldr	r3, [pc, #20]	@ (80018c8 <DK_Pin+0x9c>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	801a      	strh	r2, [r3, #0]
	}
	else{
		trangthaiPin = 1;
	}
}
 80018b6:	e002      	b.n	80018be <DK_Pin+0x92>
		trangthaiPin = 1;
 80018b8:	4b03      	ldr	r3, [pc, #12]	@ (80018c8 <DK_Pin+0x9c>)
 80018ba:	2201      	movs	r2, #1
 80018bc:	801a      	strh	r2, [r3, #0]
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40010c00 	.word	0x40010c00
 80018c8:	20000686 	.word	0x20000686
 80018cc:	20000688 	.word	0x20000688

080018d0 <main>:
int cnt_dung = 0;
// khai bao ham dung
int dung = 0;

int main(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018d6:	f000 fc4f 	bl	8002178 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018da:	f000 f8e3 	bl	8001aa4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018de:	f000 f9a1 	bl	8001c24 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80018e2:	f000 f975 	bl	8001bd0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80018e6:	f000 f923 	bl	8001b30 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //doc thong tin ra
  led_init();
 80018ea:	f7ff fb17 	bl	8000f1c <led_init>
//  write_string(0, "15.12 %", 0, 48);
//  write_string(0, "92.68 %", 0, 64);
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int dem = 420; // 7 mins
 80018ee:	f44f 73d2 	mov.w	r3, #420	@ 0x1a4
 80018f2:	607b      	str	r3, [r7, #4]
  int tt=0;
 80018f4:	2300      	movs	r3, #0
 80018f6:	603b      	str	r3, [r7, #0]
//	  e = HAL_GPIO_ReadPin(INPUT5_GPIO_Port,INPUT5_Pin);
//	  if(a | b | c | d | e != 0){
//		  printf("Da nhan");
//	  }

	  DK_Pin();
 80018f8:	f7ff ff98 	bl	800182c <DK_Pin>
	  a = HAL_GPIO_ReadPin(INPUT1_GPIO_Port,INPUT1_Pin);
 80018fc:	2120      	movs	r1, #32
 80018fe:	485c      	ldr	r0, [pc, #368]	@ (8001a70 <main+0x1a0>)
 8001900:	f001 f804 	bl	800290c <HAL_GPIO_ReadPin>
 8001904:	4603      	mov	r3, r0
 8001906:	461a      	mov	r2, r3
 8001908:	4b5a      	ldr	r3, [pc, #360]	@ (8001a74 <main+0x1a4>)
 800190a:	701a      	strb	r2, [r3, #0]
	  b = HAL_GPIO_ReadPin(INPUT2_GPIO_Port,INPUT2_Pin);			// countdown
 800190c:	2140      	movs	r1, #64	@ 0x40
 800190e:	4858      	ldr	r0, [pc, #352]	@ (8001a70 <main+0x1a0>)
 8001910:	f000 fffc 	bl	800290c <HAL_GPIO_ReadPin>
 8001914:	4603      	mov	r3, r0
 8001916:	461a      	mov	r2, r3
 8001918:	4b57      	ldr	r3, [pc, #348]	@ (8001a78 <main+0x1a8>)
 800191a:	701a      	strb	r2, [r3, #0]
	  c = HAL_GPIO_ReadPin(INPUT4_GPIO_Port,INPUT4_Pin);			// tru 30s
 800191c:	2101      	movs	r1, #1
 800191e:	4857      	ldr	r0, [pc, #348]	@ (8001a7c <main+0x1ac>)
 8001920:	f000 fff4 	bl	800290c <HAL_GPIO_ReadPin>
 8001924:	4603      	mov	r3, r0
 8001926:	461a      	mov	r2, r3
 8001928:	4b55      	ldr	r3, [pc, #340]	@ (8001a80 <main+0x1b0>)
 800192a:	701a      	strb	r2, [r3, #0]
	  d = HAL_GPIO_ReadPin(INPUT5_GPIO_Port,INPUT5_Pin);			// Level
 800192c:	2102      	movs	r1, #2
 800192e:	4853      	ldr	r0, [pc, #332]	@ (8001a7c <main+0x1ac>)
 8001930:	f000 ffec 	bl	800290c <HAL_GPIO_ReadPin>
 8001934:	4603      	mov	r3, r0
 8001936:	461a      	mov	r2, r3
 8001938:	4b52      	ldr	r3, [pc, #328]	@ (8001a84 <main+0x1b4>)
 800193a:	701a      	strb	r2, [r3, #0]
	  if(b == 0){
 800193c:	4b4e      	ldr	r3, [pc, #312]	@ (8001a78 <main+0x1a8>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	f040 8088 	bne.w	8001a56 <main+0x186>
		  tt = 1;
 8001946:	2301      	movs	r3, #1
 8001948:	603b      	str	r3, [r7, #0]
		  if(HAL_GetTick() - count_1s > 1000)
 800194a:	f000 fc6d 	bl	8002228 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	4b4d      	ldr	r3, [pc, #308]	@ (8001a88 <main+0x1b8>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800195a:	d94a      	bls.n	80019f2 <main+0x122>
		  {
			  if(dem >= 0 && !dung){
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	db38      	blt.n	80019d4 <main+0x104>
 8001962:	4b4a      	ldr	r3, [pc, #296]	@ (8001a8c <main+0x1bc>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d134      	bne.n	80019d4 <main+0x104>
				  sprintf(m,"                   %d:%.2d",dem/60,dem%60);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a48      	ldr	r2, [pc, #288]	@ (8001a90 <main+0x1c0>)
 800196e:	fb82 1203 	smull	r1, r2, r2, r3
 8001972:	441a      	add	r2, r3
 8001974:	1152      	asrs	r2, r2, #5
 8001976:	17db      	asrs	r3, r3, #31
 8001978:	1ad0      	subs	r0, r2, r3
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	4b44      	ldr	r3, [pc, #272]	@ (8001a90 <main+0x1c0>)
 800197e:	fb83 1302 	smull	r1, r3, r3, r2
 8001982:	4413      	add	r3, r2
 8001984:	1159      	asrs	r1, r3, #5
 8001986:	17d3      	asrs	r3, r2, #31
 8001988:	1ac9      	subs	r1, r1, r3
 800198a:	460b      	mov	r3, r1
 800198c:	011b      	lsls	r3, r3, #4
 800198e:	1a5b      	subs	r3, r3, r1
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	1ad1      	subs	r1, r2, r3
 8001994:	460b      	mov	r3, r1
 8001996:	4602      	mov	r2, r0
 8001998:	493e      	ldr	r1, [pc, #248]	@ (8001a94 <main+0x1c4>)
 800199a:	483f      	ldr	r0, [pc, #252]	@ (8001a98 <main+0x1c8>)
 800199c:	f003 fa44 	bl	8004e28 <siprintf>
				  write_string(0, m, 0, 3);
 80019a0:	2303      	movs	r3, #3
 80019a2:	2200      	movs	r2, #0
 80019a4:	493c      	ldr	r1, [pc, #240]	@ (8001a98 <main+0x1c8>)
 80019a6:	2000      	movs	r0, #0
 80019a8:	f7ff fa8e 	bl	8000ec8 <write_string>
				  dem--;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	607b      	str	r3, [r7, #4]

				  // Ham Pause dong ho
				  if(a == 0){
 80019b2:	4b30      	ldr	r3, [pc, #192]	@ (8001a74 <main+0x1a4>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d103      	bne.n	80019c2 <main+0xf2>
					  dung = 1;
 80019ba:	4b34      	ldr	r3, [pc, #208]	@ (8001a8c <main+0x1bc>)
 80019bc:	2201      	movs	r2, #1
 80019be:	601a      	str	r2, [r3, #0]
				  if(a == 0){
 80019c0:	e017      	b.n	80019f2 <main+0x122>
				  }
				  else{
					  dung = 0;
 80019c2:	4b32      	ldr	r3, [pc, #200]	@ (8001a8c <main+0x1bc>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
					  count_1s = HAL_GetTick();
 80019c8:	f000 fc2e 	bl	8002228 <HAL_GetTick>
 80019cc:	4603      	mov	r3, r0
 80019ce:	4a2e      	ldr	r2, [pc, #184]	@ (8001a88 <main+0x1b8>)
 80019d0:	6013      	str	r3, [r2, #0]
				  if(a == 0){
 80019d2:	e00e      	b.n	80019f2 <main+0x122>
				  }
//
			  }
			  else{
				  sprintf(m,"                  0:00");
 80019d4:	4931      	ldr	r1, [pc, #196]	@ (8001a9c <main+0x1cc>)
 80019d6:	4830      	ldr	r0, [pc, #192]	@ (8001a98 <main+0x1c8>)
 80019d8:	f003 fa26 	bl	8004e28 <siprintf>
				  write_string(0, m, 0, 3);
 80019dc:	2303      	movs	r3, #3
 80019de:	2200      	movs	r2, #0
 80019e0:	492d      	ldr	r1, [pc, #180]	@ (8001a98 <main+0x1c8>)
 80019e2:	2000      	movs	r0, #0
 80019e4:	f7ff fa70 	bl	8000ec8 <write_string>
				  HAL_GPIO_WritePin(GPIOA, MT_R1_Pin, GPIO_PIN_SET);
 80019e8:	2201      	movs	r2, #1
 80019ea:	2101      	movs	r1, #1
 80019ec:	4820      	ldr	r0, [pc, #128]	@ (8001a70 <main+0x1a0>)
 80019ee:	f000 ffa4 	bl	800293a <HAL_GPIO_WritePin>
			  }
		  }
		  if(c == 0){
 80019f2:	4b23      	ldr	r3, [pc, #140]	@ (8001a80 <main+0x1b0>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f47f af7e 	bne.w	80018f8 <main+0x28>
		  	HAL_Delay(10);
 80019fc:	200a      	movs	r0, #10
 80019fe:	f000 fc1d 	bl	800223c <HAL_Delay>
		  	if(c == 0){
 8001a02:	4b1f      	ldr	r3, [pc, #124]	@ (8001a80 <main+0x1b0>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f47f af76 	bne.w	80018f8 <main+0x28>
				sprintf(m,"               %d:%.2d",dem/60,dem%60);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a20      	ldr	r2, [pc, #128]	@ (8001a90 <main+0x1c0>)
 8001a10:	fb82 1203 	smull	r1, r2, r2, r3
 8001a14:	441a      	add	r2, r3
 8001a16:	1152      	asrs	r2, r2, #5
 8001a18:	17db      	asrs	r3, r3, #31
 8001a1a:	1ad0      	subs	r0, r2, r3
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	4b1c      	ldr	r3, [pc, #112]	@ (8001a90 <main+0x1c0>)
 8001a20:	fb83 1302 	smull	r1, r3, r3, r2
 8001a24:	4413      	add	r3, r2
 8001a26:	1159      	asrs	r1, r3, #5
 8001a28:	17d3      	asrs	r3, r2, #31
 8001a2a:	1ac9      	subs	r1, r1, r3
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	011b      	lsls	r3, r3, #4
 8001a30:	1a5b      	subs	r3, r3, r1
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	1ad1      	subs	r1, r2, r3
 8001a36:	460b      	mov	r3, r1
 8001a38:	4602      	mov	r2, r0
 8001a3a:	4919      	ldr	r1, [pc, #100]	@ (8001aa0 <main+0x1d0>)
 8001a3c:	4816      	ldr	r0, [pc, #88]	@ (8001a98 <main+0x1c8>)
 8001a3e:	f003 f9f3 	bl	8004e28 <siprintf>
				write_string(0, m, 0, 3);
 8001a42:	2303      	movs	r3, #3
 8001a44:	2200      	movs	r2, #0
 8001a46:	4914      	ldr	r1, [pc, #80]	@ (8001a98 <main+0x1c8>)
 8001a48:	2000      	movs	r0, #0
 8001a4a:	f7ff fa3d 	bl	8000ec8 <write_string>
				dem -= 30;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	3b1e      	subs	r3, #30
 8001a52:	607b      	str	r3, [r7, #4]
 8001a54:	e750      	b.n	80018f8 <main+0x28>
		  	}
		  }
	  }

	  else if(b	 == 1){
 8001a56:	4b08      	ldr	r3, [pc, #32]	@ (8001a78 <main+0x1a8>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	f47f af4c 	bne.w	80018f8 <main+0x28>
		  clear_lcd();
 8001a60:	f7ff f9f0 	bl	8000e44 <clear_lcd>
		  dem = 420;
 8001a64:	f44f 73d2 	mov.w	r3, #420	@ 0x1a4
 8001a68:	607b      	str	r3, [r7, #4]
		  tt = 1;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	603b      	str	r3, [r7, #0]
	  DK_Pin();
 8001a6e:	e743      	b.n	80018f8 <main+0x28>
 8001a70:	40010800 	.word	0x40010800
 8001a74:	200006b0 	.word	0x200006b0
 8001a78:	200006b1 	.word	0x200006b1
 8001a7c:	40010c00 	.word	0x40010c00
 8001a80:	200006b2 	.word	0x200006b2
 8001a84:	200006b3 	.word	0x200006b3
 8001a88:	200006ac 	.word	0x200006ac
 8001a8c:	200006b4 	.word	0x200006b4
 8001a90:	88888889 	.word	0x88888889
 8001a94:	080070b0 	.word	0x080070b0
 8001a98:	2000068c 	.word	0x2000068c
 8001a9c:	080070cc 	.word	0x080070cc
 8001aa0:	080070e4 	.word	0x080070e4

08001aa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b090      	sub	sp, #64	@ 0x40
 8001aa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aaa:	f107 0318 	add.w	r3, r7, #24
 8001aae:	2228      	movs	r2, #40	@ 0x28
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f003 fa1b 	bl	8004eee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ab8:	1d3b      	adds	r3, r7, #4
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	605a      	str	r2, [r3, #4]
 8001ac0:	609a      	str	r2, [r3, #8]
 8001ac2:	60da      	str	r2, [r3, #12]
 8001ac4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001aca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ace:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001adc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ae0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001ae2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ae8:	f107 0318 	add.w	r3, r7, #24
 8001aec:	4618      	mov	r0, r3
 8001aee:	f000 ff3d 	bl	800296c <HAL_RCC_OscConfig>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001af8:	f000 f92a 	bl	8001d50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001afc:	230f      	movs	r3, #15
 8001afe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b00:	2302      	movs	r3, #2
 8001b02:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b04:	2300      	movs	r3, #0
 8001b06:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b12:	1d3b      	adds	r3, r7, #4
 8001b14:	2102      	movs	r1, #2
 8001b16:	4618      	mov	r0, r3
 8001b18:	f001 f9aa 	bl	8002e70 <HAL_RCC_ClockConfig>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001b22:	f000 f915 	bl	8001d50 <Error_Handler>
  }
}
 8001b26:	bf00      	nop
 8001b28:	3740      	adds	r7, #64	@ 0x40
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
	...

08001b30 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b36:	f107 0308 	add.w	r3, r7, #8
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	605a      	str	r2, [r3, #4]
 8001b40:	609a      	str	r2, [r3, #8]
 8001b42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b44:	463b      	mov	r3, r7
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b4c:	4b1e      	ldr	r3, [pc, #120]	@ (8001bc8 <MX_TIM1_Init+0x98>)
 8001b4e:	4a1f      	ldr	r2, [pc, #124]	@ (8001bcc <MX_TIM1_Init+0x9c>)
 8001b50:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001b52:	4b1d      	ldr	r3, [pc, #116]	@ (8001bc8 <MX_TIM1_Init+0x98>)
 8001b54:	2247      	movs	r2, #71	@ 0x47
 8001b56:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b58:	4b1b      	ldr	r3, [pc, #108]	@ (8001bc8 <MX_TIM1_Init+0x98>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3999;
 8001b5e:	4b1a      	ldr	r3, [pc, #104]	@ (8001bc8 <MX_TIM1_Init+0x98>)
 8001b60:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8001b64:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b66:	4b18      	ldr	r3, [pc, #96]	@ (8001bc8 <MX_TIM1_Init+0x98>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b6c:	4b16      	ldr	r3, [pc, #88]	@ (8001bc8 <MX_TIM1_Init+0x98>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b72:	4b15      	ldr	r3, [pc, #84]	@ (8001bc8 <MX_TIM1_Init+0x98>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b78:	4813      	ldr	r0, [pc, #76]	@ (8001bc8 <MX_TIM1_Init+0x98>)
 8001b7a:	f001 fb07 	bl	800318c <HAL_TIM_Base_Init>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001b84:	f000 f8e4 	bl	8001d50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b8e:	f107 0308 	add.w	r3, r7, #8
 8001b92:	4619      	mov	r1, r3
 8001b94:	480c      	ldr	r0, [pc, #48]	@ (8001bc8 <MX_TIM1_Init+0x98>)
 8001b96:	f001 fca3 	bl	80034e0 <HAL_TIM_ConfigClockSource>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001ba0:	f000 f8d6 	bl	8001d50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bac:	463b      	mov	r3, r7
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4805      	ldr	r0, [pc, #20]	@ (8001bc8 <MX_TIM1_Init+0x98>)
 8001bb2:	f001 fe79 	bl	80038a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001bbc:	f000 f8c8 	bl	8001d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001bc0:	bf00      	nop
 8001bc2:	3718      	adds	r7, #24
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	200005f4 	.word	0x200005f4
 8001bcc:	40012c00 	.word	0x40012c00

08001bd0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bd4:	4b11      	ldr	r3, [pc, #68]	@ (8001c1c <MX_USART2_UART_Init+0x4c>)
 8001bd6:	4a12      	ldr	r2, [pc, #72]	@ (8001c20 <MX_USART2_UART_Init+0x50>)
 8001bd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bda:	4b10      	ldr	r3, [pc, #64]	@ (8001c1c <MX_USART2_UART_Init+0x4c>)
 8001bdc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001be0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001be2:	4b0e      	ldr	r3, [pc, #56]	@ (8001c1c <MX_USART2_UART_Init+0x4c>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001be8:	4b0c      	ldr	r3, [pc, #48]	@ (8001c1c <MX_USART2_UART_Init+0x4c>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bee:	4b0b      	ldr	r3, [pc, #44]	@ (8001c1c <MX_USART2_UART_Init+0x4c>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bf4:	4b09      	ldr	r3, [pc, #36]	@ (8001c1c <MX_USART2_UART_Init+0x4c>)
 8001bf6:	220c      	movs	r2, #12
 8001bf8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bfa:	4b08      	ldr	r3, [pc, #32]	@ (8001c1c <MX_USART2_UART_Init+0x4c>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c00:	4b06      	ldr	r3, [pc, #24]	@ (8001c1c <MX_USART2_UART_Init+0x4c>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c06:	4805      	ldr	r0, [pc, #20]	@ (8001c1c <MX_USART2_UART_Init+0x4c>)
 8001c08:	f001 febe 	bl	8003988 <HAL_UART_Init>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c12:	f000 f89d 	bl	8001d50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	2000063c 	.word	0x2000063c
 8001c20:	40004400 	.word	0x40004400

08001c24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b088      	sub	sp, #32
 8001c28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2a:	f107 0310 	add.w	r3, r7, #16
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	605a      	str	r2, [r3, #4]
 8001c34:	609a      	str	r2, [r3, #8]
 8001c36:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c38:	4b42      	ldr	r3, [pc, #264]	@ (8001d44 <MX_GPIO_Init+0x120>)
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	4a41      	ldr	r2, [pc, #260]	@ (8001d44 <MX_GPIO_Init+0x120>)
 8001c3e:	f043 0320 	orr.w	r3, r3, #32
 8001c42:	6193      	str	r3, [r2, #24]
 8001c44:	4b3f      	ldr	r3, [pc, #252]	@ (8001d44 <MX_GPIO_Init+0x120>)
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	f003 0320 	and.w	r3, r3, #32
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c50:	4b3c      	ldr	r3, [pc, #240]	@ (8001d44 <MX_GPIO_Init+0x120>)
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	4a3b      	ldr	r2, [pc, #236]	@ (8001d44 <MX_GPIO_Init+0x120>)
 8001c56:	f043 0304 	orr.w	r3, r3, #4
 8001c5a:	6193      	str	r3, [r2, #24]
 8001c5c:	4b39      	ldr	r3, [pc, #228]	@ (8001d44 <MX_GPIO_Init+0x120>)
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	60bb      	str	r3, [r7, #8]
 8001c66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c68:	4b36      	ldr	r3, [pc, #216]	@ (8001d44 <MX_GPIO_Init+0x120>)
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	4a35      	ldr	r2, [pc, #212]	@ (8001d44 <MX_GPIO_Init+0x120>)
 8001c6e:	f043 0308 	orr.w	r3, r3, #8
 8001c72:	6193      	str	r3, [r2, #24]
 8001c74:	4b33      	ldr	r3, [pc, #204]	@ (8001d44 <MX_GPIO_Init+0x120>)
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	f003 0308 	and.w	r3, r3, #8
 8001c7c:	607b      	str	r3, [r7, #4]
 8001c7e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MT_R1_Pin|MT_R2_Pin|RS485_TX_Pin, GPIO_PIN_RESET);
 8001c80:	2200      	movs	r2, #0
 8001c82:	2113      	movs	r1, #19
 8001c84:	4830      	ldr	r0, [pc, #192]	@ (8001d48 <MX_GPIO_Init+0x124>)
 8001c86:	f000 fe58 	bl	800293a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RELAY1_Pin|RELAY2_Pin|MT_R3_Pin|MT_R4_Pin
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f64f 71f8 	movw	r1, #65528	@ 0xfff8
 8001c90:	482e      	ldr	r0, [pc, #184]	@ (8001d4c <MX_GPIO_Init+0x128>)
 8001c92:	f000 fe52 	bl	800293a <HAL_GPIO_WritePin>
                          |MT_R5_Pin|MT_R6_Pin|MT_LAT_Pin|MT_CLK_Pin
                          |MT_B_Pin|MT_OE_Pin|MT_A_Pin|MT_R8_Pin
                          |MT_R7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : MT_R1_Pin MT_R2_Pin */
  GPIO_InitStruct.Pin = MT_R1_Pin|MT_R2_Pin;
 8001c96:	2303      	movs	r3, #3
 8001c98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca6:	f107 0310 	add.w	r3, r7, #16
 8001caa:	4619      	mov	r1, r3
 8001cac:	4826      	ldr	r0, [pc, #152]	@ (8001d48 <MX_GPIO_Init+0x124>)
 8001cae:	f000 fca9 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_TX_Pin */
  GPIO_InitStruct.Pin = RS485_TX_Pin;
 8001cb2:	2310      	movs	r3, #16
 8001cb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RS485_TX_GPIO_Port, &GPIO_InitStruct);
 8001cc2:	f107 0310 	add.w	r3, r7, #16
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	481f      	ldr	r0, [pc, #124]	@ (8001d48 <MX_GPIO_Init+0x124>)
 8001cca:	f000 fc9b 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT1_Pin INPUT2_Pin INPUT3_Pin */
  GPIO_InitStruct.Pin = INPUT1_Pin|INPUT2_Pin|INPUT3_Pin;
 8001cce:	23e0      	movs	r3, #224	@ 0xe0
 8001cd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cda:	f107 0310 	add.w	r3, r7, #16
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4819      	ldr	r0, [pc, #100]	@ (8001d48 <MX_GPIO_Init+0x124>)
 8001ce2:	f000 fc8f 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT4_Pin INPUT5_Pin */
  GPIO_InitStruct.Pin = INPUT4_Pin|INPUT5_Pin;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cea:	2300      	movs	r3, #0
 8001cec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf2:	f107 0310 	add.w	r3, r7, #16
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4814      	ldr	r0, [pc, #80]	@ (8001d4c <MX_GPIO_Init+0x128>)
 8001cfa:	f000 fc83 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY1_Pin RELAY2_Pin */
  GPIO_InitStruct.Pin = RELAY1_Pin|RELAY2_Pin;
 8001cfe:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001d02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d04:	2301      	movs	r3, #1
 8001d06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d10:	f107 0310 	add.w	r3, r7, #16
 8001d14:	4619      	mov	r1, r3
 8001d16:	480d      	ldr	r0, [pc, #52]	@ (8001d4c <MX_GPIO_Init+0x128>)
 8001d18:	f000 fc74 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pins : MT_R3_Pin MT_R4_Pin MT_R5_Pin MT_R6_Pin
                           MT_LAT_Pin MT_CLK_Pin MT_B_Pin MT_OE_Pin
                           MT_A_Pin MT_R8_Pin MT_R7_Pin */
  GPIO_InitStruct.Pin = MT_R3_Pin|MT_R4_Pin|MT_R5_Pin|MT_R6_Pin
 8001d1c:	f24f 33f8 	movw	r3, #62456	@ 0xf3f8
 8001d20:	613b      	str	r3, [r7, #16]
                          |MT_LAT_Pin|MT_CLK_Pin|MT_B_Pin|MT_OE_Pin
                          |MT_A_Pin|MT_R8_Pin|MT_R7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d22:	2301      	movs	r3, #1
 8001d24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d2e:	f107 0310 	add.w	r3, r7, #16
 8001d32:	4619      	mov	r1, r3
 8001d34:	4805      	ldr	r0, [pc, #20]	@ (8001d4c <MX_GPIO_Init+0x128>)
 8001d36:	f000 fc65 	bl	8002604 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d3a:	bf00      	nop
 8001d3c:	3720      	adds	r7, #32
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40021000 	.word	0x40021000
 8001d48:	40010800 	.word	0x40010800
 8001d4c:	40010c00 	.word	0x40010c00

08001d50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d54:	b672      	cpsid	i
}
 8001d56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d58:	bf00      	nop
 8001d5a:	e7fd      	b.n	8001d58 <Error_Handler+0x8>

08001d5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d62:	4b15      	ldr	r3, [pc, #84]	@ (8001db8 <HAL_MspInit+0x5c>)
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	4a14      	ldr	r2, [pc, #80]	@ (8001db8 <HAL_MspInit+0x5c>)
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	6193      	str	r3, [r2, #24]
 8001d6e:	4b12      	ldr	r3, [pc, #72]	@ (8001db8 <HAL_MspInit+0x5c>)
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	60bb      	str	r3, [r7, #8]
 8001d78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d7a:	4b0f      	ldr	r3, [pc, #60]	@ (8001db8 <HAL_MspInit+0x5c>)
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	4a0e      	ldr	r2, [pc, #56]	@ (8001db8 <HAL_MspInit+0x5c>)
 8001d80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d84:	61d3      	str	r3, [r2, #28]
 8001d86:	4b0c      	ldr	r3, [pc, #48]	@ (8001db8 <HAL_MspInit+0x5c>)
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d8e:	607b      	str	r3, [r7, #4]
 8001d90:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d92:	4b0a      	ldr	r3, [pc, #40]	@ (8001dbc <HAL_MspInit+0x60>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	4a04      	ldr	r2, [pc, #16]	@ (8001dbc <HAL_MspInit+0x60>)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dae:	bf00      	nop
 8001db0:	3714      	adds	r7, #20
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	40010000 	.word	0x40010000

08001dc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a19      	ldr	r2, [pc, #100]	@ (8001e34 <HAL_TIM_Base_MspInit+0x74>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d12b      	bne.n	8001e2a <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dd2:	4b19      	ldr	r3, [pc, #100]	@ (8001e38 <HAL_TIM_Base_MspInit+0x78>)
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	4a18      	ldr	r2, [pc, #96]	@ (8001e38 <HAL_TIM_Base_MspInit+0x78>)
 8001dd8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ddc:	6193      	str	r3, [r2, #24]
 8001dde:	4b16      	ldr	r3, [pc, #88]	@ (8001e38 <HAL_TIM_Base_MspInit+0x78>)
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 7, 0);
 8001dea:	2200      	movs	r2, #0
 8001dec:	2107      	movs	r1, #7
 8001dee:	2018      	movs	r0, #24
 8001df0:	f000 fb1f 	bl	8002432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001df4:	2018      	movs	r0, #24
 8001df6:	f000 fb38 	bl	800246a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 7, 0);
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2107      	movs	r1, #7
 8001dfe:	2019      	movs	r0, #25
 8001e00:	f000 fb17 	bl	8002432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001e04:	2019      	movs	r0, #25
 8001e06:	f000 fb30 	bl	800246a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 7, 0);
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2107      	movs	r1, #7
 8001e0e:	201a      	movs	r0, #26
 8001e10:	f000 fb0f 	bl	8002432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001e14:	201a      	movs	r0, #26
 8001e16:	f000 fb28 	bl	800246a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 7, 0);
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2107      	movs	r1, #7
 8001e1e:	201b      	movs	r0, #27
 8001e20:	f000 fb07 	bl	8002432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001e24:	201b      	movs	r0, #27
 8001e26:	f000 fb20 	bl	800246a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001e2a:	bf00      	nop
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40012c00 	.word	0x40012c00
 8001e38:	40021000 	.word	0x40021000

08001e3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b088      	sub	sp, #32
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e44:	f107 0310 	add.w	r3, r7, #16
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a1f      	ldr	r2, [pc, #124]	@ (8001ed4 <HAL_UART_MspInit+0x98>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d137      	bne.n	8001ecc <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e5c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ed8 <HAL_UART_MspInit+0x9c>)
 8001e5e:	69db      	ldr	r3, [r3, #28]
 8001e60:	4a1d      	ldr	r2, [pc, #116]	@ (8001ed8 <HAL_UART_MspInit+0x9c>)
 8001e62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e66:	61d3      	str	r3, [r2, #28]
 8001e68:	4b1b      	ldr	r3, [pc, #108]	@ (8001ed8 <HAL_UART_MspInit+0x9c>)
 8001e6a:	69db      	ldr	r3, [r3, #28]
 8001e6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e74:	4b18      	ldr	r3, [pc, #96]	@ (8001ed8 <HAL_UART_MspInit+0x9c>)
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	4a17      	ldr	r2, [pc, #92]	@ (8001ed8 <HAL_UART_MspInit+0x9c>)
 8001e7a:	f043 0304 	orr.w	r3, r3, #4
 8001e7e:	6193      	str	r3, [r2, #24]
 8001e80:	4b15      	ldr	r3, [pc, #84]	@ (8001ed8 <HAL_UART_MspInit+0x9c>)
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	f003 0304 	and.w	r3, r3, #4
 8001e88:	60bb      	str	r3, [r7, #8]
 8001e8a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e8c:	2304      	movs	r3, #4
 8001e8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e90:	2302      	movs	r3, #2
 8001e92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e94:	2303      	movs	r3, #3
 8001e96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e98:	f107 0310 	add.w	r3, r7, #16
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	480f      	ldr	r0, [pc, #60]	@ (8001edc <HAL_UART_MspInit+0xa0>)
 8001ea0:	f000 fbb0 	bl	8002604 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ea4:	2308      	movs	r3, #8
 8001ea6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb0:	f107 0310 	add.w	r3, r7, #16
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4809      	ldr	r0, [pc, #36]	@ (8001edc <HAL_UART_MspInit+0xa0>)
 8001eb8:	f000 fba4 	bl	8002604 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	2026      	movs	r0, #38	@ 0x26
 8001ec2:	f000 fab6 	bl	8002432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ec6:	2026      	movs	r0, #38	@ 0x26
 8001ec8:	f000 facf 	bl	800246a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ecc:	bf00      	nop
 8001ece:	3720      	adds	r7, #32
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40004400 	.word	0x40004400
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	40010800 	.word	0x40010800

08001ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ee4:	bf00      	nop
 8001ee6:	e7fd      	b.n	8001ee4 <NMI_Handler+0x4>

08001ee8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eec:	bf00      	nop
 8001eee:	e7fd      	b.n	8001eec <HardFault_Handler+0x4>

08001ef0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ef4:	bf00      	nop
 8001ef6:	e7fd      	b.n	8001ef4 <MemManage_Handler+0x4>

08001ef8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001efc:	bf00      	nop
 8001efe:	e7fd      	b.n	8001efc <BusFault_Handler+0x4>

08001f00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f04:	bf00      	nop
 8001f06:	e7fd      	b.n	8001f04 <UsageFault_Handler+0x4>

08001f08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr

08001f14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr

08001f20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bc80      	pop	{r7}
 8001f2a:	4770      	bx	lr

08001f2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f30:	f000 f968 	bl	8002204 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f34:	bf00      	nop
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f3c:	4802      	ldr	r0, [pc, #8]	@ (8001f48 <TIM1_BRK_IRQHandler+0x10>)
 8001f3e:	f001 f9c7 	bl	80032d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	200005f4 	.word	0x200005f4

08001f4c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f50:	4802      	ldr	r0, [pc, #8]	@ (8001f5c <TIM1_UP_IRQHandler+0x10>)
 8001f52:	f001 f9bd 	bl	80032d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	200005f4 	.word	0x200005f4

08001f60 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f64:	4802      	ldr	r0, [pc, #8]	@ (8001f70 <TIM1_TRG_COM_IRQHandler+0x10>)
 8001f66:	f001 f9b3 	bl	80032d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	200005f4 	.word	0x200005f4

08001f74 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f78:	4802      	ldr	r0, [pc, #8]	@ (8001f84 <TIM1_CC_IRQHandler+0x10>)
 8001f7a:	f001 f9a9 	bl	80032d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	200005f4 	.word	0x200005f4

08001f88 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f8c:	4802      	ldr	r0, [pc, #8]	@ (8001f98 <USART2_IRQHandler+0x10>)
 8001f8e:	f001 fd4b 	bl	8003a28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	2000063c 	.word	0x2000063c

08001f9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  return 1;
 8001fa0:	2301      	movs	r3, #1
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bc80      	pop	{r7}
 8001fa8:	4770      	bx	lr

08001faa <_kill>:

int _kill(int pid, int sig)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b082      	sub	sp, #8
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
 8001fb2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001fb4:	f002 ffee 	bl	8004f94 <__errno>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2216      	movs	r2, #22
 8001fbc:	601a      	str	r2, [r3, #0]
  return -1;
 8001fbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <_exit>:

void _exit (int status)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b082      	sub	sp, #8
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fd2:	f04f 31ff 	mov.w	r1, #4294967295
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7ff ffe7 	bl	8001faa <_kill>
  while (1) {}    /* Make sure we hang here */
 8001fdc:	bf00      	nop
 8001fde:	e7fd      	b.n	8001fdc <_exit+0x12>

08001fe0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	e00a      	b.n	8002008 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ff2:	f3af 8000 	nop.w
 8001ff6:	4601      	mov	r1, r0
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	1c5a      	adds	r2, r3, #1
 8001ffc:	60ba      	str	r2, [r7, #8]
 8001ffe:	b2ca      	uxtb	r2, r1
 8002000:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	3301      	adds	r3, #1
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	697a      	ldr	r2, [r7, #20]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	429a      	cmp	r2, r3
 800200e:	dbf0      	blt.n	8001ff2 <_read+0x12>
  }

  return len;
 8002010:	687b      	ldr	r3, [r7, #4]
}
 8002012:	4618      	mov	r0, r3
 8002014:	3718      	adds	r7, #24
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b086      	sub	sp, #24
 800201e:	af00      	add	r7, sp, #0
 8002020:	60f8      	str	r0, [r7, #12]
 8002022:	60b9      	str	r1, [r7, #8]
 8002024:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002026:	2300      	movs	r3, #0
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	e009      	b.n	8002040 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	1c5a      	adds	r2, r3, #1
 8002030:	60ba      	str	r2, [r7, #8]
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	4618      	mov	r0, r3
 8002036:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	3301      	adds	r3, #1
 800203e:	617b      	str	r3, [r7, #20]
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	429a      	cmp	r2, r3
 8002046:	dbf1      	blt.n	800202c <_write+0x12>
  }
  return len;
 8002048:	687b      	ldr	r3, [r7, #4]
}
 800204a:	4618      	mov	r0, r3
 800204c:	3718      	adds	r7, #24
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <_close>:

int _close(int file)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800205a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800205e:	4618      	mov	r0, r3
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr

08002068 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002078:	605a      	str	r2, [r3, #4]
  return 0;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	bc80      	pop	{r7}
 8002084:	4770      	bx	lr

08002086 <_isatty>:

int _isatty(int file)
{
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800208e:	2301      	movs	r3, #1
}
 8002090:	4618      	mov	r0, r3
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	bc80      	pop	{r7}
 8002098:	4770      	bx	lr

0800209a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800209a:	b480      	push	{r7}
 800209c:	b085      	sub	sp, #20
 800209e:	af00      	add	r7, sp, #0
 80020a0:	60f8      	str	r0, [r7, #12]
 80020a2:	60b9      	str	r1, [r7, #8]
 80020a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3714      	adds	r7, #20
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bc80      	pop	{r7}
 80020b0:	4770      	bx	lr
	...

080020b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020bc:	4a14      	ldr	r2, [pc, #80]	@ (8002110 <_sbrk+0x5c>)
 80020be:	4b15      	ldr	r3, [pc, #84]	@ (8002114 <_sbrk+0x60>)
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020c8:	4b13      	ldr	r3, [pc, #76]	@ (8002118 <_sbrk+0x64>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d102      	bne.n	80020d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020d0:	4b11      	ldr	r3, [pc, #68]	@ (8002118 <_sbrk+0x64>)
 80020d2:	4a12      	ldr	r2, [pc, #72]	@ (800211c <_sbrk+0x68>)
 80020d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020d6:	4b10      	ldr	r3, [pc, #64]	@ (8002118 <_sbrk+0x64>)
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4413      	add	r3, r2
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d207      	bcs.n	80020f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020e4:	f002 ff56 	bl	8004f94 <__errno>
 80020e8:	4603      	mov	r3, r0
 80020ea:	220c      	movs	r2, #12
 80020ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020ee:	f04f 33ff 	mov.w	r3, #4294967295
 80020f2:	e009      	b.n	8002108 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020f4:	4b08      	ldr	r3, [pc, #32]	@ (8002118 <_sbrk+0x64>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020fa:	4b07      	ldr	r3, [pc, #28]	@ (8002118 <_sbrk+0x64>)
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4413      	add	r3, r2
 8002102:	4a05      	ldr	r2, [pc, #20]	@ (8002118 <_sbrk+0x64>)
 8002104:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002106:	68fb      	ldr	r3, [r7, #12]
}
 8002108:	4618      	mov	r0, r3
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	20005000 	.word	0x20005000
 8002114:	00000400 	.word	0x00000400
 8002118:	200006b8 	.word	0x200006b8
 800211c:	20000810 	.word	0x20000810

08002120 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002124:	bf00      	nop
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr

0800212c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800212c:	f7ff fff8 	bl	8002120 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002130:	480b      	ldr	r0, [pc, #44]	@ (8002160 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002132:	490c      	ldr	r1, [pc, #48]	@ (8002164 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002134:	4a0c      	ldr	r2, [pc, #48]	@ (8002168 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002136:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002138:	e002      	b.n	8002140 <LoopCopyDataInit>

0800213a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800213a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800213c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800213e:	3304      	adds	r3, #4

08002140 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002140:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002142:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002144:	d3f9      	bcc.n	800213a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002146:	4a09      	ldr	r2, [pc, #36]	@ (800216c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002148:	4c09      	ldr	r4, [pc, #36]	@ (8002170 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800214a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800214c:	e001      	b.n	8002152 <LoopFillZerobss>

0800214e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800214e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002150:	3204      	adds	r2, #4

08002152 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002152:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002154:	d3fb      	bcc.n	800214e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002156:	f002 ff23 	bl	8004fa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800215a:	f7ff fbb9 	bl	80018d0 <main>
  bx lr
 800215e:	4770      	bx	lr
  ldr r0, =_sdata
 8002160:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002164:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002168:	08008598 	.word	0x08008598
  ldr r2, =_sbss
 800216c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002170:	2000080c 	.word	0x2000080c

08002174 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002174:	e7fe      	b.n	8002174 <ADC1_2_IRQHandler>
	...

08002178 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800217c:	4b08      	ldr	r3, [pc, #32]	@ (80021a0 <HAL_Init+0x28>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a07      	ldr	r2, [pc, #28]	@ (80021a0 <HAL_Init+0x28>)
 8002182:	f043 0310 	orr.w	r3, r3, #16
 8002186:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002188:	2003      	movs	r0, #3
 800218a:	f000 f947 	bl	800241c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800218e:	200f      	movs	r0, #15
 8002190:	f000 f808 	bl	80021a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002194:	f7ff fde2 	bl	8001d5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	40022000 	.word	0x40022000

080021a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021ac:	4b12      	ldr	r3, [pc, #72]	@ (80021f8 <HAL_InitTick+0x54>)
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	4b12      	ldr	r3, [pc, #72]	@ (80021fc <HAL_InitTick+0x58>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	4619      	mov	r1, r3
 80021b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80021be:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c2:	4618      	mov	r0, r3
 80021c4:	f000 f95f 	bl	8002486 <HAL_SYSTICK_Config>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e00e      	b.n	80021f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2b0f      	cmp	r3, #15
 80021d6:	d80a      	bhi.n	80021ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021d8:	2200      	movs	r2, #0
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	f04f 30ff 	mov.w	r0, #4294967295
 80021e0:	f000 f927 	bl	8002432 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021e4:	4a06      	ldr	r2, [pc, #24]	@ (8002200 <HAL_InitTick+0x5c>)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
 80021ec:	e000      	b.n	80021f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	20000000 	.word	0x20000000
 80021fc:	20000008 	.word	0x20000008
 8002200:	20000004 	.word	0x20000004

08002204 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002208:	4b05      	ldr	r3, [pc, #20]	@ (8002220 <HAL_IncTick+0x1c>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	461a      	mov	r2, r3
 800220e:	4b05      	ldr	r3, [pc, #20]	@ (8002224 <HAL_IncTick+0x20>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4413      	add	r3, r2
 8002214:	4a03      	ldr	r2, [pc, #12]	@ (8002224 <HAL_IncTick+0x20>)
 8002216:	6013      	str	r3, [r2, #0]
}
 8002218:	bf00      	nop
 800221a:	46bd      	mov	sp, r7
 800221c:	bc80      	pop	{r7}
 800221e:	4770      	bx	lr
 8002220:	20000008 	.word	0x20000008
 8002224:	200006bc 	.word	0x200006bc

08002228 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  return uwTick;
 800222c:	4b02      	ldr	r3, [pc, #8]	@ (8002238 <HAL_GetTick+0x10>)
 800222e:	681b      	ldr	r3, [r3, #0]
}
 8002230:	4618      	mov	r0, r3
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr
 8002238:	200006bc 	.word	0x200006bc

0800223c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002244:	f7ff fff0 	bl	8002228 <HAL_GetTick>
 8002248:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002254:	d005      	beq.n	8002262 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002256:	4b0a      	ldr	r3, [pc, #40]	@ (8002280 <HAL_Delay+0x44>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	461a      	mov	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	4413      	add	r3, r2
 8002260:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002262:	bf00      	nop
 8002264:	f7ff ffe0 	bl	8002228 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	429a      	cmp	r2, r3
 8002272:	d8f7      	bhi.n	8002264 <HAL_Delay+0x28>
  {
  }
}
 8002274:	bf00      	nop
 8002276:	bf00      	nop
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	20000008 	.word	0x20000008

08002284 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f003 0307 	and.w	r3, r3, #7
 8002292:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002294:	4b0c      	ldr	r3, [pc, #48]	@ (80022c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022a0:	4013      	ands	r3, r2
 80022a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022b6:	4a04      	ldr	r2, [pc, #16]	@ (80022c8 <__NVIC_SetPriorityGrouping+0x44>)
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	60d3      	str	r3, [r2, #12]
}
 80022bc:	bf00      	nop
 80022be:	3714      	adds	r7, #20
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bc80      	pop	{r7}
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	e000ed00 	.word	0xe000ed00

080022cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022d0:	4b04      	ldr	r3, [pc, #16]	@ (80022e4 <__NVIC_GetPriorityGrouping+0x18>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	0a1b      	lsrs	r3, r3, #8
 80022d6:	f003 0307 	and.w	r3, r3, #7
}
 80022da:	4618      	mov	r0, r3
 80022dc:	46bd      	mov	sp, r7
 80022de:	bc80      	pop	{r7}
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	e000ed00 	.word	0xe000ed00

080022e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	db0b      	blt.n	8002312 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022fa:	79fb      	ldrb	r3, [r7, #7]
 80022fc:	f003 021f 	and.w	r2, r3, #31
 8002300:	4906      	ldr	r1, [pc, #24]	@ (800231c <__NVIC_EnableIRQ+0x34>)
 8002302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002306:	095b      	lsrs	r3, r3, #5
 8002308:	2001      	movs	r0, #1
 800230a:	fa00 f202 	lsl.w	r2, r0, r2
 800230e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr
 800231c:	e000e100 	.word	0xe000e100

08002320 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	6039      	str	r1, [r7, #0]
 800232a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800232c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002330:	2b00      	cmp	r3, #0
 8002332:	db0a      	blt.n	800234a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	b2da      	uxtb	r2, r3
 8002338:	490c      	ldr	r1, [pc, #48]	@ (800236c <__NVIC_SetPriority+0x4c>)
 800233a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233e:	0112      	lsls	r2, r2, #4
 8002340:	b2d2      	uxtb	r2, r2
 8002342:	440b      	add	r3, r1
 8002344:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002348:	e00a      	b.n	8002360 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	b2da      	uxtb	r2, r3
 800234e:	4908      	ldr	r1, [pc, #32]	@ (8002370 <__NVIC_SetPriority+0x50>)
 8002350:	79fb      	ldrb	r3, [r7, #7]
 8002352:	f003 030f 	and.w	r3, r3, #15
 8002356:	3b04      	subs	r3, #4
 8002358:	0112      	lsls	r2, r2, #4
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	440b      	add	r3, r1
 800235e:	761a      	strb	r2, [r3, #24]
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	bc80      	pop	{r7}
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	e000e100 	.word	0xe000e100
 8002370:	e000ed00 	.word	0xe000ed00

08002374 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002374:	b480      	push	{r7}
 8002376:	b089      	sub	sp, #36	@ 0x24
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	f1c3 0307 	rsb	r3, r3, #7
 800238e:	2b04      	cmp	r3, #4
 8002390:	bf28      	it	cs
 8002392:	2304      	movcs	r3, #4
 8002394:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	3304      	adds	r3, #4
 800239a:	2b06      	cmp	r3, #6
 800239c:	d902      	bls.n	80023a4 <NVIC_EncodePriority+0x30>
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	3b03      	subs	r3, #3
 80023a2:	e000      	b.n	80023a6 <NVIC_EncodePriority+0x32>
 80023a4:	2300      	movs	r3, #0
 80023a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a8:	f04f 32ff 	mov.w	r2, #4294967295
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	43da      	mvns	r2, r3
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	401a      	ands	r2, r3
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023bc:	f04f 31ff 	mov.w	r1, #4294967295
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	fa01 f303 	lsl.w	r3, r1, r3
 80023c6:	43d9      	mvns	r1, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023cc:	4313      	orrs	r3, r2
         );
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3724      	adds	r7, #36	@ 0x24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr

080023d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3b01      	subs	r3, #1
 80023e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023e8:	d301      	bcc.n	80023ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ea:	2301      	movs	r3, #1
 80023ec:	e00f      	b.n	800240e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002418 <SysTick_Config+0x40>)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3b01      	subs	r3, #1
 80023f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023f6:	210f      	movs	r1, #15
 80023f8:	f04f 30ff 	mov.w	r0, #4294967295
 80023fc:	f7ff ff90 	bl	8002320 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002400:	4b05      	ldr	r3, [pc, #20]	@ (8002418 <SysTick_Config+0x40>)
 8002402:	2200      	movs	r2, #0
 8002404:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002406:	4b04      	ldr	r3, [pc, #16]	@ (8002418 <SysTick_Config+0x40>)
 8002408:	2207      	movs	r2, #7
 800240a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	e000e010 	.word	0xe000e010

0800241c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f7ff ff2d 	bl	8002284 <__NVIC_SetPriorityGrouping>
}
 800242a:	bf00      	nop
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002432:	b580      	push	{r7, lr}
 8002434:	b086      	sub	sp, #24
 8002436:	af00      	add	r7, sp, #0
 8002438:	4603      	mov	r3, r0
 800243a:	60b9      	str	r1, [r7, #8]
 800243c:	607a      	str	r2, [r7, #4]
 800243e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002440:	2300      	movs	r3, #0
 8002442:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002444:	f7ff ff42 	bl	80022cc <__NVIC_GetPriorityGrouping>
 8002448:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	68b9      	ldr	r1, [r7, #8]
 800244e:	6978      	ldr	r0, [r7, #20]
 8002450:	f7ff ff90 	bl	8002374 <NVIC_EncodePriority>
 8002454:	4602      	mov	r2, r0
 8002456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800245a:	4611      	mov	r1, r2
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff ff5f 	bl	8002320 <__NVIC_SetPriority>
}
 8002462:	bf00      	nop
 8002464:	3718      	adds	r7, #24
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b082      	sub	sp, #8
 800246e:	af00      	add	r7, sp, #0
 8002470:	4603      	mov	r3, r0
 8002472:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff ff35 	bl	80022e8 <__NVIC_EnableIRQ>
}
 800247e:	bf00      	nop
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b082      	sub	sp, #8
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7ff ffa2 	bl	80023d8 <SysTick_Config>
 8002494:	4603      	mov	r3, r0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800249e:	b480      	push	{r7}
 80024a0:	b085      	sub	sp, #20
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024a6:	2300      	movs	r3, #0
 80024a8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d008      	beq.n	80024c8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2204      	movs	r2, #4
 80024ba:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e020      	b.n	800250a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 020e 	bic.w	r2, r2, #14
 80024d6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 0201 	bic.w	r2, r2, #1
 80024e6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024f0:	2101      	movs	r1, #1
 80024f2:	fa01 f202 	lsl.w	r2, r1, r2
 80024f6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002508:	7bfb      	ldrb	r3, [r7, #15]
}
 800250a:	4618      	mov	r0, r3
 800250c:	3714      	adds	r7, #20
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr

08002514 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800251c:	2300      	movs	r3, #0
 800251e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d005      	beq.n	8002538 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2204      	movs	r2, #4
 8002530:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	73fb      	strb	r3, [r7, #15]
 8002536:	e051      	b.n	80025dc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f022 020e 	bic.w	r2, r2, #14
 8002546:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f022 0201 	bic.w	r2, r2, #1
 8002556:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a22      	ldr	r2, [pc, #136]	@ (80025e8 <HAL_DMA_Abort_IT+0xd4>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d029      	beq.n	80025b6 <HAL_DMA_Abort_IT+0xa2>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a21      	ldr	r2, [pc, #132]	@ (80025ec <HAL_DMA_Abort_IT+0xd8>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d022      	beq.n	80025b2 <HAL_DMA_Abort_IT+0x9e>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a1f      	ldr	r2, [pc, #124]	@ (80025f0 <HAL_DMA_Abort_IT+0xdc>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d01a      	beq.n	80025ac <HAL_DMA_Abort_IT+0x98>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a1e      	ldr	r2, [pc, #120]	@ (80025f4 <HAL_DMA_Abort_IT+0xe0>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d012      	beq.n	80025a6 <HAL_DMA_Abort_IT+0x92>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a1c      	ldr	r2, [pc, #112]	@ (80025f8 <HAL_DMA_Abort_IT+0xe4>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d00a      	beq.n	80025a0 <HAL_DMA_Abort_IT+0x8c>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a1b      	ldr	r2, [pc, #108]	@ (80025fc <HAL_DMA_Abort_IT+0xe8>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d102      	bne.n	800259a <HAL_DMA_Abort_IT+0x86>
 8002594:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002598:	e00e      	b.n	80025b8 <HAL_DMA_Abort_IT+0xa4>
 800259a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800259e:	e00b      	b.n	80025b8 <HAL_DMA_Abort_IT+0xa4>
 80025a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80025a4:	e008      	b.n	80025b8 <HAL_DMA_Abort_IT+0xa4>
 80025a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025aa:	e005      	b.n	80025b8 <HAL_DMA_Abort_IT+0xa4>
 80025ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025b0:	e002      	b.n	80025b8 <HAL_DMA_Abort_IT+0xa4>
 80025b2:	2310      	movs	r3, #16
 80025b4:	e000      	b.n	80025b8 <HAL_DMA_Abort_IT+0xa4>
 80025b6:	2301      	movs	r3, #1
 80025b8:	4a11      	ldr	r2, [pc, #68]	@ (8002600 <HAL_DMA_Abort_IT+0xec>)
 80025ba:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d003      	beq.n	80025dc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	4798      	blx	r3
    } 
  }
  return status;
 80025dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	40020008 	.word	0x40020008
 80025ec:	4002001c 	.word	0x4002001c
 80025f0:	40020030 	.word	0x40020030
 80025f4:	40020044 	.word	0x40020044
 80025f8:	40020058 	.word	0x40020058
 80025fc:	4002006c 	.word	0x4002006c
 8002600:	40020000 	.word	0x40020000

08002604 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002604:	b480      	push	{r7}
 8002606:	b08b      	sub	sp, #44	@ 0x2c
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800260e:	2300      	movs	r3, #0
 8002610:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002612:	2300      	movs	r3, #0
 8002614:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002616:	e169      	b.n	80028ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002618:	2201      	movs	r2, #1
 800261a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	69fa      	ldr	r2, [r7, #28]
 8002628:	4013      	ands	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	429a      	cmp	r2, r3
 8002632:	f040 8158 	bne.w	80028e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	4a9a      	ldr	r2, [pc, #616]	@ (80028a4 <HAL_GPIO_Init+0x2a0>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d05e      	beq.n	80026fe <HAL_GPIO_Init+0xfa>
 8002640:	4a98      	ldr	r2, [pc, #608]	@ (80028a4 <HAL_GPIO_Init+0x2a0>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d875      	bhi.n	8002732 <HAL_GPIO_Init+0x12e>
 8002646:	4a98      	ldr	r2, [pc, #608]	@ (80028a8 <HAL_GPIO_Init+0x2a4>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d058      	beq.n	80026fe <HAL_GPIO_Init+0xfa>
 800264c:	4a96      	ldr	r2, [pc, #600]	@ (80028a8 <HAL_GPIO_Init+0x2a4>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d86f      	bhi.n	8002732 <HAL_GPIO_Init+0x12e>
 8002652:	4a96      	ldr	r2, [pc, #600]	@ (80028ac <HAL_GPIO_Init+0x2a8>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d052      	beq.n	80026fe <HAL_GPIO_Init+0xfa>
 8002658:	4a94      	ldr	r2, [pc, #592]	@ (80028ac <HAL_GPIO_Init+0x2a8>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d869      	bhi.n	8002732 <HAL_GPIO_Init+0x12e>
 800265e:	4a94      	ldr	r2, [pc, #592]	@ (80028b0 <HAL_GPIO_Init+0x2ac>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d04c      	beq.n	80026fe <HAL_GPIO_Init+0xfa>
 8002664:	4a92      	ldr	r2, [pc, #584]	@ (80028b0 <HAL_GPIO_Init+0x2ac>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d863      	bhi.n	8002732 <HAL_GPIO_Init+0x12e>
 800266a:	4a92      	ldr	r2, [pc, #584]	@ (80028b4 <HAL_GPIO_Init+0x2b0>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d046      	beq.n	80026fe <HAL_GPIO_Init+0xfa>
 8002670:	4a90      	ldr	r2, [pc, #576]	@ (80028b4 <HAL_GPIO_Init+0x2b0>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d85d      	bhi.n	8002732 <HAL_GPIO_Init+0x12e>
 8002676:	2b12      	cmp	r3, #18
 8002678:	d82a      	bhi.n	80026d0 <HAL_GPIO_Init+0xcc>
 800267a:	2b12      	cmp	r3, #18
 800267c:	d859      	bhi.n	8002732 <HAL_GPIO_Init+0x12e>
 800267e:	a201      	add	r2, pc, #4	@ (adr r2, 8002684 <HAL_GPIO_Init+0x80>)
 8002680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002684:	080026ff 	.word	0x080026ff
 8002688:	080026d9 	.word	0x080026d9
 800268c:	080026eb 	.word	0x080026eb
 8002690:	0800272d 	.word	0x0800272d
 8002694:	08002733 	.word	0x08002733
 8002698:	08002733 	.word	0x08002733
 800269c:	08002733 	.word	0x08002733
 80026a0:	08002733 	.word	0x08002733
 80026a4:	08002733 	.word	0x08002733
 80026a8:	08002733 	.word	0x08002733
 80026ac:	08002733 	.word	0x08002733
 80026b0:	08002733 	.word	0x08002733
 80026b4:	08002733 	.word	0x08002733
 80026b8:	08002733 	.word	0x08002733
 80026bc:	08002733 	.word	0x08002733
 80026c0:	08002733 	.word	0x08002733
 80026c4:	08002733 	.word	0x08002733
 80026c8:	080026e1 	.word	0x080026e1
 80026cc:	080026f5 	.word	0x080026f5
 80026d0:	4a79      	ldr	r2, [pc, #484]	@ (80028b8 <HAL_GPIO_Init+0x2b4>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d013      	beq.n	80026fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80026d6:	e02c      	b.n	8002732 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	623b      	str	r3, [r7, #32]
          break;
 80026de:	e029      	b.n	8002734 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	3304      	adds	r3, #4
 80026e6:	623b      	str	r3, [r7, #32]
          break;
 80026e8:	e024      	b.n	8002734 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	3308      	adds	r3, #8
 80026f0:	623b      	str	r3, [r7, #32]
          break;
 80026f2:	e01f      	b.n	8002734 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	330c      	adds	r3, #12
 80026fa:	623b      	str	r3, [r7, #32]
          break;
 80026fc:	e01a      	b.n	8002734 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d102      	bne.n	800270c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002706:	2304      	movs	r3, #4
 8002708:	623b      	str	r3, [r7, #32]
          break;
 800270a:	e013      	b.n	8002734 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d105      	bne.n	8002720 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002714:	2308      	movs	r3, #8
 8002716:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	69fa      	ldr	r2, [r7, #28]
 800271c:	611a      	str	r2, [r3, #16]
          break;
 800271e:	e009      	b.n	8002734 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002720:	2308      	movs	r3, #8
 8002722:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	69fa      	ldr	r2, [r7, #28]
 8002728:	615a      	str	r2, [r3, #20]
          break;
 800272a:	e003      	b.n	8002734 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800272c:	2300      	movs	r3, #0
 800272e:	623b      	str	r3, [r7, #32]
          break;
 8002730:	e000      	b.n	8002734 <HAL_GPIO_Init+0x130>
          break;
 8002732:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	2bff      	cmp	r3, #255	@ 0xff
 8002738:	d801      	bhi.n	800273e <HAL_GPIO_Init+0x13a>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	e001      	b.n	8002742 <HAL_GPIO_Init+0x13e>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	3304      	adds	r3, #4
 8002742:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	2bff      	cmp	r3, #255	@ 0xff
 8002748:	d802      	bhi.n	8002750 <HAL_GPIO_Init+0x14c>
 800274a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	e002      	b.n	8002756 <HAL_GPIO_Init+0x152>
 8002750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002752:	3b08      	subs	r3, #8
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	210f      	movs	r1, #15
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	fa01 f303 	lsl.w	r3, r1, r3
 8002764:	43db      	mvns	r3, r3
 8002766:	401a      	ands	r2, r3
 8002768:	6a39      	ldr	r1, [r7, #32]
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	fa01 f303 	lsl.w	r3, r1, r3
 8002770:	431a      	orrs	r2, r3
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	f000 80b1 	beq.w	80028e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002784:	4b4d      	ldr	r3, [pc, #308]	@ (80028bc <HAL_GPIO_Init+0x2b8>)
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	4a4c      	ldr	r2, [pc, #304]	@ (80028bc <HAL_GPIO_Init+0x2b8>)
 800278a:	f043 0301 	orr.w	r3, r3, #1
 800278e:	6193      	str	r3, [r2, #24]
 8002790:	4b4a      	ldr	r3, [pc, #296]	@ (80028bc <HAL_GPIO_Init+0x2b8>)
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	60bb      	str	r3, [r7, #8]
 800279a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800279c:	4a48      	ldr	r2, [pc, #288]	@ (80028c0 <HAL_GPIO_Init+0x2bc>)
 800279e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a0:	089b      	lsrs	r3, r3, #2
 80027a2:	3302      	adds	r3, #2
 80027a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ac:	f003 0303 	and.w	r3, r3, #3
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	220f      	movs	r2, #15
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	43db      	mvns	r3, r3
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	4013      	ands	r3, r2
 80027be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4a40      	ldr	r2, [pc, #256]	@ (80028c4 <HAL_GPIO_Init+0x2c0>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d013      	beq.n	80027f0 <HAL_GPIO_Init+0x1ec>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a3f      	ldr	r2, [pc, #252]	@ (80028c8 <HAL_GPIO_Init+0x2c4>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d00d      	beq.n	80027ec <HAL_GPIO_Init+0x1e8>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4a3e      	ldr	r2, [pc, #248]	@ (80028cc <HAL_GPIO_Init+0x2c8>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d007      	beq.n	80027e8 <HAL_GPIO_Init+0x1e4>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4a3d      	ldr	r2, [pc, #244]	@ (80028d0 <HAL_GPIO_Init+0x2cc>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d101      	bne.n	80027e4 <HAL_GPIO_Init+0x1e0>
 80027e0:	2303      	movs	r3, #3
 80027e2:	e006      	b.n	80027f2 <HAL_GPIO_Init+0x1ee>
 80027e4:	2304      	movs	r3, #4
 80027e6:	e004      	b.n	80027f2 <HAL_GPIO_Init+0x1ee>
 80027e8:	2302      	movs	r3, #2
 80027ea:	e002      	b.n	80027f2 <HAL_GPIO_Init+0x1ee>
 80027ec:	2301      	movs	r3, #1
 80027ee:	e000      	b.n	80027f2 <HAL_GPIO_Init+0x1ee>
 80027f0:	2300      	movs	r3, #0
 80027f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027f4:	f002 0203 	and.w	r2, r2, #3
 80027f8:	0092      	lsls	r2, r2, #2
 80027fa:	4093      	lsls	r3, r2
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	4313      	orrs	r3, r2
 8002800:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002802:	492f      	ldr	r1, [pc, #188]	@ (80028c0 <HAL_GPIO_Init+0x2bc>)
 8002804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002806:	089b      	lsrs	r3, r3, #2
 8002808:	3302      	adds	r3, #2
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d006      	beq.n	800282a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800281c:	4b2d      	ldr	r3, [pc, #180]	@ (80028d4 <HAL_GPIO_Init+0x2d0>)
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	492c      	ldr	r1, [pc, #176]	@ (80028d4 <HAL_GPIO_Init+0x2d0>)
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	4313      	orrs	r3, r2
 8002826:	608b      	str	r3, [r1, #8]
 8002828:	e006      	b.n	8002838 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800282a:	4b2a      	ldr	r3, [pc, #168]	@ (80028d4 <HAL_GPIO_Init+0x2d0>)
 800282c:	689a      	ldr	r2, [r3, #8]
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	43db      	mvns	r3, r3
 8002832:	4928      	ldr	r1, [pc, #160]	@ (80028d4 <HAL_GPIO_Init+0x2d0>)
 8002834:	4013      	ands	r3, r2
 8002836:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d006      	beq.n	8002852 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002844:	4b23      	ldr	r3, [pc, #140]	@ (80028d4 <HAL_GPIO_Init+0x2d0>)
 8002846:	68da      	ldr	r2, [r3, #12]
 8002848:	4922      	ldr	r1, [pc, #136]	@ (80028d4 <HAL_GPIO_Init+0x2d0>)
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	4313      	orrs	r3, r2
 800284e:	60cb      	str	r3, [r1, #12]
 8002850:	e006      	b.n	8002860 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002852:	4b20      	ldr	r3, [pc, #128]	@ (80028d4 <HAL_GPIO_Init+0x2d0>)
 8002854:	68da      	ldr	r2, [r3, #12]
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	43db      	mvns	r3, r3
 800285a:	491e      	ldr	r1, [pc, #120]	@ (80028d4 <HAL_GPIO_Init+0x2d0>)
 800285c:	4013      	ands	r3, r2
 800285e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d006      	beq.n	800287a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800286c:	4b19      	ldr	r3, [pc, #100]	@ (80028d4 <HAL_GPIO_Init+0x2d0>)
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	4918      	ldr	r1, [pc, #96]	@ (80028d4 <HAL_GPIO_Init+0x2d0>)
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	4313      	orrs	r3, r2
 8002876:	604b      	str	r3, [r1, #4]
 8002878:	e006      	b.n	8002888 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800287a:	4b16      	ldr	r3, [pc, #88]	@ (80028d4 <HAL_GPIO_Init+0x2d0>)
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	43db      	mvns	r3, r3
 8002882:	4914      	ldr	r1, [pc, #80]	@ (80028d4 <HAL_GPIO_Init+0x2d0>)
 8002884:	4013      	ands	r3, r2
 8002886:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d021      	beq.n	80028d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002894:	4b0f      	ldr	r3, [pc, #60]	@ (80028d4 <HAL_GPIO_Init+0x2d0>)
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	490e      	ldr	r1, [pc, #56]	@ (80028d4 <HAL_GPIO_Init+0x2d0>)
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	4313      	orrs	r3, r2
 800289e:	600b      	str	r3, [r1, #0]
 80028a0:	e021      	b.n	80028e6 <HAL_GPIO_Init+0x2e2>
 80028a2:	bf00      	nop
 80028a4:	10320000 	.word	0x10320000
 80028a8:	10310000 	.word	0x10310000
 80028ac:	10220000 	.word	0x10220000
 80028b0:	10210000 	.word	0x10210000
 80028b4:	10120000 	.word	0x10120000
 80028b8:	10110000 	.word	0x10110000
 80028bc:	40021000 	.word	0x40021000
 80028c0:	40010000 	.word	0x40010000
 80028c4:	40010800 	.word	0x40010800
 80028c8:	40010c00 	.word	0x40010c00
 80028cc:	40011000 	.word	0x40011000
 80028d0:	40011400 	.word	0x40011400
 80028d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80028d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002908 <HAL_GPIO_Init+0x304>)
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	43db      	mvns	r3, r3
 80028e0:	4909      	ldr	r1, [pc, #36]	@ (8002908 <HAL_GPIO_Init+0x304>)
 80028e2:	4013      	ands	r3, r2
 80028e4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80028e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e8:	3301      	adds	r3, #1
 80028ea:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f2:	fa22 f303 	lsr.w	r3, r2, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f47f ae8e 	bne.w	8002618 <HAL_GPIO_Init+0x14>
  }
}
 80028fc:	bf00      	nop
 80028fe:	bf00      	nop
 8002900:	372c      	adds	r7, #44	@ 0x2c
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr
 8002908:	40010400 	.word	0x40010400

0800290c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	460b      	mov	r3, r1
 8002916:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	887b      	ldrh	r3, [r7, #2]
 800291e:	4013      	ands	r3, r2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d002      	beq.n	800292a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002924:	2301      	movs	r3, #1
 8002926:	73fb      	strb	r3, [r7, #15]
 8002928:	e001      	b.n	800292e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800292a:	2300      	movs	r3, #0
 800292c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800292e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002930:	4618      	mov	r0, r3
 8002932:	3714      	adds	r7, #20
 8002934:	46bd      	mov	sp, r7
 8002936:	bc80      	pop	{r7}
 8002938:	4770      	bx	lr

0800293a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800293a:	b480      	push	{r7}
 800293c:	b083      	sub	sp, #12
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
 8002942:	460b      	mov	r3, r1
 8002944:	807b      	strh	r3, [r7, #2]
 8002946:	4613      	mov	r3, r2
 8002948:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800294a:	787b      	ldrb	r3, [r7, #1]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d003      	beq.n	8002958 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002950:	887a      	ldrh	r2, [r7, #2]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002956:	e003      	b.n	8002960 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002958:	887b      	ldrh	r3, [r7, #2]
 800295a:	041a      	lsls	r2, r3, #16
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	611a      	str	r2, [r3, #16]
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	bc80      	pop	{r7}
 8002968:	4770      	bx	lr
	...

0800296c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e272      	b.n	8002e64 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 8087 	beq.w	8002a9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800298c:	4b92      	ldr	r3, [pc, #584]	@ (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f003 030c 	and.w	r3, r3, #12
 8002994:	2b04      	cmp	r3, #4
 8002996:	d00c      	beq.n	80029b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002998:	4b8f      	ldr	r3, [pc, #572]	@ (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f003 030c 	and.w	r3, r3, #12
 80029a0:	2b08      	cmp	r3, #8
 80029a2:	d112      	bne.n	80029ca <HAL_RCC_OscConfig+0x5e>
 80029a4:	4b8c      	ldr	r3, [pc, #560]	@ (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029b0:	d10b      	bne.n	80029ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b2:	4b89      	ldr	r3, [pc, #548]	@ (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d06c      	beq.n	8002a98 <HAL_RCC_OscConfig+0x12c>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d168      	bne.n	8002a98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e24c      	b.n	8002e64 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029d2:	d106      	bne.n	80029e2 <HAL_RCC_OscConfig+0x76>
 80029d4:	4b80      	ldr	r3, [pc, #512]	@ (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a7f      	ldr	r2, [pc, #508]	@ (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 80029da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029de:	6013      	str	r3, [r2, #0]
 80029e0:	e02e      	b.n	8002a40 <HAL_RCC_OscConfig+0xd4>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10c      	bne.n	8002a04 <HAL_RCC_OscConfig+0x98>
 80029ea:	4b7b      	ldr	r3, [pc, #492]	@ (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a7a      	ldr	r2, [pc, #488]	@ (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 80029f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029f4:	6013      	str	r3, [r2, #0]
 80029f6:	4b78      	ldr	r3, [pc, #480]	@ (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a77      	ldr	r2, [pc, #476]	@ (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 80029fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a00:	6013      	str	r3, [r2, #0]
 8002a02:	e01d      	b.n	8002a40 <HAL_RCC_OscConfig+0xd4>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a0c:	d10c      	bne.n	8002a28 <HAL_RCC_OscConfig+0xbc>
 8002a0e:	4b72      	ldr	r3, [pc, #456]	@ (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a71      	ldr	r2, [pc, #452]	@ (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 8002a14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a18:	6013      	str	r3, [r2, #0]
 8002a1a:	4b6f      	ldr	r3, [pc, #444]	@ (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a6e      	ldr	r2, [pc, #440]	@ (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 8002a20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a24:	6013      	str	r3, [r2, #0]
 8002a26:	e00b      	b.n	8002a40 <HAL_RCC_OscConfig+0xd4>
 8002a28:	4b6b      	ldr	r3, [pc, #428]	@ (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a6a      	ldr	r2, [pc, #424]	@ (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 8002a2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a32:	6013      	str	r3, [r2, #0]
 8002a34:	4b68      	ldr	r3, [pc, #416]	@ (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a67      	ldr	r2, [pc, #412]	@ (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 8002a3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a3e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d013      	beq.n	8002a70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a48:	f7ff fbee 	bl	8002228 <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a50:	f7ff fbea 	bl	8002228 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b64      	cmp	r3, #100	@ 0x64
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e200      	b.n	8002e64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a62:	4b5d      	ldr	r3, [pc, #372]	@ (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d0f0      	beq.n	8002a50 <HAL_RCC_OscConfig+0xe4>
 8002a6e:	e014      	b.n	8002a9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a70:	f7ff fbda 	bl	8002228 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a78:	f7ff fbd6 	bl	8002228 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b64      	cmp	r3, #100	@ 0x64
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e1ec      	b.n	8002e64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a8a:	4b53      	ldr	r3, [pc, #332]	@ (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1f0      	bne.n	8002a78 <HAL_RCC_OscConfig+0x10c>
 8002a96:	e000      	b.n	8002a9a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d063      	beq.n	8002b6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002aa6:	4b4c      	ldr	r3, [pc, #304]	@ (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f003 030c 	and.w	r3, r3, #12
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00b      	beq.n	8002aca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ab2:	4b49      	ldr	r3, [pc, #292]	@ (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f003 030c 	and.w	r3, r3, #12
 8002aba:	2b08      	cmp	r3, #8
 8002abc:	d11c      	bne.n	8002af8 <HAL_RCC_OscConfig+0x18c>
 8002abe:	4b46      	ldr	r3, [pc, #280]	@ (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d116      	bne.n	8002af8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aca:	4b43      	ldr	r3, [pc, #268]	@ (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d005      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x176>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d001      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e1c0      	b.n	8002e64 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae2:	4b3d      	ldr	r3, [pc, #244]	@ (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	4939      	ldr	r1, [pc, #228]	@ (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002af6:	e03a      	b.n	8002b6e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d020      	beq.n	8002b42 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b00:	4b36      	ldr	r3, [pc, #216]	@ (8002bdc <HAL_RCC_OscConfig+0x270>)
 8002b02:	2201      	movs	r2, #1
 8002b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b06:	f7ff fb8f 	bl	8002228 <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b0c:	e008      	b.n	8002b20 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b0e:	f7ff fb8b 	bl	8002228 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e1a1      	b.n	8002e64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b20:	4b2d      	ldr	r3, [pc, #180]	@ (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d0f0      	beq.n	8002b0e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b2c:	4b2a      	ldr	r3, [pc, #168]	@ (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	4927      	ldr	r1, [pc, #156]	@ (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	600b      	str	r3, [r1, #0]
 8002b40:	e015      	b.n	8002b6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b42:	4b26      	ldr	r3, [pc, #152]	@ (8002bdc <HAL_RCC_OscConfig+0x270>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b48:	f7ff fb6e 	bl	8002228 <HAL_GetTick>
 8002b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b50:	f7ff fb6a 	bl	8002228 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e180      	b.n	8002e64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b62:	4b1d      	ldr	r3, [pc, #116]	@ (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1f0      	bne.n	8002b50 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0308 	and.w	r3, r3, #8
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d03a      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d019      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b82:	4b17      	ldr	r3, [pc, #92]	@ (8002be0 <HAL_RCC_OscConfig+0x274>)
 8002b84:	2201      	movs	r2, #1
 8002b86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b88:	f7ff fb4e 	bl	8002228 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b90:	f7ff fb4a 	bl	8002228 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e160      	b.n	8002e64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8002bd8 <HAL_RCC_OscConfig+0x26c>)
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d0f0      	beq.n	8002b90 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002bae:	2001      	movs	r0, #1
 8002bb0:	f000 face 	bl	8003150 <RCC_Delay>
 8002bb4:	e01c      	b.n	8002bf0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8002be0 <HAL_RCC_OscConfig+0x274>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bbc:	f7ff fb34 	bl	8002228 <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bc2:	e00f      	b.n	8002be4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bc4:	f7ff fb30 	bl	8002228 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d908      	bls.n	8002be4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e146      	b.n	8002e64 <HAL_RCC_OscConfig+0x4f8>
 8002bd6:	bf00      	nop
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	42420000 	.word	0x42420000
 8002be0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002be4:	4b92      	ldr	r3, [pc, #584]	@ (8002e30 <HAL_RCC_OscConfig+0x4c4>)
 8002be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1e9      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f000 80a6 	beq.w	8002d4a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c02:	4b8b      	ldr	r3, [pc, #556]	@ (8002e30 <HAL_RCC_OscConfig+0x4c4>)
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10d      	bne.n	8002c2a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c0e:	4b88      	ldr	r3, [pc, #544]	@ (8002e30 <HAL_RCC_OscConfig+0x4c4>)
 8002c10:	69db      	ldr	r3, [r3, #28]
 8002c12:	4a87      	ldr	r2, [pc, #540]	@ (8002e30 <HAL_RCC_OscConfig+0x4c4>)
 8002c14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c18:	61d3      	str	r3, [r2, #28]
 8002c1a:	4b85      	ldr	r3, [pc, #532]	@ (8002e30 <HAL_RCC_OscConfig+0x4c4>)
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c22:	60bb      	str	r3, [r7, #8]
 8002c24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c26:	2301      	movs	r3, #1
 8002c28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c2a:	4b82      	ldr	r3, [pc, #520]	@ (8002e34 <HAL_RCC_OscConfig+0x4c8>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d118      	bne.n	8002c68 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c36:	4b7f      	ldr	r3, [pc, #508]	@ (8002e34 <HAL_RCC_OscConfig+0x4c8>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a7e      	ldr	r2, [pc, #504]	@ (8002e34 <HAL_RCC_OscConfig+0x4c8>)
 8002c3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c42:	f7ff faf1 	bl	8002228 <HAL_GetTick>
 8002c46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c48:	e008      	b.n	8002c5c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c4a:	f7ff faed 	bl	8002228 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b64      	cmp	r3, #100	@ 0x64
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e103      	b.n	8002e64 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c5c:	4b75      	ldr	r3, [pc, #468]	@ (8002e34 <HAL_RCC_OscConfig+0x4c8>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d0f0      	beq.n	8002c4a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d106      	bne.n	8002c7e <HAL_RCC_OscConfig+0x312>
 8002c70:	4b6f      	ldr	r3, [pc, #444]	@ (8002e30 <HAL_RCC_OscConfig+0x4c4>)
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	4a6e      	ldr	r2, [pc, #440]	@ (8002e30 <HAL_RCC_OscConfig+0x4c4>)
 8002c76:	f043 0301 	orr.w	r3, r3, #1
 8002c7a:	6213      	str	r3, [r2, #32]
 8002c7c:	e02d      	b.n	8002cda <HAL_RCC_OscConfig+0x36e>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10c      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x334>
 8002c86:	4b6a      	ldr	r3, [pc, #424]	@ (8002e30 <HAL_RCC_OscConfig+0x4c4>)
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	4a69      	ldr	r2, [pc, #420]	@ (8002e30 <HAL_RCC_OscConfig+0x4c4>)
 8002c8c:	f023 0301 	bic.w	r3, r3, #1
 8002c90:	6213      	str	r3, [r2, #32]
 8002c92:	4b67      	ldr	r3, [pc, #412]	@ (8002e30 <HAL_RCC_OscConfig+0x4c4>)
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	4a66      	ldr	r2, [pc, #408]	@ (8002e30 <HAL_RCC_OscConfig+0x4c4>)
 8002c98:	f023 0304 	bic.w	r3, r3, #4
 8002c9c:	6213      	str	r3, [r2, #32]
 8002c9e:	e01c      	b.n	8002cda <HAL_RCC_OscConfig+0x36e>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	2b05      	cmp	r3, #5
 8002ca6:	d10c      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x356>
 8002ca8:	4b61      	ldr	r3, [pc, #388]	@ (8002e30 <HAL_RCC_OscConfig+0x4c4>)
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	4a60      	ldr	r2, [pc, #384]	@ (8002e30 <HAL_RCC_OscConfig+0x4c4>)
 8002cae:	f043 0304 	orr.w	r3, r3, #4
 8002cb2:	6213      	str	r3, [r2, #32]
 8002cb4:	4b5e      	ldr	r3, [pc, #376]	@ (8002e30 <HAL_RCC_OscConfig+0x4c4>)
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	4a5d      	ldr	r2, [pc, #372]	@ (8002e30 <HAL_RCC_OscConfig+0x4c4>)
 8002cba:	f043 0301 	orr.w	r3, r3, #1
 8002cbe:	6213      	str	r3, [r2, #32]
 8002cc0:	e00b      	b.n	8002cda <HAL_RCC_OscConfig+0x36e>
 8002cc2:	4b5b      	ldr	r3, [pc, #364]	@ (8002e30 <HAL_RCC_OscConfig+0x4c4>)
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	4a5a      	ldr	r2, [pc, #360]	@ (8002e30 <HAL_RCC_OscConfig+0x4c4>)
 8002cc8:	f023 0301 	bic.w	r3, r3, #1
 8002ccc:	6213      	str	r3, [r2, #32]
 8002cce:	4b58      	ldr	r3, [pc, #352]	@ (8002e30 <HAL_RCC_OscConfig+0x4c4>)
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	4a57      	ldr	r2, [pc, #348]	@ (8002e30 <HAL_RCC_OscConfig+0x4c4>)
 8002cd4:	f023 0304 	bic.w	r3, r3, #4
 8002cd8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d015      	beq.n	8002d0e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ce2:	f7ff faa1 	bl	8002228 <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ce8:	e00a      	b.n	8002d00 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cea:	f7ff fa9d 	bl	8002228 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e0b1      	b.n	8002e64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d00:	4b4b      	ldr	r3, [pc, #300]	@ (8002e30 <HAL_RCC_OscConfig+0x4c4>)
 8002d02:	6a1b      	ldr	r3, [r3, #32]
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d0ee      	beq.n	8002cea <HAL_RCC_OscConfig+0x37e>
 8002d0c:	e014      	b.n	8002d38 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d0e:	f7ff fa8b 	bl	8002228 <HAL_GetTick>
 8002d12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d14:	e00a      	b.n	8002d2c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d16:	f7ff fa87 	bl	8002228 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e09b      	b.n	8002e64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d2c:	4b40      	ldr	r3, [pc, #256]	@ (8002e30 <HAL_RCC_OscConfig+0x4c4>)
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1ee      	bne.n	8002d16 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d38:	7dfb      	ldrb	r3, [r7, #23]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d105      	bne.n	8002d4a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d3e:	4b3c      	ldr	r3, [pc, #240]	@ (8002e30 <HAL_RCC_OscConfig+0x4c4>)
 8002d40:	69db      	ldr	r3, [r3, #28]
 8002d42:	4a3b      	ldr	r2, [pc, #236]	@ (8002e30 <HAL_RCC_OscConfig+0x4c4>)
 8002d44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d48:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	69db      	ldr	r3, [r3, #28]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f000 8087 	beq.w	8002e62 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d54:	4b36      	ldr	r3, [pc, #216]	@ (8002e30 <HAL_RCC_OscConfig+0x4c4>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f003 030c 	and.w	r3, r3, #12
 8002d5c:	2b08      	cmp	r3, #8
 8002d5e:	d061      	beq.n	8002e24 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	69db      	ldr	r3, [r3, #28]
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d146      	bne.n	8002df6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d68:	4b33      	ldr	r3, [pc, #204]	@ (8002e38 <HAL_RCC_OscConfig+0x4cc>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6e:	f7ff fa5b 	bl	8002228 <HAL_GetTick>
 8002d72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d74:	e008      	b.n	8002d88 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d76:	f7ff fa57 	bl	8002228 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e06d      	b.n	8002e64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d88:	4b29      	ldr	r3, [pc, #164]	@ (8002e30 <HAL_RCC_OscConfig+0x4c4>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1f0      	bne.n	8002d76 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d9c:	d108      	bne.n	8002db0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d9e:	4b24      	ldr	r3, [pc, #144]	@ (8002e30 <HAL_RCC_OscConfig+0x4c4>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	4921      	ldr	r1, [pc, #132]	@ (8002e30 <HAL_RCC_OscConfig+0x4c4>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002db0:	4b1f      	ldr	r3, [pc, #124]	@ (8002e30 <HAL_RCC_OscConfig+0x4c4>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a19      	ldr	r1, [r3, #32]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc0:	430b      	orrs	r3, r1
 8002dc2:	491b      	ldr	r1, [pc, #108]	@ (8002e30 <HAL_RCC_OscConfig+0x4c4>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dc8:	4b1b      	ldr	r3, [pc, #108]	@ (8002e38 <HAL_RCC_OscConfig+0x4cc>)
 8002dca:	2201      	movs	r2, #1
 8002dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dce:	f7ff fa2b 	bl	8002228 <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dd4:	e008      	b.n	8002de8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd6:	f7ff fa27 	bl	8002228 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e03d      	b.n	8002e64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002de8:	4b11      	ldr	r3, [pc, #68]	@ (8002e30 <HAL_RCC_OscConfig+0x4c4>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d0f0      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x46a>
 8002df4:	e035      	b.n	8002e62 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002df6:	4b10      	ldr	r3, [pc, #64]	@ (8002e38 <HAL_RCC_OscConfig+0x4cc>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfc:	f7ff fa14 	bl	8002228 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e04:	f7ff fa10 	bl	8002228 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e026      	b.n	8002e64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e16:	4b06      	ldr	r3, [pc, #24]	@ (8002e30 <HAL_RCC_OscConfig+0x4c4>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1f0      	bne.n	8002e04 <HAL_RCC_OscConfig+0x498>
 8002e22:	e01e      	b.n	8002e62 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d107      	bne.n	8002e3c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e019      	b.n	8002e64 <HAL_RCC_OscConfig+0x4f8>
 8002e30:	40021000 	.word	0x40021000
 8002e34:	40007000 	.word	0x40007000
 8002e38:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e6c <HAL_RCC_OscConfig+0x500>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d106      	bne.n	8002e5e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d001      	beq.n	8002e62 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e000      	b.n	8002e64 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3718      	adds	r7, #24
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	40021000 	.word	0x40021000

08002e70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d101      	bne.n	8002e84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e0d0      	b.n	8003026 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e84:	4b6a      	ldr	r3, [pc, #424]	@ (8003030 <HAL_RCC_ClockConfig+0x1c0>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d910      	bls.n	8002eb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e92:	4b67      	ldr	r3, [pc, #412]	@ (8003030 <HAL_RCC_ClockConfig+0x1c0>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f023 0207 	bic.w	r2, r3, #7
 8002e9a:	4965      	ldr	r1, [pc, #404]	@ (8003030 <HAL_RCC_ClockConfig+0x1c0>)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ea2:	4b63      	ldr	r3, [pc, #396]	@ (8003030 <HAL_RCC_ClockConfig+0x1c0>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0307 	and.w	r3, r3, #7
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d001      	beq.n	8002eb4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e0b8      	b.n	8003026 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0302 	and.w	r3, r3, #2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d020      	beq.n	8002f02 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0304 	and.w	r3, r3, #4
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d005      	beq.n	8002ed8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ecc:	4b59      	ldr	r3, [pc, #356]	@ (8003034 <HAL_RCC_ClockConfig+0x1c4>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	4a58      	ldr	r2, [pc, #352]	@ (8003034 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002ed6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0308 	and.w	r3, r3, #8
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d005      	beq.n	8002ef0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ee4:	4b53      	ldr	r3, [pc, #332]	@ (8003034 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	4a52      	ldr	r2, [pc, #328]	@ (8003034 <HAL_RCC_ClockConfig+0x1c4>)
 8002eea:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002eee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ef0:	4b50      	ldr	r3, [pc, #320]	@ (8003034 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	494d      	ldr	r1, [pc, #308]	@ (8003034 <HAL_RCC_ClockConfig+0x1c4>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d040      	beq.n	8002f90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d107      	bne.n	8002f26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f16:	4b47      	ldr	r3, [pc, #284]	@ (8003034 <HAL_RCC_ClockConfig+0x1c4>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d115      	bne.n	8002f4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e07f      	b.n	8003026 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d107      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f2e:	4b41      	ldr	r3, [pc, #260]	@ (8003034 <HAL_RCC_ClockConfig+0x1c4>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d109      	bne.n	8002f4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e073      	b.n	8003026 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f3e:	4b3d      	ldr	r3, [pc, #244]	@ (8003034 <HAL_RCC_ClockConfig+0x1c4>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e06b      	b.n	8003026 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f4e:	4b39      	ldr	r3, [pc, #228]	@ (8003034 <HAL_RCC_ClockConfig+0x1c4>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f023 0203 	bic.w	r2, r3, #3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	4936      	ldr	r1, [pc, #216]	@ (8003034 <HAL_RCC_ClockConfig+0x1c4>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f60:	f7ff f962 	bl	8002228 <HAL_GetTick>
 8002f64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f66:	e00a      	b.n	8002f7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f68:	f7ff f95e 	bl	8002228 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e053      	b.n	8003026 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f7e:	4b2d      	ldr	r3, [pc, #180]	@ (8003034 <HAL_RCC_ClockConfig+0x1c4>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f003 020c 	and.w	r2, r3, #12
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d1eb      	bne.n	8002f68 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f90:	4b27      	ldr	r3, [pc, #156]	@ (8003030 <HAL_RCC_ClockConfig+0x1c0>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0307 	and.w	r3, r3, #7
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d210      	bcs.n	8002fc0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f9e:	4b24      	ldr	r3, [pc, #144]	@ (8003030 <HAL_RCC_ClockConfig+0x1c0>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f023 0207 	bic.w	r2, r3, #7
 8002fa6:	4922      	ldr	r1, [pc, #136]	@ (8003030 <HAL_RCC_ClockConfig+0x1c0>)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fae:	4b20      	ldr	r3, [pc, #128]	@ (8003030 <HAL_RCC_ClockConfig+0x1c0>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0307 	and.w	r3, r3, #7
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d001      	beq.n	8002fc0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e032      	b.n	8003026 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0304 	and.w	r3, r3, #4
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d008      	beq.n	8002fde <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fcc:	4b19      	ldr	r3, [pc, #100]	@ (8003034 <HAL_RCC_ClockConfig+0x1c4>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	4916      	ldr	r1, [pc, #88]	@ (8003034 <HAL_RCC_ClockConfig+0x1c4>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0308 	and.w	r3, r3, #8
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d009      	beq.n	8002ffe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fea:	4b12      	ldr	r3, [pc, #72]	@ (8003034 <HAL_RCC_ClockConfig+0x1c4>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	00db      	lsls	r3, r3, #3
 8002ff8:	490e      	ldr	r1, [pc, #56]	@ (8003034 <HAL_RCC_ClockConfig+0x1c4>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ffe:	f000 f821 	bl	8003044 <HAL_RCC_GetSysClockFreq>
 8003002:	4602      	mov	r2, r0
 8003004:	4b0b      	ldr	r3, [pc, #44]	@ (8003034 <HAL_RCC_ClockConfig+0x1c4>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	091b      	lsrs	r3, r3, #4
 800300a:	f003 030f 	and.w	r3, r3, #15
 800300e:	490a      	ldr	r1, [pc, #40]	@ (8003038 <HAL_RCC_ClockConfig+0x1c8>)
 8003010:	5ccb      	ldrb	r3, [r1, r3]
 8003012:	fa22 f303 	lsr.w	r3, r2, r3
 8003016:	4a09      	ldr	r2, [pc, #36]	@ (800303c <HAL_RCC_ClockConfig+0x1cc>)
 8003018:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800301a:	4b09      	ldr	r3, [pc, #36]	@ (8003040 <HAL_RCC_ClockConfig+0x1d0>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4618      	mov	r0, r3
 8003020:	f7ff f8c0 	bl	80021a4 <HAL_InitTick>

  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	40022000 	.word	0x40022000
 8003034:	40021000 	.word	0x40021000
 8003038:	080081ec 	.word	0x080081ec
 800303c:	20000000 	.word	0x20000000
 8003040:	20000004 	.word	0x20000004

08003044 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003044:	b480      	push	{r7}
 8003046:	b087      	sub	sp, #28
 8003048:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800304a:	2300      	movs	r3, #0
 800304c:	60fb      	str	r3, [r7, #12]
 800304e:	2300      	movs	r3, #0
 8003050:	60bb      	str	r3, [r7, #8]
 8003052:	2300      	movs	r3, #0
 8003054:	617b      	str	r3, [r7, #20]
 8003056:	2300      	movs	r3, #0
 8003058:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800305a:	2300      	movs	r3, #0
 800305c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800305e:	4b1e      	ldr	r3, [pc, #120]	@ (80030d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f003 030c 	and.w	r3, r3, #12
 800306a:	2b04      	cmp	r3, #4
 800306c:	d002      	beq.n	8003074 <HAL_RCC_GetSysClockFreq+0x30>
 800306e:	2b08      	cmp	r3, #8
 8003070:	d003      	beq.n	800307a <HAL_RCC_GetSysClockFreq+0x36>
 8003072:	e027      	b.n	80030c4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003074:	4b19      	ldr	r3, [pc, #100]	@ (80030dc <HAL_RCC_GetSysClockFreq+0x98>)
 8003076:	613b      	str	r3, [r7, #16]
      break;
 8003078:	e027      	b.n	80030ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	0c9b      	lsrs	r3, r3, #18
 800307e:	f003 030f 	and.w	r3, r3, #15
 8003082:	4a17      	ldr	r2, [pc, #92]	@ (80030e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003084:	5cd3      	ldrb	r3, [r2, r3]
 8003086:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d010      	beq.n	80030b4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003092:	4b11      	ldr	r3, [pc, #68]	@ (80030d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	0c5b      	lsrs	r3, r3, #17
 8003098:	f003 0301 	and.w	r3, r3, #1
 800309c:	4a11      	ldr	r2, [pc, #68]	@ (80030e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800309e:	5cd3      	ldrb	r3, [r2, r3]
 80030a0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a0d      	ldr	r2, [pc, #52]	@ (80030dc <HAL_RCC_GetSysClockFreq+0x98>)
 80030a6:	fb03 f202 	mul.w	r2, r3, r2
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b0:	617b      	str	r3, [r7, #20]
 80030b2:	e004      	b.n	80030be <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a0c      	ldr	r2, [pc, #48]	@ (80030e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80030b8:	fb02 f303 	mul.w	r3, r2, r3
 80030bc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	613b      	str	r3, [r7, #16]
      break;
 80030c2:	e002      	b.n	80030ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030c4:	4b05      	ldr	r3, [pc, #20]	@ (80030dc <HAL_RCC_GetSysClockFreq+0x98>)
 80030c6:	613b      	str	r3, [r7, #16]
      break;
 80030c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030ca:	693b      	ldr	r3, [r7, #16]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	371c      	adds	r7, #28
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bc80      	pop	{r7}
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	40021000 	.word	0x40021000
 80030dc:	007a1200 	.word	0x007a1200
 80030e0:	08008204 	.word	0x08008204
 80030e4:	08008214 	.word	0x08008214
 80030e8:	003d0900 	.word	0x003d0900

080030ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030f0:	4b02      	ldr	r3, [pc, #8]	@ (80030fc <HAL_RCC_GetHCLKFreq+0x10>)
 80030f2:	681b      	ldr	r3, [r3, #0]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bc80      	pop	{r7}
 80030fa:	4770      	bx	lr
 80030fc:	20000000 	.word	0x20000000

08003100 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003104:	f7ff fff2 	bl	80030ec <HAL_RCC_GetHCLKFreq>
 8003108:	4602      	mov	r2, r0
 800310a:	4b05      	ldr	r3, [pc, #20]	@ (8003120 <HAL_RCC_GetPCLK1Freq+0x20>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	0a1b      	lsrs	r3, r3, #8
 8003110:	f003 0307 	and.w	r3, r3, #7
 8003114:	4903      	ldr	r1, [pc, #12]	@ (8003124 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003116:	5ccb      	ldrb	r3, [r1, r3]
 8003118:	fa22 f303 	lsr.w	r3, r2, r3
}
 800311c:	4618      	mov	r0, r3
 800311e:	bd80      	pop	{r7, pc}
 8003120:	40021000 	.word	0x40021000
 8003124:	080081fc 	.word	0x080081fc

08003128 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800312c:	f7ff ffde 	bl	80030ec <HAL_RCC_GetHCLKFreq>
 8003130:	4602      	mov	r2, r0
 8003132:	4b05      	ldr	r3, [pc, #20]	@ (8003148 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	0adb      	lsrs	r3, r3, #11
 8003138:	f003 0307 	and.w	r3, r3, #7
 800313c:	4903      	ldr	r1, [pc, #12]	@ (800314c <HAL_RCC_GetPCLK2Freq+0x24>)
 800313e:	5ccb      	ldrb	r3, [r1, r3]
 8003140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003144:	4618      	mov	r0, r3
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40021000 	.word	0x40021000
 800314c:	080081fc 	.word	0x080081fc

08003150 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003158:	4b0a      	ldr	r3, [pc, #40]	@ (8003184 <RCC_Delay+0x34>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a0a      	ldr	r2, [pc, #40]	@ (8003188 <RCC_Delay+0x38>)
 800315e:	fba2 2303 	umull	r2, r3, r2, r3
 8003162:	0a5b      	lsrs	r3, r3, #9
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	fb02 f303 	mul.w	r3, r2, r3
 800316a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800316c:	bf00      	nop
  }
  while (Delay --);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	1e5a      	subs	r2, r3, #1
 8003172:	60fa      	str	r2, [r7, #12]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d1f9      	bne.n	800316c <RCC_Delay+0x1c>
}
 8003178:	bf00      	nop
 800317a:	bf00      	nop
 800317c:	3714      	adds	r7, #20
 800317e:	46bd      	mov	sp, r7
 8003180:	bc80      	pop	{r7}
 8003182:	4770      	bx	lr
 8003184:	20000000 	.word	0x20000000
 8003188:	10624dd3 	.word	0x10624dd3

0800318c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e041      	b.n	8003222 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d106      	bne.n	80031b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7fe fe04 	bl	8001dc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2202      	movs	r2, #2
 80031bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	3304      	adds	r3, #4
 80031c8:	4619      	mov	r1, r3
 80031ca:	4610      	mov	r0, r2
 80031cc:	f000 fa74 	bl	80036b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
	...

0800322c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b01      	cmp	r3, #1
 800323e:	d001      	beq.n	8003244 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e03a      	b.n	80032ba <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2202      	movs	r2, #2
 8003248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68da      	ldr	r2, [r3, #12]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f042 0201 	orr.w	r2, r2, #1
 800325a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a18      	ldr	r2, [pc, #96]	@ (80032c4 <HAL_TIM_Base_Start_IT+0x98>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d00e      	beq.n	8003284 <HAL_TIM_Base_Start_IT+0x58>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800326e:	d009      	beq.n	8003284 <HAL_TIM_Base_Start_IT+0x58>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a14      	ldr	r2, [pc, #80]	@ (80032c8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d004      	beq.n	8003284 <HAL_TIM_Base_Start_IT+0x58>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a13      	ldr	r2, [pc, #76]	@ (80032cc <HAL_TIM_Base_Start_IT+0xa0>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d111      	bne.n	80032a8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 0307 	and.w	r3, r3, #7
 800328e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2b06      	cmp	r3, #6
 8003294:	d010      	beq.n	80032b8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f042 0201 	orr.w	r2, r2, #1
 80032a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032a6:	e007      	b.n	80032b8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f042 0201 	orr.w	r2, r2, #1
 80032b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3714      	adds	r7, #20
 80032be:	46bd      	mov	sp, r7
 80032c0:	bc80      	pop	{r7}
 80032c2:	4770      	bx	lr
 80032c4:	40012c00 	.word	0x40012c00
 80032c8:	40000400 	.word	0x40000400
 80032cc:	40000800 	.word	0x40000800

080032d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d122      	bne.n	800332c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d11b      	bne.n	800332c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f06f 0202 	mvn.w	r2, #2
 80032fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2201      	movs	r2, #1
 8003302:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	f003 0303 	and.w	r3, r3, #3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d003      	beq.n	800331a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 f9b4 	bl	8003680 <HAL_TIM_IC_CaptureCallback>
 8003318:	e005      	b.n	8003326 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 f9a7 	bl	800366e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 f9b6 	bl	8003692 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	f003 0304 	and.w	r3, r3, #4
 8003336:	2b04      	cmp	r3, #4
 8003338:	d122      	bne.n	8003380 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b04      	cmp	r3, #4
 8003346:	d11b      	bne.n	8003380 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f06f 0204 	mvn.w	r2, #4
 8003350:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2202      	movs	r2, #2
 8003356:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 f98a 	bl	8003680 <HAL_TIM_IC_CaptureCallback>
 800336c:	e005      	b.n	800337a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 f97d 	bl	800366e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f000 f98c 	bl	8003692 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	f003 0308 	and.w	r3, r3, #8
 800338a:	2b08      	cmp	r3, #8
 800338c:	d122      	bne.n	80033d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	f003 0308 	and.w	r3, r3, #8
 8003398:	2b08      	cmp	r3, #8
 800339a:	d11b      	bne.n	80033d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f06f 0208 	mvn.w	r2, #8
 80033a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2204      	movs	r2, #4
 80033aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	f003 0303 	and.w	r3, r3, #3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f960 	bl	8003680 <HAL_TIM_IC_CaptureCallback>
 80033c0:	e005      	b.n	80033ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 f953 	bl	800366e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 f962 	bl	8003692 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	f003 0310 	and.w	r3, r3, #16
 80033de:	2b10      	cmp	r3, #16
 80033e0:	d122      	bne.n	8003428 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	f003 0310 	and.w	r3, r3, #16
 80033ec:	2b10      	cmp	r3, #16
 80033ee:	d11b      	bne.n	8003428 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f06f 0210 	mvn.w	r2, #16
 80033f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2208      	movs	r2, #8
 80033fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f936 	bl	8003680 <HAL_TIM_IC_CaptureCallback>
 8003414:	e005      	b.n	8003422 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 f929 	bl	800366e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 f938 	bl	8003692 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b01      	cmp	r3, #1
 8003434:	d10e      	bne.n	8003454 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	f003 0301 	and.w	r3, r3, #1
 8003440:	2b01      	cmp	r3, #1
 8003442:	d107      	bne.n	8003454 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f06f 0201 	mvn.w	r2, #1
 800344c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f7fd fb1a 	bl	8000a88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800345e:	2b80      	cmp	r3, #128	@ 0x80
 8003460:	d10e      	bne.n	8003480 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800346c:	2b80      	cmp	r3, #128	@ 0x80
 800346e:	d107      	bne.n	8003480 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 fa7b 	bl	8003976 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800348a:	2b40      	cmp	r3, #64	@ 0x40
 800348c:	d10e      	bne.n	80034ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003498:	2b40      	cmp	r3, #64	@ 0x40
 800349a:	d107      	bne.n	80034ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80034a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 f8fc 	bl	80036a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	f003 0320 	and.w	r3, r3, #32
 80034b6:	2b20      	cmp	r3, #32
 80034b8:	d10e      	bne.n	80034d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	f003 0320 	and.w	r3, r3, #32
 80034c4:	2b20      	cmp	r3, #32
 80034c6:	d107      	bne.n	80034d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f06f 0220 	mvn.w	r2, #32
 80034d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 fa46 	bl	8003964 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034d8:	bf00      	nop
 80034da:	3708      	adds	r7, #8
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034ea:	2300      	movs	r3, #0
 80034ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d101      	bne.n	80034fc <HAL_TIM_ConfigClockSource+0x1c>
 80034f8:	2302      	movs	r3, #2
 80034fa:	e0b4      	b.n	8003666 <HAL_TIM_ConfigClockSource+0x186>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2202      	movs	r2, #2
 8003508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800351a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003522:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68ba      	ldr	r2, [r7, #8]
 800352a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003534:	d03e      	beq.n	80035b4 <HAL_TIM_ConfigClockSource+0xd4>
 8003536:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800353a:	f200 8087 	bhi.w	800364c <HAL_TIM_ConfigClockSource+0x16c>
 800353e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003542:	f000 8086 	beq.w	8003652 <HAL_TIM_ConfigClockSource+0x172>
 8003546:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800354a:	d87f      	bhi.n	800364c <HAL_TIM_ConfigClockSource+0x16c>
 800354c:	2b70      	cmp	r3, #112	@ 0x70
 800354e:	d01a      	beq.n	8003586 <HAL_TIM_ConfigClockSource+0xa6>
 8003550:	2b70      	cmp	r3, #112	@ 0x70
 8003552:	d87b      	bhi.n	800364c <HAL_TIM_ConfigClockSource+0x16c>
 8003554:	2b60      	cmp	r3, #96	@ 0x60
 8003556:	d050      	beq.n	80035fa <HAL_TIM_ConfigClockSource+0x11a>
 8003558:	2b60      	cmp	r3, #96	@ 0x60
 800355a:	d877      	bhi.n	800364c <HAL_TIM_ConfigClockSource+0x16c>
 800355c:	2b50      	cmp	r3, #80	@ 0x50
 800355e:	d03c      	beq.n	80035da <HAL_TIM_ConfigClockSource+0xfa>
 8003560:	2b50      	cmp	r3, #80	@ 0x50
 8003562:	d873      	bhi.n	800364c <HAL_TIM_ConfigClockSource+0x16c>
 8003564:	2b40      	cmp	r3, #64	@ 0x40
 8003566:	d058      	beq.n	800361a <HAL_TIM_ConfigClockSource+0x13a>
 8003568:	2b40      	cmp	r3, #64	@ 0x40
 800356a:	d86f      	bhi.n	800364c <HAL_TIM_ConfigClockSource+0x16c>
 800356c:	2b30      	cmp	r3, #48	@ 0x30
 800356e:	d064      	beq.n	800363a <HAL_TIM_ConfigClockSource+0x15a>
 8003570:	2b30      	cmp	r3, #48	@ 0x30
 8003572:	d86b      	bhi.n	800364c <HAL_TIM_ConfigClockSource+0x16c>
 8003574:	2b20      	cmp	r3, #32
 8003576:	d060      	beq.n	800363a <HAL_TIM_ConfigClockSource+0x15a>
 8003578:	2b20      	cmp	r3, #32
 800357a:	d867      	bhi.n	800364c <HAL_TIM_ConfigClockSource+0x16c>
 800357c:	2b00      	cmp	r3, #0
 800357e:	d05c      	beq.n	800363a <HAL_TIM_ConfigClockSource+0x15a>
 8003580:	2b10      	cmp	r3, #16
 8003582:	d05a      	beq.n	800363a <HAL_TIM_ConfigClockSource+0x15a>
 8003584:	e062      	b.n	800364c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003596:	f000 f968 	bl	800386a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80035a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	609a      	str	r2, [r3, #8]
      break;
 80035b2:	e04f      	b.n	8003654 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80035c4:	f000 f951 	bl	800386a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	689a      	ldr	r2, [r3, #8]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80035d6:	609a      	str	r2, [r3, #8]
      break;
 80035d8:	e03c      	b.n	8003654 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035e6:	461a      	mov	r2, r3
 80035e8:	f000 f8c8 	bl	800377c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2150      	movs	r1, #80	@ 0x50
 80035f2:	4618      	mov	r0, r3
 80035f4:	f000 f91f 	bl	8003836 <TIM_ITRx_SetConfig>
      break;
 80035f8:	e02c      	b.n	8003654 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003606:	461a      	mov	r2, r3
 8003608:	f000 f8e6 	bl	80037d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2160      	movs	r1, #96	@ 0x60
 8003612:	4618      	mov	r0, r3
 8003614:	f000 f90f 	bl	8003836 <TIM_ITRx_SetConfig>
      break;
 8003618:	e01c      	b.n	8003654 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003626:	461a      	mov	r2, r3
 8003628:	f000 f8a8 	bl	800377c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2140      	movs	r1, #64	@ 0x40
 8003632:	4618      	mov	r0, r3
 8003634:	f000 f8ff 	bl	8003836 <TIM_ITRx_SetConfig>
      break;
 8003638:	e00c      	b.n	8003654 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4619      	mov	r1, r3
 8003644:	4610      	mov	r0, r2
 8003646:	f000 f8f6 	bl	8003836 <TIM_ITRx_SetConfig>
      break;
 800364a:	e003      	b.n	8003654 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	73fb      	strb	r3, [r7, #15]
      break;
 8003650:	e000      	b.n	8003654 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003652:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003664:	7bfb      	ldrb	r3, [r7, #15]
}
 8003666:	4618      	mov	r0, r3
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800366e:	b480      	push	{r7}
 8003670:	b083      	sub	sp, #12
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003676:	bf00      	nop
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	bc80      	pop	{r7}
 800367e:	4770      	bx	lr

08003680 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	bc80      	pop	{r7}
 8003690:	4770      	bx	lr

08003692 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003692:	b480      	push	{r7}
 8003694:	b083      	sub	sp, #12
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800369a:	bf00      	nop
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	bc80      	pop	{r7}
 80036a2:	4770      	bx	lr

080036a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bc80      	pop	{r7}
 80036b4:	4770      	bx	lr
	...

080036b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a29      	ldr	r2, [pc, #164]	@ (8003770 <TIM_Base_SetConfig+0xb8>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d00b      	beq.n	80036e8 <TIM_Base_SetConfig+0x30>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036d6:	d007      	beq.n	80036e8 <TIM_Base_SetConfig+0x30>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a26      	ldr	r2, [pc, #152]	@ (8003774 <TIM_Base_SetConfig+0xbc>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d003      	beq.n	80036e8 <TIM_Base_SetConfig+0x30>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a25      	ldr	r2, [pc, #148]	@ (8003778 <TIM_Base_SetConfig+0xc0>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d108      	bne.n	80036fa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a1c      	ldr	r2, [pc, #112]	@ (8003770 <TIM_Base_SetConfig+0xb8>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d00b      	beq.n	800371a <TIM_Base_SetConfig+0x62>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003708:	d007      	beq.n	800371a <TIM_Base_SetConfig+0x62>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a19      	ldr	r2, [pc, #100]	@ (8003774 <TIM_Base_SetConfig+0xbc>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d003      	beq.n	800371a <TIM_Base_SetConfig+0x62>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a18      	ldr	r2, [pc, #96]	@ (8003778 <TIM_Base_SetConfig+0xc0>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d108      	bne.n	800372c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003720:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	4313      	orrs	r3, r2
 800372a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	4313      	orrs	r3, r2
 8003738:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a07      	ldr	r2, [pc, #28]	@ (8003770 <TIM_Base_SetConfig+0xb8>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d103      	bne.n	8003760 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	691a      	ldr	r2, [r3, #16]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	615a      	str	r2, [r3, #20]
}
 8003766:	bf00      	nop
 8003768:	3714      	adds	r7, #20
 800376a:	46bd      	mov	sp, r7
 800376c:	bc80      	pop	{r7}
 800376e:	4770      	bx	lr
 8003770:	40012c00 	.word	0x40012c00
 8003774:	40000400 	.word	0x40000400
 8003778:	40000800 	.word	0x40000800

0800377c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800377c:	b480      	push	{r7}
 800377e:	b087      	sub	sp, #28
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6a1b      	ldr	r3, [r3, #32]
 800378c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	f023 0201 	bic.w	r2, r3, #1
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	011b      	lsls	r3, r3, #4
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	f023 030a 	bic.w	r3, r3, #10
 80037b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	4313      	orrs	r3, r2
 80037c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	621a      	str	r2, [r3, #32]
}
 80037ce:	bf00      	nop
 80037d0:	371c      	adds	r7, #28
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bc80      	pop	{r7}
 80037d6:	4770      	bx	lr

080037d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037d8:	b480      	push	{r7}
 80037da:	b087      	sub	sp, #28
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6a1b      	ldr	r3, [r3, #32]
 80037e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	f023 0210 	bic.w	r2, r3, #16
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003802:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	031b      	lsls	r3, r3, #12
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	4313      	orrs	r3, r2
 800380c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003814:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	011b      	lsls	r3, r3, #4
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	4313      	orrs	r3, r2
 800381e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	621a      	str	r2, [r3, #32]
}
 800382c:	bf00      	nop
 800382e:	371c      	adds	r7, #28
 8003830:	46bd      	mov	sp, r7
 8003832:	bc80      	pop	{r7}
 8003834:	4770      	bx	lr

08003836 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003836:	b480      	push	{r7}
 8003838:	b085      	sub	sp, #20
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
 800383e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800384c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800384e:	683a      	ldr	r2, [r7, #0]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	4313      	orrs	r3, r2
 8003854:	f043 0307 	orr.w	r3, r3, #7
 8003858:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	609a      	str	r2, [r3, #8]
}
 8003860:	bf00      	nop
 8003862:	3714      	adds	r7, #20
 8003864:	46bd      	mov	sp, r7
 8003866:	bc80      	pop	{r7}
 8003868:	4770      	bx	lr

0800386a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800386a:	b480      	push	{r7}
 800386c:	b087      	sub	sp, #28
 800386e:	af00      	add	r7, sp, #0
 8003870:	60f8      	str	r0, [r7, #12]
 8003872:	60b9      	str	r1, [r7, #8]
 8003874:	607a      	str	r2, [r7, #4]
 8003876:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003884:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	021a      	lsls	r2, r3, #8
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	431a      	orrs	r2, r3
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	4313      	orrs	r3, r2
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	4313      	orrs	r3, r2
 8003896:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	609a      	str	r2, [r3, #8]
}
 800389e:	bf00      	nop
 80038a0:	371c      	adds	r7, #28
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bc80      	pop	{r7}
 80038a6:	4770      	bx	lr

080038a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d101      	bne.n	80038c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038bc:	2302      	movs	r3, #2
 80038be:	e046      	b.n	800394e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2202      	movs	r2, #2
 80038cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a16      	ldr	r2, [pc, #88]	@ (8003958 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d00e      	beq.n	8003922 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800390c:	d009      	beq.n	8003922 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a12      	ldr	r2, [pc, #72]	@ (800395c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d004      	beq.n	8003922 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a10      	ldr	r2, [pc, #64]	@ (8003960 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d10c      	bne.n	800393c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003928:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	68ba      	ldr	r2, [r7, #8]
 8003930:	4313      	orrs	r3, r2
 8003932:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68ba      	ldr	r2, [r7, #8]
 800393a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3714      	adds	r7, #20
 8003952:	46bd      	mov	sp, r7
 8003954:	bc80      	pop	{r7}
 8003956:	4770      	bx	lr
 8003958:	40012c00 	.word	0x40012c00
 800395c:	40000400 	.word	0x40000400
 8003960:	40000800 	.word	0x40000800

08003964 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	bc80      	pop	{r7}
 8003974:	4770      	bx	lr

08003976 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003976:	b480      	push	{r7}
 8003978:	b083      	sub	sp, #12
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800397e:	bf00      	nop
 8003980:	370c      	adds	r7, #12
 8003982:	46bd      	mov	sp, r7
 8003984:	bc80      	pop	{r7}
 8003986:	4770      	bx	lr

08003988 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d101      	bne.n	800399a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e042      	b.n	8003a20 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d106      	bne.n	80039b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f7fe fa44 	bl	8001e3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2224      	movs	r2, #36	@ 0x24
 80039b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68da      	ldr	r2, [r3, #12]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80039ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 fc7f 	bl	80042d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	691a      	ldr	r2, [r3, #16]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80039e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	695a      	ldr	r2, [r3, #20]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80039f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68da      	ldr	r2, [r3, #12]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2220      	movs	r2, #32
 8003a14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3708      	adds	r7, #8
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b0ba      	sub	sp, #232	@ 0xe8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003a54:	2300      	movs	r3, #0
 8003a56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a5e:	f003 030f 	and.w	r3, r3, #15
 8003a62:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003a66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10f      	bne.n	8003a8e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a72:	f003 0320 	and.w	r3, r3, #32
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d009      	beq.n	8003a8e <HAL_UART_IRQHandler+0x66>
 8003a7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a7e:	f003 0320 	and.w	r3, r3, #32
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d003      	beq.n	8003a8e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 fb63 	bl	8004152 <UART_Receive_IT>
      return;
 8003a8c:	e25b      	b.n	8003f46 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	f000 80de 	beq.w	8003c54 <HAL_UART_IRQHandler+0x22c>
 8003a98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d106      	bne.n	8003ab2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003aa8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f000 80d1 	beq.w	8003c54 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00b      	beq.n	8003ad6 <HAL_UART_IRQHandler+0xae>
 8003abe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ac2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d005      	beq.n	8003ad6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ace:	f043 0201 	orr.w	r2, r3, #1
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ada:	f003 0304 	and.w	r3, r3, #4
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00b      	beq.n	8003afa <HAL_UART_IRQHandler+0xd2>
 8003ae2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d005      	beq.n	8003afa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003af2:	f043 0202 	orr.w	r2, r3, #2
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00b      	beq.n	8003b1e <HAL_UART_IRQHandler+0xf6>
 8003b06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d005      	beq.n	8003b1e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b16:	f043 0204 	orr.w	r2, r3, #4
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b22:	f003 0308 	and.w	r3, r3, #8
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d011      	beq.n	8003b4e <HAL_UART_IRQHandler+0x126>
 8003b2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b2e:	f003 0320 	and.w	r3, r3, #32
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d105      	bne.n	8003b42 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d005      	beq.n	8003b4e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b46:	f043 0208 	orr.w	r2, r3, #8
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f000 81f2 	beq.w	8003f3c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b5c:	f003 0320 	and.w	r3, r3, #32
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d008      	beq.n	8003b76 <HAL_UART_IRQHandler+0x14e>
 8003b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b68:	f003 0320 	and.w	r3, r3, #32
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d002      	beq.n	8003b76 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 faee 	bl	8004152 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	695b      	ldr	r3, [r3, #20]
 8003b7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	bf14      	ite	ne
 8003b84:	2301      	movne	r3, #1
 8003b86:	2300      	moveq	r3, #0
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b92:	f003 0308 	and.w	r3, r3, #8
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d103      	bne.n	8003ba2 <HAL_UART_IRQHandler+0x17a>
 8003b9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d04f      	beq.n	8003c42 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 f9f8 	bl	8003f98 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d041      	beq.n	8003c3a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	3314      	adds	r3, #20
 8003bbc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003bc4:	e853 3f00 	ldrex	r3, [r3]
 8003bc8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003bcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003bd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bd4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	3314      	adds	r3, #20
 8003bde:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003be2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003be6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003bee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003bf2:	e841 2300 	strex	r3, r2, [r1]
 8003bf6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003bfa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1d9      	bne.n	8003bb6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d013      	beq.n	8003c32 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c0e:	4a7e      	ldr	r2, [pc, #504]	@ (8003e08 <HAL_UART_IRQHandler+0x3e0>)
 8003c10:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7fe fc7c 	bl	8002514 <HAL_DMA_Abort_IT>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d016      	beq.n	8003c50 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003c2c:	4610      	mov	r0, r2
 8003c2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c30:	e00e      	b.n	8003c50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f99c 	bl	8003f70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c38:	e00a      	b.n	8003c50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f998 	bl	8003f70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c40:	e006      	b.n	8003c50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f994 	bl	8003f70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003c4e:	e175      	b.n	8003f3c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c50:	bf00      	nop
    return;
 8003c52:	e173      	b.n	8003f3c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	f040 814f 	bne.w	8003efc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c62:	f003 0310 	and.w	r3, r3, #16
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f000 8148 	beq.w	8003efc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c70:	f003 0310 	and.w	r3, r3, #16
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f000 8141 	beq.w	8003efc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	60bb      	str	r3, [r7, #8]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	60bb      	str	r3, [r7, #8]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	60bb      	str	r3, [r7, #8]
 8003c8e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f000 80b6 	beq.w	8003e0c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003cac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 8145 	beq.w	8003f40 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003cba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	f080 813e 	bcs.w	8003f40 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003cca:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	2b20      	cmp	r3, #32
 8003cd4:	f000 8088 	beq.w	8003de8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	330c      	adds	r3, #12
 8003cde:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ce6:	e853 3f00 	ldrex	r3, [r3]
 8003cea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003cee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003cf2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cf6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	330c      	adds	r3, #12
 8003d00:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003d04:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003d08:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003d10:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003d14:	e841 2300 	strex	r3, r2, [r1]
 8003d18:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003d1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1d9      	bne.n	8003cd8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	3314      	adds	r3, #20
 8003d2a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d2e:	e853 3f00 	ldrex	r3, [r3]
 8003d32:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003d34:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d36:	f023 0301 	bic.w	r3, r3, #1
 8003d3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	3314      	adds	r3, #20
 8003d44:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003d48:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003d4c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003d50:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003d54:	e841 2300 	strex	r3, r2, [r1]
 8003d58:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003d5a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1e1      	bne.n	8003d24 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	3314      	adds	r3, #20
 8003d66:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d6a:	e853 3f00 	ldrex	r3, [r3]
 8003d6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003d70:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	3314      	adds	r3, #20
 8003d80:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003d84:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003d86:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d88:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003d8a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003d8c:	e841 2300 	strex	r3, r2, [r1]
 8003d90:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003d92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1e3      	bne.n	8003d60 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	330c      	adds	r3, #12
 8003dac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003db0:	e853 3f00 	ldrex	r3, [r3]
 8003db4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003db6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003db8:	f023 0310 	bic.w	r3, r3, #16
 8003dbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	330c      	adds	r3, #12
 8003dc6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003dca:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003dcc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003dd0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003dd2:	e841 2300 	strex	r3, r2, [r1]
 8003dd6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003dd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1e3      	bne.n	8003da6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7fe fb5b 	bl	800249e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2202      	movs	r2, #2
 8003dec:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f8bf 	bl	8003f82 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e04:	e09c      	b.n	8003f40 <HAL_UART_IRQHandler+0x518>
 8003e06:	bf00      	nop
 8003e08:	0800405d 	.word	0x0800405d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f000 808e 	beq.w	8003f44 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003e28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 8089 	beq.w	8003f44 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	330c      	adds	r3, #12
 8003e38:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e3c:	e853 3f00 	ldrex	r3, [r3]
 8003e40:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003e42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e48:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	330c      	adds	r3, #12
 8003e52:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003e56:	647a      	str	r2, [r7, #68]	@ 0x44
 8003e58:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e5c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e5e:	e841 2300 	strex	r3, r2, [r1]
 8003e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1e3      	bne.n	8003e32 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	3314      	adds	r3, #20
 8003e70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e74:	e853 3f00 	ldrex	r3, [r3]
 8003e78:	623b      	str	r3, [r7, #32]
   return(result);
 8003e7a:	6a3b      	ldr	r3, [r7, #32]
 8003e7c:	f023 0301 	bic.w	r3, r3, #1
 8003e80:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	3314      	adds	r3, #20
 8003e8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003e8e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e96:	e841 2300 	strex	r3, r2, [r1]
 8003e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1e3      	bne.n	8003e6a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	330c      	adds	r3, #12
 8003eb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	e853 3f00 	ldrex	r3, [r3]
 8003ebe:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f023 0310 	bic.w	r3, r3, #16
 8003ec6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	330c      	adds	r3, #12
 8003ed0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003ed4:	61fa      	str	r2, [r7, #28]
 8003ed6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed8:	69b9      	ldr	r1, [r7, #24]
 8003eda:	69fa      	ldr	r2, [r7, #28]
 8003edc:	e841 2300 	strex	r3, r2, [r1]
 8003ee0:	617b      	str	r3, [r7, #20]
   return(result);
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1e3      	bne.n	8003eb0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2202      	movs	r2, #2
 8003eec:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003eee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f000 f844 	bl	8003f82 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003efa:	e023      	b.n	8003f44 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d009      	beq.n	8003f1c <HAL_UART_IRQHandler+0x4f4>
 8003f08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d003      	beq.n	8003f1c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 f8b5 	bl	8004084 <UART_Transmit_IT>
    return;
 8003f1a:	e014      	b.n	8003f46 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00e      	beq.n	8003f46 <HAL_UART_IRQHandler+0x51e>
 8003f28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d008      	beq.n	8003f46 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 f8f4 	bl	8004122 <UART_EndTransmit_IT>
    return;
 8003f3a:	e004      	b.n	8003f46 <HAL_UART_IRQHandler+0x51e>
    return;
 8003f3c:	bf00      	nop
 8003f3e:	e002      	b.n	8003f46 <HAL_UART_IRQHandler+0x51e>
      return;
 8003f40:	bf00      	nop
 8003f42:	e000      	b.n	8003f46 <HAL_UART_IRQHandler+0x51e>
      return;
 8003f44:	bf00      	nop
  }
}
 8003f46:	37e8      	adds	r7, #232	@ 0xe8
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bc80      	pop	{r7}
 8003f5c:	4770      	bx	lr

08003f5e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f5e:	b480      	push	{r7}
 8003f60:	b083      	sub	sp, #12
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003f66:	bf00      	nop
 8003f68:	370c      	adds	r7, #12
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bc80      	pop	{r7}
 8003f6e:	4770      	bx	lr

08003f70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bc80      	pop	{r7}
 8003f80:	4770      	bx	lr

08003f82 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f82:	b480      	push	{r7}
 8003f84:	b083      	sub	sp, #12
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f8e:	bf00      	nop
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bc80      	pop	{r7}
 8003f96:	4770      	bx	lr

08003f98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b095      	sub	sp, #84	@ 0x54
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	330c      	adds	r3, #12
 8003fa6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003faa:	e853 3f00 	ldrex	r3, [r3]
 8003fae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fb2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003fb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	330c      	adds	r3, #12
 8003fbe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003fc0:	643a      	str	r2, [r7, #64]	@ 0x40
 8003fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003fc6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003fc8:	e841 2300 	strex	r3, r2, [r1]
 8003fcc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1e5      	bne.n	8003fa0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	3314      	adds	r3, #20
 8003fda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fdc:	6a3b      	ldr	r3, [r7, #32]
 8003fde:	e853 3f00 	ldrex	r3, [r3]
 8003fe2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	f023 0301 	bic.w	r3, r3, #1
 8003fea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	3314      	adds	r3, #20
 8003ff2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ff4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ffa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ffc:	e841 2300 	strex	r3, r2, [r1]
 8004000:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1e5      	bne.n	8003fd4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800400c:	2b01      	cmp	r3, #1
 800400e:	d119      	bne.n	8004044 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	330c      	adds	r3, #12
 8004016:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	e853 3f00 	ldrex	r3, [r3]
 800401e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	f023 0310 	bic.w	r3, r3, #16
 8004026:	647b      	str	r3, [r7, #68]	@ 0x44
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	330c      	adds	r3, #12
 800402e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004030:	61ba      	str	r2, [r7, #24]
 8004032:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004034:	6979      	ldr	r1, [r7, #20]
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	e841 2300 	strex	r3, r2, [r1]
 800403c:	613b      	str	r3, [r7, #16]
   return(result);
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1e5      	bne.n	8004010 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2220      	movs	r2, #32
 8004048:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004052:	bf00      	nop
 8004054:	3754      	adds	r7, #84	@ 0x54
 8004056:	46bd      	mov	sp, r7
 8004058:	bc80      	pop	{r7}
 800405a:	4770      	bx	lr

0800405c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004068:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f7ff ff7a 	bl	8003f70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800407c:	bf00      	nop
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004092:	b2db      	uxtb	r3, r3
 8004094:	2b21      	cmp	r3, #33	@ 0x21
 8004096:	d13e      	bne.n	8004116 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040a0:	d114      	bne.n	80040cc <UART_Transmit_IT+0x48>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d110      	bne.n	80040cc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	881b      	ldrh	r3, [r3, #0]
 80040b4:	461a      	mov	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040be:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a1b      	ldr	r3, [r3, #32]
 80040c4:	1c9a      	adds	r2, r3, #2
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	621a      	str	r2, [r3, #32]
 80040ca:	e008      	b.n	80040de <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a1b      	ldr	r3, [r3, #32]
 80040d0:	1c59      	adds	r1, r3, #1
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	6211      	str	r1, [r2, #32]
 80040d6:	781a      	ldrb	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	3b01      	subs	r3, #1
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	4619      	mov	r1, r3
 80040ec:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d10f      	bne.n	8004112 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68da      	ldr	r2, [r3, #12]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004100:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68da      	ldr	r2, [r3, #12]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004110:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004112:	2300      	movs	r3, #0
 8004114:	e000      	b.n	8004118 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004116:	2302      	movs	r3, #2
  }
}
 8004118:	4618      	mov	r0, r3
 800411a:	3714      	adds	r7, #20
 800411c:	46bd      	mov	sp, r7
 800411e:	bc80      	pop	{r7}
 8004120:	4770      	bx	lr

08004122 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004122:	b580      	push	{r7, lr}
 8004124:	b082      	sub	sp, #8
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68da      	ldr	r2, [r3, #12]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004138:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2220      	movs	r2, #32
 800413e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f7ff ff02 	bl	8003f4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3708      	adds	r7, #8
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004152:	b580      	push	{r7, lr}
 8004154:	b08c      	sub	sp, #48	@ 0x30
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b22      	cmp	r3, #34	@ 0x22
 8004164:	f040 80ae 	bne.w	80042c4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004170:	d117      	bne.n	80041a2 <UART_Receive_IT+0x50>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d113      	bne.n	80041a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800417a:	2300      	movs	r3, #0
 800417c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004182:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	b29b      	uxth	r3, r3
 800418c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004190:	b29a      	uxth	r2, r3
 8004192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004194:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800419a:	1c9a      	adds	r2, r3, #2
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	629a      	str	r2, [r3, #40]	@ 0x28
 80041a0:	e026      	b.n	80041f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80041a8:	2300      	movs	r3, #0
 80041aa:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041b4:	d007      	beq.n	80041c6 <UART_Receive_IT+0x74>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10a      	bne.n	80041d4 <UART_Receive_IT+0x82>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d106      	bne.n	80041d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	b2da      	uxtb	r2, r3
 80041ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041d0:	701a      	strb	r2, [r3, #0]
 80041d2:	e008      	b.n	80041e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041e0:	b2da      	uxtb	r2, r3
 80041e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ea:	1c5a      	adds	r2, r3, #1
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	3b01      	subs	r3, #1
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	4619      	mov	r1, r3
 80041fe:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004200:	2b00      	cmp	r3, #0
 8004202:	d15d      	bne.n	80042c0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68da      	ldr	r2, [r3, #12]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f022 0220 	bic.w	r2, r2, #32
 8004212:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68da      	ldr	r2, [r3, #12]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004222:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	695a      	ldr	r2, [r3, #20]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f022 0201 	bic.w	r2, r2, #1
 8004232:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2220      	movs	r2, #32
 8004238:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004246:	2b01      	cmp	r3, #1
 8004248:	d135      	bne.n	80042b6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	330c      	adds	r3, #12
 8004256:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	e853 3f00 	ldrex	r3, [r3]
 800425e:	613b      	str	r3, [r7, #16]
   return(result);
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	f023 0310 	bic.w	r3, r3, #16
 8004266:	627b      	str	r3, [r7, #36]	@ 0x24
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	330c      	adds	r3, #12
 800426e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004270:	623a      	str	r2, [r7, #32]
 8004272:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004274:	69f9      	ldr	r1, [r7, #28]
 8004276:	6a3a      	ldr	r2, [r7, #32]
 8004278:	e841 2300 	strex	r3, r2, [r1]
 800427c:	61bb      	str	r3, [r7, #24]
   return(result);
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1e5      	bne.n	8004250 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0310 	and.w	r3, r3, #16
 800428e:	2b10      	cmp	r3, #16
 8004290:	d10a      	bne.n	80042a8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004292:	2300      	movs	r3, #0
 8004294:	60fb      	str	r3, [r7, #12]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	60fb      	str	r3, [r7, #12]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	60fb      	str	r3, [r7, #12]
 80042a6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80042ac:	4619      	mov	r1, r3
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7ff fe67 	bl	8003f82 <HAL_UARTEx_RxEventCallback>
 80042b4:	e002      	b.n	80042bc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f7ff fe51 	bl	8003f5e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80042bc:	2300      	movs	r3, #0
 80042be:	e002      	b.n	80042c6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80042c0:	2300      	movs	r3, #0
 80042c2:	e000      	b.n	80042c6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80042c4:	2302      	movs	r3, #2
  }
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3730      	adds	r7, #48	@ 0x30
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
	...

080042d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68da      	ldr	r2, [r3, #12]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	430a      	orrs	r2, r1
 80042ec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	689a      	ldr	r2, [r3, #8]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	431a      	orrs	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800430a:	f023 030c 	bic.w	r3, r3, #12
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	6812      	ldr	r2, [r2, #0]
 8004312:	68b9      	ldr	r1, [r7, #8]
 8004314:	430b      	orrs	r3, r1
 8004316:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	699a      	ldr	r2, [r3, #24]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	430a      	orrs	r2, r1
 800432c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a2c      	ldr	r2, [pc, #176]	@ (80043e4 <UART_SetConfig+0x114>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d103      	bne.n	8004340 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004338:	f7fe fef6 	bl	8003128 <HAL_RCC_GetPCLK2Freq>
 800433c:	60f8      	str	r0, [r7, #12]
 800433e:	e002      	b.n	8004346 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004340:	f7fe fede 	bl	8003100 <HAL_RCC_GetPCLK1Freq>
 8004344:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	4613      	mov	r3, r2
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	4413      	add	r3, r2
 800434e:	009a      	lsls	r2, r3, #2
 8004350:	441a      	add	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	fbb2 f3f3 	udiv	r3, r2, r3
 800435c:	4a22      	ldr	r2, [pc, #136]	@ (80043e8 <UART_SetConfig+0x118>)
 800435e:	fba2 2303 	umull	r2, r3, r2, r3
 8004362:	095b      	lsrs	r3, r3, #5
 8004364:	0119      	lsls	r1, r3, #4
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	4613      	mov	r3, r2
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	4413      	add	r3, r2
 800436e:	009a      	lsls	r2, r3, #2
 8004370:	441a      	add	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	fbb2 f2f3 	udiv	r2, r2, r3
 800437c:	4b1a      	ldr	r3, [pc, #104]	@ (80043e8 <UART_SetConfig+0x118>)
 800437e:	fba3 0302 	umull	r0, r3, r3, r2
 8004382:	095b      	lsrs	r3, r3, #5
 8004384:	2064      	movs	r0, #100	@ 0x64
 8004386:	fb00 f303 	mul.w	r3, r0, r3
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	011b      	lsls	r3, r3, #4
 800438e:	3332      	adds	r3, #50	@ 0x32
 8004390:	4a15      	ldr	r2, [pc, #84]	@ (80043e8 <UART_SetConfig+0x118>)
 8004392:	fba2 2303 	umull	r2, r3, r2, r3
 8004396:	095b      	lsrs	r3, r3, #5
 8004398:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800439c:	4419      	add	r1, r3
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	4613      	mov	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4413      	add	r3, r2
 80043a6:	009a      	lsls	r2, r3, #2
 80043a8:	441a      	add	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80043b4:	4b0c      	ldr	r3, [pc, #48]	@ (80043e8 <UART_SetConfig+0x118>)
 80043b6:	fba3 0302 	umull	r0, r3, r3, r2
 80043ba:	095b      	lsrs	r3, r3, #5
 80043bc:	2064      	movs	r0, #100	@ 0x64
 80043be:	fb00 f303 	mul.w	r3, r0, r3
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	011b      	lsls	r3, r3, #4
 80043c6:	3332      	adds	r3, #50	@ 0x32
 80043c8:	4a07      	ldr	r2, [pc, #28]	@ (80043e8 <UART_SetConfig+0x118>)
 80043ca:	fba2 2303 	umull	r2, r3, r2, r3
 80043ce:	095b      	lsrs	r3, r3, #5
 80043d0:	f003 020f 	and.w	r2, r3, #15
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	440a      	add	r2, r1
 80043da:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80043dc:	bf00      	nop
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	40013800 	.word	0x40013800
 80043e8:	51eb851f 	.word	0x51eb851f

080043ec <__cvt>:
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043f2:	461d      	mov	r5, r3
 80043f4:	bfbb      	ittet	lt
 80043f6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80043fa:	461d      	movlt	r5, r3
 80043fc:	2300      	movge	r3, #0
 80043fe:	232d      	movlt	r3, #45	@ 0x2d
 8004400:	b088      	sub	sp, #32
 8004402:	4614      	mov	r4, r2
 8004404:	bfb8      	it	lt
 8004406:	4614      	movlt	r4, r2
 8004408:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800440a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800440c:	7013      	strb	r3, [r2, #0]
 800440e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004410:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004414:	f023 0820 	bic.w	r8, r3, #32
 8004418:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800441c:	d005      	beq.n	800442a <__cvt+0x3e>
 800441e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004422:	d100      	bne.n	8004426 <__cvt+0x3a>
 8004424:	3601      	adds	r6, #1
 8004426:	2302      	movs	r3, #2
 8004428:	e000      	b.n	800442c <__cvt+0x40>
 800442a:	2303      	movs	r3, #3
 800442c:	aa07      	add	r2, sp, #28
 800442e:	9204      	str	r2, [sp, #16]
 8004430:	aa06      	add	r2, sp, #24
 8004432:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004436:	e9cd 3600 	strd	r3, r6, [sp]
 800443a:	4622      	mov	r2, r4
 800443c:	462b      	mov	r3, r5
 800443e:	f000 fe6f 	bl	8005120 <_dtoa_r>
 8004442:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004446:	4607      	mov	r7, r0
 8004448:	d119      	bne.n	800447e <__cvt+0x92>
 800444a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800444c:	07db      	lsls	r3, r3, #31
 800444e:	d50e      	bpl.n	800446e <__cvt+0x82>
 8004450:	eb00 0906 	add.w	r9, r0, r6
 8004454:	2200      	movs	r2, #0
 8004456:	2300      	movs	r3, #0
 8004458:	4620      	mov	r0, r4
 800445a:	4629      	mov	r1, r5
 800445c:	f7fc faa4 	bl	80009a8 <__aeabi_dcmpeq>
 8004460:	b108      	cbz	r0, 8004466 <__cvt+0x7a>
 8004462:	f8cd 901c 	str.w	r9, [sp, #28]
 8004466:	2230      	movs	r2, #48	@ 0x30
 8004468:	9b07      	ldr	r3, [sp, #28]
 800446a:	454b      	cmp	r3, r9
 800446c:	d31e      	bcc.n	80044ac <__cvt+0xc0>
 800446e:	4638      	mov	r0, r7
 8004470:	9b07      	ldr	r3, [sp, #28]
 8004472:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004474:	1bdb      	subs	r3, r3, r7
 8004476:	6013      	str	r3, [r2, #0]
 8004478:	b008      	add	sp, #32
 800447a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800447e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004482:	eb00 0906 	add.w	r9, r0, r6
 8004486:	d1e5      	bne.n	8004454 <__cvt+0x68>
 8004488:	7803      	ldrb	r3, [r0, #0]
 800448a:	2b30      	cmp	r3, #48	@ 0x30
 800448c:	d10a      	bne.n	80044a4 <__cvt+0xb8>
 800448e:	2200      	movs	r2, #0
 8004490:	2300      	movs	r3, #0
 8004492:	4620      	mov	r0, r4
 8004494:	4629      	mov	r1, r5
 8004496:	f7fc fa87 	bl	80009a8 <__aeabi_dcmpeq>
 800449a:	b918      	cbnz	r0, 80044a4 <__cvt+0xb8>
 800449c:	f1c6 0601 	rsb	r6, r6, #1
 80044a0:	f8ca 6000 	str.w	r6, [sl]
 80044a4:	f8da 3000 	ldr.w	r3, [sl]
 80044a8:	4499      	add	r9, r3
 80044aa:	e7d3      	b.n	8004454 <__cvt+0x68>
 80044ac:	1c59      	adds	r1, r3, #1
 80044ae:	9107      	str	r1, [sp, #28]
 80044b0:	701a      	strb	r2, [r3, #0]
 80044b2:	e7d9      	b.n	8004468 <__cvt+0x7c>

080044b4 <__exponent>:
 80044b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044b6:	2900      	cmp	r1, #0
 80044b8:	bfb6      	itet	lt
 80044ba:	232d      	movlt	r3, #45	@ 0x2d
 80044bc:	232b      	movge	r3, #43	@ 0x2b
 80044be:	4249      	neglt	r1, r1
 80044c0:	2909      	cmp	r1, #9
 80044c2:	7002      	strb	r2, [r0, #0]
 80044c4:	7043      	strb	r3, [r0, #1]
 80044c6:	dd29      	ble.n	800451c <__exponent+0x68>
 80044c8:	f10d 0307 	add.w	r3, sp, #7
 80044cc:	461d      	mov	r5, r3
 80044ce:	270a      	movs	r7, #10
 80044d0:	fbb1 f6f7 	udiv	r6, r1, r7
 80044d4:	461a      	mov	r2, r3
 80044d6:	fb07 1416 	mls	r4, r7, r6, r1
 80044da:	3430      	adds	r4, #48	@ 0x30
 80044dc:	f802 4c01 	strb.w	r4, [r2, #-1]
 80044e0:	460c      	mov	r4, r1
 80044e2:	2c63      	cmp	r4, #99	@ 0x63
 80044e4:	4631      	mov	r1, r6
 80044e6:	f103 33ff 	add.w	r3, r3, #4294967295
 80044ea:	dcf1      	bgt.n	80044d0 <__exponent+0x1c>
 80044ec:	3130      	adds	r1, #48	@ 0x30
 80044ee:	1e94      	subs	r4, r2, #2
 80044f0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80044f4:	4623      	mov	r3, r4
 80044f6:	1c41      	adds	r1, r0, #1
 80044f8:	42ab      	cmp	r3, r5
 80044fa:	d30a      	bcc.n	8004512 <__exponent+0x5e>
 80044fc:	f10d 0309 	add.w	r3, sp, #9
 8004500:	1a9b      	subs	r3, r3, r2
 8004502:	42ac      	cmp	r4, r5
 8004504:	bf88      	it	hi
 8004506:	2300      	movhi	r3, #0
 8004508:	3302      	adds	r3, #2
 800450a:	4403      	add	r3, r0
 800450c:	1a18      	subs	r0, r3, r0
 800450e:	b003      	add	sp, #12
 8004510:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004512:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004516:	f801 6f01 	strb.w	r6, [r1, #1]!
 800451a:	e7ed      	b.n	80044f8 <__exponent+0x44>
 800451c:	2330      	movs	r3, #48	@ 0x30
 800451e:	3130      	adds	r1, #48	@ 0x30
 8004520:	7083      	strb	r3, [r0, #2]
 8004522:	70c1      	strb	r1, [r0, #3]
 8004524:	1d03      	adds	r3, r0, #4
 8004526:	e7f1      	b.n	800450c <__exponent+0x58>

08004528 <_printf_float>:
 8004528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800452c:	b091      	sub	sp, #68	@ 0x44
 800452e:	460c      	mov	r4, r1
 8004530:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004534:	4616      	mov	r6, r2
 8004536:	461f      	mov	r7, r3
 8004538:	4605      	mov	r5, r0
 800453a:	f000 fce1 	bl	8004f00 <_localeconv_r>
 800453e:	6803      	ldr	r3, [r0, #0]
 8004540:	4618      	mov	r0, r3
 8004542:	9308      	str	r3, [sp, #32]
 8004544:	f7fb fe04 	bl	8000150 <strlen>
 8004548:	2300      	movs	r3, #0
 800454a:	930e      	str	r3, [sp, #56]	@ 0x38
 800454c:	f8d8 3000 	ldr.w	r3, [r8]
 8004550:	9009      	str	r0, [sp, #36]	@ 0x24
 8004552:	3307      	adds	r3, #7
 8004554:	f023 0307 	bic.w	r3, r3, #7
 8004558:	f103 0208 	add.w	r2, r3, #8
 800455c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004560:	f8d4 b000 	ldr.w	fp, [r4]
 8004564:	f8c8 2000 	str.w	r2, [r8]
 8004568:	e9d3 8900 	ldrd	r8, r9, [r3]
 800456c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004570:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004572:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004576:	f04f 32ff 	mov.w	r2, #4294967295
 800457a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800457e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004582:	4b9c      	ldr	r3, [pc, #624]	@ (80047f4 <_printf_float+0x2cc>)
 8004584:	f7fc fa42 	bl	8000a0c <__aeabi_dcmpun>
 8004588:	bb70      	cbnz	r0, 80045e8 <_printf_float+0xc0>
 800458a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800458e:	f04f 32ff 	mov.w	r2, #4294967295
 8004592:	4b98      	ldr	r3, [pc, #608]	@ (80047f4 <_printf_float+0x2cc>)
 8004594:	f7fc fa1c 	bl	80009d0 <__aeabi_dcmple>
 8004598:	bb30      	cbnz	r0, 80045e8 <_printf_float+0xc0>
 800459a:	2200      	movs	r2, #0
 800459c:	2300      	movs	r3, #0
 800459e:	4640      	mov	r0, r8
 80045a0:	4649      	mov	r1, r9
 80045a2:	f7fc fa0b 	bl	80009bc <__aeabi_dcmplt>
 80045a6:	b110      	cbz	r0, 80045ae <_printf_float+0x86>
 80045a8:	232d      	movs	r3, #45	@ 0x2d
 80045aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80045ae:	4a92      	ldr	r2, [pc, #584]	@ (80047f8 <_printf_float+0x2d0>)
 80045b0:	4b92      	ldr	r3, [pc, #584]	@ (80047fc <_printf_float+0x2d4>)
 80045b2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80045b6:	bf94      	ite	ls
 80045b8:	4690      	movls	r8, r2
 80045ba:	4698      	movhi	r8, r3
 80045bc:	2303      	movs	r3, #3
 80045be:	f04f 0900 	mov.w	r9, #0
 80045c2:	6123      	str	r3, [r4, #16]
 80045c4:	f02b 0304 	bic.w	r3, fp, #4
 80045c8:	6023      	str	r3, [r4, #0]
 80045ca:	4633      	mov	r3, r6
 80045cc:	4621      	mov	r1, r4
 80045ce:	4628      	mov	r0, r5
 80045d0:	9700      	str	r7, [sp, #0]
 80045d2:	aa0f      	add	r2, sp, #60	@ 0x3c
 80045d4:	f000 f9d4 	bl	8004980 <_printf_common>
 80045d8:	3001      	adds	r0, #1
 80045da:	f040 8090 	bne.w	80046fe <_printf_float+0x1d6>
 80045de:	f04f 30ff 	mov.w	r0, #4294967295
 80045e2:	b011      	add	sp, #68	@ 0x44
 80045e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045e8:	4642      	mov	r2, r8
 80045ea:	464b      	mov	r3, r9
 80045ec:	4640      	mov	r0, r8
 80045ee:	4649      	mov	r1, r9
 80045f0:	f7fc fa0c 	bl	8000a0c <__aeabi_dcmpun>
 80045f4:	b148      	cbz	r0, 800460a <_printf_float+0xe2>
 80045f6:	464b      	mov	r3, r9
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	bfb8      	it	lt
 80045fc:	232d      	movlt	r3, #45	@ 0x2d
 80045fe:	4a80      	ldr	r2, [pc, #512]	@ (8004800 <_printf_float+0x2d8>)
 8004600:	bfb8      	it	lt
 8004602:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004606:	4b7f      	ldr	r3, [pc, #508]	@ (8004804 <_printf_float+0x2dc>)
 8004608:	e7d3      	b.n	80045b2 <_printf_float+0x8a>
 800460a:	6863      	ldr	r3, [r4, #4]
 800460c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004610:	1c5a      	adds	r2, r3, #1
 8004612:	d13f      	bne.n	8004694 <_printf_float+0x16c>
 8004614:	2306      	movs	r3, #6
 8004616:	6063      	str	r3, [r4, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800461e:	6023      	str	r3, [r4, #0]
 8004620:	9206      	str	r2, [sp, #24]
 8004622:	aa0e      	add	r2, sp, #56	@ 0x38
 8004624:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004628:	aa0d      	add	r2, sp, #52	@ 0x34
 800462a:	9203      	str	r2, [sp, #12]
 800462c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004630:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004634:	6863      	ldr	r3, [r4, #4]
 8004636:	4642      	mov	r2, r8
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	4628      	mov	r0, r5
 800463c:	464b      	mov	r3, r9
 800463e:	910a      	str	r1, [sp, #40]	@ 0x28
 8004640:	f7ff fed4 	bl	80043ec <__cvt>
 8004644:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004646:	4680      	mov	r8, r0
 8004648:	2947      	cmp	r1, #71	@ 0x47
 800464a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800464c:	d128      	bne.n	80046a0 <_printf_float+0x178>
 800464e:	1cc8      	adds	r0, r1, #3
 8004650:	db02      	blt.n	8004658 <_printf_float+0x130>
 8004652:	6863      	ldr	r3, [r4, #4]
 8004654:	4299      	cmp	r1, r3
 8004656:	dd40      	ble.n	80046da <_printf_float+0x1b2>
 8004658:	f1aa 0a02 	sub.w	sl, sl, #2
 800465c:	fa5f fa8a 	uxtb.w	sl, sl
 8004660:	4652      	mov	r2, sl
 8004662:	3901      	subs	r1, #1
 8004664:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004668:	910d      	str	r1, [sp, #52]	@ 0x34
 800466a:	f7ff ff23 	bl	80044b4 <__exponent>
 800466e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004670:	4681      	mov	r9, r0
 8004672:	1813      	adds	r3, r2, r0
 8004674:	2a01      	cmp	r2, #1
 8004676:	6123      	str	r3, [r4, #16]
 8004678:	dc02      	bgt.n	8004680 <_printf_float+0x158>
 800467a:	6822      	ldr	r2, [r4, #0]
 800467c:	07d2      	lsls	r2, r2, #31
 800467e:	d501      	bpl.n	8004684 <_printf_float+0x15c>
 8004680:	3301      	adds	r3, #1
 8004682:	6123      	str	r3, [r4, #16]
 8004684:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004688:	2b00      	cmp	r3, #0
 800468a:	d09e      	beq.n	80045ca <_printf_float+0xa2>
 800468c:	232d      	movs	r3, #45	@ 0x2d
 800468e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004692:	e79a      	b.n	80045ca <_printf_float+0xa2>
 8004694:	2947      	cmp	r1, #71	@ 0x47
 8004696:	d1bf      	bne.n	8004618 <_printf_float+0xf0>
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1bd      	bne.n	8004618 <_printf_float+0xf0>
 800469c:	2301      	movs	r3, #1
 800469e:	e7ba      	b.n	8004616 <_printf_float+0xee>
 80046a0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80046a4:	d9dc      	bls.n	8004660 <_printf_float+0x138>
 80046a6:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80046aa:	d118      	bne.n	80046de <_printf_float+0x1b6>
 80046ac:	2900      	cmp	r1, #0
 80046ae:	6863      	ldr	r3, [r4, #4]
 80046b0:	dd0b      	ble.n	80046ca <_printf_float+0x1a2>
 80046b2:	6121      	str	r1, [r4, #16]
 80046b4:	b913      	cbnz	r3, 80046bc <_printf_float+0x194>
 80046b6:	6822      	ldr	r2, [r4, #0]
 80046b8:	07d0      	lsls	r0, r2, #31
 80046ba:	d502      	bpl.n	80046c2 <_printf_float+0x19a>
 80046bc:	3301      	adds	r3, #1
 80046be:	440b      	add	r3, r1
 80046c0:	6123      	str	r3, [r4, #16]
 80046c2:	f04f 0900 	mov.w	r9, #0
 80046c6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80046c8:	e7dc      	b.n	8004684 <_printf_float+0x15c>
 80046ca:	b913      	cbnz	r3, 80046d2 <_printf_float+0x1aa>
 80046cc:	6822      	ldr	r2, [r4, #0]
 80046ce:	07d2      	lsls	r2, r2, #31
 80046d0:	d501      	bpl.n	80046d6 <_printf_float+0x1ae>
 80046d2:	3302      	adds	r3, #2
 80046d4:	e7f4      	b.n	80046c0 <_printf_float+0x198>
 80046d6:	2301      	movs	r3, #1
 80046d8:	e7f2      	b.n	80046c0 <_printf_float+0x198>
 80046da:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80046de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80046e0:	4299      	cmp	r1, r3
 80046e2:	db05      	blt.n	80046f0 <_printf_float+0x1c8>
 80046e4:	6823      	ldr	r3, [r4, #0]
 80046e6:	6121      	str	r1, [r4, #16]
 80046e8:	07d8      	lsls	r0, r3, #31
 80046ea:	d5ea      	bpl.n	80046c2 <_printf_float+0x19a>
 80046ec:	1c4b      	adds	r3, r1, #1
 80046ee:	e7e7      	b.n	80046c0 <_printf_float+0x198>
 80046f0:	2900      	cmp	r1, #0
 80046f2:	bfcc      	ite	gt
 80046f4:	2201      	movgt	r2, #1
 80046f6:	f1c1 0202 	rsble	r2, r1, #2
 80046fa:	4413      	add	r3, r2
 80046fc:	e7e0      	b.n	80046c0 <_printf_float+0x198>
 80046fe:	6823      	ldr	r3, [r4, #0]
 8004700:	055a      	lsls	r2, r3, #21
 8004702:	d407      	bmi.n	8004714 <_printf_float+0x1ec>
 8004704:	6923      	ldr	r3, [r4, #16]
 8004706:	4642      	mov	r2, r8
 8004708:	4631      	mov	r1, r6
 800470a:	4628      	mov	r0, r5
 800470c:	47b8      	blx	r7
 800470e:	3001      	adds	r0, #1
 8004710:	d12b      	bne.n	800476a <_printf_float+0x242>
 8004712:	e764      	b.n	80045de <_printf_float+0xb6>
 8004714:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004718:	f240 80dc 	bls.w	80048d4 <_printf_float+0x3ac>
 800471c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004720:	2200      	movs	r2, #0
 8004722:	2300      	movs	r3, #0
 8004724:	f7fc f940 	bl	80009a8 <__aeabi_dcmpeq>
 8004728:	2800      	cmp	r0, #0
 800472a:	d033      	beq.n	8004794 <_printf_float+0x26c>
 800472c:	2301      	movs	r3, #1
 800472e:	4631      	mov	r1, r6
 8004730:	4628      	mov	r0, r5
 8004732:	4a35      	ldr	r2, [pc, #212]	@ (8004808 <_printf_float+0x2e0>)
 8004734:	47b8      	blx	r7
 8004736:	3001      	adds	r0, #1
 8004738:	f43f af51 	beq.w	80045de <_printf_float+0xb6>
 800473c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004740:	4543      	cmp	r3, r8
 8004742:	db02      	blt.n	800474a <_printf_float+0x222>
 8004744:	6823      	ldr	r3, [r4, #0]
 8004746:	07d8      	lsls	r0, r3, #31
 8004748:	d50f      	bpl.n	800476a <_printf_float+0x242>
 800474a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800474e:	4631      	mov	r1, r6
 8004750:	4628      	mov	r0, r5
 8004752:	47b8      	blx	r7
 8004754:	3001      	adds	r0, #1
 8004756:	f43f af42 	beq.w	80045de <_printf_float+0xb6>
 800475a:	f04f 0900 	mov.w	r9, #0
 800475e:	f108 38ff 	add.w	r8, r8, #4294967295
 8004762:	f104 0a1a 	add.w	sl, r4, #26
 8004766:	45c8      	cmp	r8, r9
 8004768:	dc09      	bgt.n	800477e <_printf_float+0x256>
 800476a:	6823      	ldr	r3, [r4, #0]
 800476c:	079b      	lsls	r3, r3, #30
 800476e:	f100 8102 	bmi.w	8004976 <_printf_float+0x44e>
 8004772:	68e0      	ldr	r0, [r4, #12]
 8004774:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004776:	4298      	cmp	r0, r3
 8004778:	bfb8      	it	lt
 800477a:	4618      	movlt	r0, r3
 800477c:	e731      	b.n	80045e2 <_printf_float+0xba>
 800477e:	2301      	movs	r3, #1
 8004780:	4652      	mov	r2, sl
 8004782:	4631      	mov	r1, r6
 8004784:	4628      	mov	r0, r5
 8004786:	47b8      	blx	r7
 8004788:	3001      	adds	r0, #1
 800478a:	f43f af28 	beq.w	80045de <_printf_float+0xb6>
 800478e:	f109 0901 	add.w	r9, r9, #1
 8004792:	e7e8      	b.n	8004766 <_printf_float+0x23e>
 8004794:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004796:	2b00      	cmp	r3, #0
 8004798:	dc38      	bgt.n	800480c <_printf_float+0x2e4>
 800479a:	2301      	movs	r3, #1
 800479c:	4631      	mov	r1, r6
 800479e:	4628      	mov	r0, r5
 80047a0:	4a19      	ldr	r2, [pc, #100]	@ (8004808 <_printf_float+0x2e0>)
 80047a2:	47b8      	blx	r7
 80047a4:	3001      	adds	r0, #1
 80047a6:	f43f af1a 	beq.w	80045de <_printf_float+0xb6>
 80047aa:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80047ae:	ea59 0303 	orrs.w	r3, r9, r3
 80047b2:	d102      	bne.n	80047ba <_printf_float+0x292>
 80047b4:	6823      	ldr	r3, [r4, #0]
 80047b6:	07d9      	lsls	r1, r3, #31
 80047b8:	d5d7      	bpl.n	800476a <_printf_float+0x242>
 80047ba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80047be:	4631      	mov	r1, r6
 80047c0:	4628      	mov	r0, r5
 80047c2:	47b8      	blx	r7
 80047c4:	3001      	adds	r0, #1
 80047c6:	f43f af0a 	beq.w	80045de <_printf_float+0xb6>
 80047ca:	f04f 0a00 	mov.w	sl, #0
 80047ce:	f104 0b1a 	add.w	fp, r4, #26
 80047d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80047d4:	425b      	negs	r3, r3
 80047d6:	4553      	cmp	r3, sl
 80047d8:	dc01      	bgt.n	80047de <_printf_float+0x2b6>
 80047da:	464b      	mov	r3, r9
 80047dc:	e793      	b.n	8004706 <_printf_float+0x1de>
 80047de:	2301      	movs	r3, #1
 80047e0:	465a      	mov	r2, fp
 80047e2:	4631      	mov	r1, r6
 80047e4:	4628      	mov	r0, r5
 80047e6:	47b8      	blx	r7
 80047e8:	3001      	adds	r0, #1
 80047ea:	f43f aef8 	beq.w	80045de <_printf_float+0xb6>
 80047ee:	f10a 0a01 	add.w	sl, sl, #1
 80047f2:	e7ee      	b.n	80047d2 <_printf_float+0x2aa>
 80047f4:	7fefffff 	.word	0x7fefffff
 80047f8:	08008216 	.word	0x08008216
 80047fc:	0800821a 	.word	0x0800821a
 8004800:	0800821e 	.word	0x0800821e
 8004804:	08008222 	.word	0x08008222
 8004808:	08008226 	.word	0x08008226
 800480c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800480e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004812:	4553      	cmp	r3, sl
 8004814:	bfa8      	it	ge
 8004816:	4653      	movge	r3, sl
 8004818:	2b00      	cmp	r3, #0
 800481a:	4699      	mov	r9, r3
 800481c:	dc36      	bgt.n	800488c <_printf_float+0x364>
 800481e:	f04f 0b00 	mov.w	fp, #0
 8004822:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004826:	f104 021a 	add.w	r2, r4, #26
 800482a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800482c:	930a      	str	r3, [sp, #40]	@ 0x28
 800482e:	eba3 0309 	sub.w	r3, r3, r9
 8004832:	455b      	cmp	r3, fp
 8004834:	dc31      	bgt.n	800489a <_printf_float+0x372>
 8004836:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004838:	459a      	cmp	sl, r3
 800483a:	dc3a      	bgt.n	80048b2 <_printf_float+0x38a>
 800483c:	6823      	ldr	r3, [r4, #0]
 800483e:	07da      	lsls	r2, r3, #31
 8004840:	d437      	bmi.n	80048b2 <_printf_float+0x38a>
 8004842:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004844:	ebaa 0903 	sub.w	r9, sl, r3
 8004848:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800484a:	ebaa 0303 	sub.w	r3, sl, r3
 800484e:	4599      	cmp	r9, r3
 8004850:	bfa8      	it	ge
 8004852:	4699      	movge	r9, r3
 8004854:	f1b9 0f00 	cmp.w	r9, #0
 8004858:	dc33      	bgt.n	80048c2 <_printf_float+0x39a>
 800485a:	f04f 0800 	mov.w	r8, #0
 800485e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004862:	f104 0b1a 	add.w	fp, r4, #26
 8004866:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004868:	ebaa 0303 	sub.w	r3, sl, r3
 800486c:	eba3 0309 	sub.w	r3, r3, r9
 8004870:	4543      	cmp	r3, r8
 8004872:	f77f af7a 	ble.w	800476a <_printf_float+0x242>
 8004876:	2301      	movs	r3, #1
 8004878:	465a      	mov	r2, fp
 800487a:	4631      	mov	r1, r6
 800487c:	4628      	mov	r0, r5
 800487e:	47b8      	blx	r7
 8004880:	3001      	adds	r0, #1
 8004882:	f43f aeac 	beq.w	80045de <_printf_float+0xb6>
 8004886:	f108 0801 	add.w	r8, r8, #1
 800488a:	e7ec      	b.n	8004866 <_printf_float+0x33e>
 800488c:	4642      	mov	r2, r8
 800488e:	4631      	mov	r1, r6
 8004890:	4628      	mov	r0, r5
 8004892:	47b8      	blx	r7
 8004894:	3001      	adds	r0, #1
 8004896:	d1c2      	bne.n	800481e <_printf_float+0x2f6>
 8004898:	e6a1      	b.n	80045de <_printf_float+0xb6>
 800489a:	2301      	movs	r3, #1
 800489c:	4631      	mov	r1, r6
 800489e:	4628      	mov	r0, r5
 80048a0:	920a      	str	r2, [sp, #40]	@ 0x28
 80048a2:	47b8      	blx	r7
 80048a4:	3001      	adds	r0, #1
 80048a6:	f43f ae9a 	beq.w	80045de <_printf_float+0xb6>
 80048aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80048ac:	f10b 0b01 	add.w	fp, fp, #1
 80048b0:	e7bb      	b.n	800482a <_printf_float+0x302>
 80048b2:	4631      	mov	r1, r6
 80048b4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80048b8:	4628      	mov	r0, r5
 80048ba:	47b8      	blx	r7
 80048bc:	3001      	adds	r0, #1
 80048be:	d1c0      	bne.n	8004842 <_printf_float+0x31a>
 80048c0:	e68d      	b.n	80045de <_printf_float+0xb6>
 80048c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80048c4:	464b      	mov	r3, r9
 80048c6:	4631      	mov	r1, r6
 80048c8:	4628      	mov	r0, r5
 80048ca:	4442      	add	r2, r8
 80048cc:	47b8      	blx	r7
 80048ce:	3001      	adds	r0, #1
 80048d0:	d1c3      	bne.n	800485a <_printf_float+0x332>
 80048d2:	e684      	b.n	80045de <_printf_float+0xb6>
 80048d4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80048d8:	f1ba 0f01 	cmp.w	sl, #1
 80048dc:	dc01      	bgt.n	80048e2 <_printf_float+0x3ba>
 80048de:	07db      	lsls	r3, r3, #31
 80048e0:	d536      	bpl.n	8004950 <_printf_float+0x428>
 80048e2:	2301      	movs	r3, #1
 80048e4:	4642      	mov	r2, r8
 80048e6:	4631      	mov	r1, r6
 80048e8:	4628      	mov	r0, r5
 80048ea:	47b8      	blx	r7
 80048ec:	3001      	adds	r0, #1
 80048ee:	f43f ae76 	beq.w	80045de <_printf_float+0xb6>
 80048f2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80048f6:	4631      	mov	r1, r6
 80048f8:	4628      	mov	r0, r5
 80048fa:	47b8      	blx	r7
 80048fc:	3001      	adds	r0, #1
 80048fe:	f43f ae6e 	beq.w	80045de <_printf_float+0xb6>
 8004902:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004906:	2200      	movs	r2, #0
 8004908:	2300      	movs	r3, #0
 800490a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800490e:	f7fc f84b 	bl	80009a8 <__aeabi_dcmpeq>
 8004912:	b9c0      	cbnz	r0, 8004946 <_printf_float+0x41e>
 8004914:	4653      	mov	r3, sl
 8004916:	f108 0201 	add.w	r2, r8, #1
 800491a:	4631      	mov	r1, r6
 800491c:	4628      	mov	r0, r5
 800491e:	47b8      	blx	r7
 8004920:	3001      	adds	r0, #1
 8004922:	d10c      	bne.n	800493e <_printf_float+0x416>
 8004924:	e65b      	b.n	80045de <_printf_float+0xb6>
 8004926:	2301      	movs	r3, #1
 8004928:	465a      	mov	r2, fp
 800492a:	4631      	mov	r1, r6
 800492c:	4628      	mov	r0, r5
 800492e:	47b8      	blx	r7
 8004930:	3001      	adds	r0, #1
 8004932:	f43f ae54 	beq.w	80045de <_printf_float+0xb6>
 8004936:	f108 0801 	add.w	r8, r8, #1
 800493a:	45d0      	cmp	r8, sl
 800493c:	dbf3      	blt.n	8004926 <_printf_float+0x3fe>
 800493e:	464b      	mov	r3, r9
 8004940:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004944:	e6e0      	b.n	8004708 <_printf_float+0x1e0>
 8004946:	f04f 0800 	mov.w	r8, #0
 800494a:	f104 0b1a 	add.w	fp, r4, #26
 800494e:	e7f4      	b.n	800493a <_printf_float+0x412>
 8004950:	2301      	movs	r3, #1
 8004952:	4642      	mov	r2, r8
 8004954:	e7e1      	b.n	800491a <_printf_float+0x3f2>
 8004956:	2301      	movs	r3, #1
 8004958:	464a      	mov	r2, r9
 800495a:	4631      	mov	r1, r6
 800495c:	4628      	mov	r0, r5
 800495e:	47b8      	blx	r7
 8004960:	3001      	adds	r0, #1
 8004962:	f43f ae3c 	beq.w	80045de <_printf_float+0xb6>
 8004966:	f108 0801 	add.w	r8, r8, #1
 800496a:	68e3      	ldr	r3, [r4, #12]
 800496c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800496e:	1a5b      	subs	r3, r3, r1
 8004970:	4543      	cmp	r3, r8
 8004972:	dcf0      	bgt.n	8004956 <_printf_float+0x42e>
 8004974:	e6fd      	b.n	8004772 <_printf_float+0x24a>
 8004976:	f04f 0800 	mov.w	r8, #0
 800497a:	f104 0919 	add.w	r9, r4, #25
 800497e:	e7f4      	b.n	800496a <_printf_float+0x442>

08004980 <_printf_common>:
 8004980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004984:	4616      	mov	r6, r2
 8004986:	4698      	mov	r8, r3
 8004988:	688a      	ldr	r2, [r1, #8]
 800498a:	690b      	ldr	r3, [r1, #16]
 800498c:	4607      	mov	r7, r0
 800498e:	4293      	cmp	r3, r2
 8004990:	bfb8      	it	lt
 8004992:	4613      	movlt	r3, r2
 8004994:	6033      	str	r3, [r6, #0]
 8004996:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800499a:	460c      	mov	r4, r1
 800499c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80049a0:	b10a      	cbz	r2, 80049a6 <_printf_common+0x26>
 80049a2:	3301      	adds	r3, #1
 80049a4:	6033      	str	r3, [r6, #0]
 80049a6:	6823      	ldr	r3, [r4, #0]
 80049a8:	0699      	lsls	r1, r3, #26
 80049aa:	bf42      	ittt	mi
 80049ac:	6833      	ldrmi	r3, [r6, #0]
 80049ae:	3302      	addmi	r3, #2
 80049b0:	6033      	strmi	r3, [r6, #0]
 80049b2:	6825      	ldr	r5, [r4, #0]
 80049b4:	f015 0506 	ands.w	r5, r5, #6
 80049b8:	d106      	bne.n	80049c8 <_printf_common+0x48>
 80049ba:	f104 0a19 	add.w	sl, r4, #25
 80049be:	68e3      	ldr	r3, [r4, #12]
 80049c0:	6832      	ldr	r2, [r6, #0]
 80049c2:	1a9b      	subs	r3, r3, r2
 80049c4:	42ab      	cmp	r3, r5
 80049c6:	dc2b      	bgt.n	8004a20 <_printf_common+0xa0>
 80049c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80049cc:	6822      	ldr	r2, [r4, #0]
 80049ce:	3b00      	subs	r3, #0
 80049d0:	bf18      	it	ne
 80049d2:	2301      	movne	r3, #1
 80049d4:	0692      	lsls	r2, r2, #26
 80049d6:	d430      	bmi.n	8004a3a <_printf_common+0xba>
 80049d8:	4641      	mov	r1, r8
 80049da:	4638      	mov	r0, r7
 80049dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80049e0:	47c8      	blx	r9
 80049e2:	3001      	adds	r0, #1
 80049e4:	d023      	beq.n	8004a2e <_printf_common+0xae>
 80049e6:	6823      	ldr	r3, [r4, #0]
 80049e8:	6922      	ldr	r2, [r4, #16]
 80049ea:	f003 0306 	and.w	r3, r3, #6
 80049ee:	2b04      	cmp	r3, #4
 80049f0:	bf14      	ite	ne
 80049f2:	2500      	movne	r5, #0
 80049f4:	6833      	ldreq	r3, [r6, #0]
 80049f6:	f04f 0600 	mov.w	r6, #0
 80049fa:	bf08      	it	eq
 80049fc:	68e5      	ldreq	r5, [r4, #12]
 80049fe:	f104 041a 	add.w	r4, r4, #26
 8004a02:	bf08      	it	eq
 8004a04:	1aed      	subeq	r5, r5, r3
 8004a06:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004a0a:	bf08      	it	eq
 8004a0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a10:	4293      	cmp	r3, r2
 8004a12:	bfc4      	itt	gt
 8004a14:	1a9b      	subgt	r3, r3, r2
 8004a16:	18ed      	addgt	r5, r5, r3
 8004a18:	42b5      	cmp	r5, r6
 8004a1a:	d11a      	bne.n	8004a52 <_printf_common+0xd2>
 8004a1c:	2000      	movs	r0, #0
 8004a1e:	e008      	b.n	8004a32 <_printf_common+0xb2>
 8004a20:	2301      	movs	r3, #1
 8004a22:	4652      	mov	r2, sl
 8004a24:	4641      	mov	r1, r8
 8004a26:	4638      	mov	r0, r7
 8004a28:	47c8      	blx	r9
 8004a2a:	3001      	adds	r0, #1
 8004a2c:	d103      	bne.n	8004a36 <_printf_common+0xb6>
 8004a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8004a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a36:	3501      	adds	r5, #1
 8004a38:	e7c1      	b.n	80049be <_printf_common+0x3e>
 8004a3a:	2030      	movs	r0, #48	@ 0x30
 8004a3c:	18e1      	adds	r1, r4, r3
 8004a3e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004a42:	1c5a      	adds	r2, r3, #1
 8004a44:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004a48:	4422      	add	r2, r4
 8004a4a:	3302      	adds	r3, #2
 8004a4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004a50:	e7c2      	b.n	80049d8 <_printf_common+0x58>
 8004a52:	2301      	movs	r3, #1
 8004a54:	4622      	mov	r2, r4
 8004a56:	4641      	mov	r1, r8
 8004a58:	4638      	mov	r0, r7
 8004a5a:	47c8      	blx	r9
 8004a5c:	3001      	adds	r0, #1
 8004a5e:	d0e6      	beq.n	8004a2e <_printf_common+0xae>
 8004a60:	3601      	adds	r6, #1
 8004a62:	e7d9      	b.n	8004a18 <_printf_common+0x98>

08004a64 <_printf_i>:
 8004a64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a68:	7e0f      	ldrb	r7, [r1, #24]
 8004a6a:	4691      	mov	r9, r2
 8004a6c:	2f78      	cmp	r7, #120	@ 0x78
 8004a6e:	4680      	mov	r8, r0
 8004a70:	460c      	mov	r4, r1
 8004a72:	469a      	mov	sl, r3
 8004a74:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004a76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004a7a:	d807      	bhi.n	8004a8c <_printf_i+0x28>
 8004a7c:	2f62      	cmp	r7, #98	@ 0x62
 8004a7e:	d80a      	bhi.n	8004a96 <_printf_i+0x32>
 8004a80:	2f00      	cmp	r7, #0
 8004a82:	f000 80d3 	beq.w	8004c2c <_printf_i+0x1c8>
 8004a86:	2f58      	cmp	r7, #88	@ 0x58
 8004a88:	f000 80ba 	beq.w	8004c00 <_printf_i+0x19c>
 8004a8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004a94:	e03a      	b.n	8004b0c <_printf_i+0xa8>
 8004a96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004a9a:	2b15      	cmp	r3, #21
 8004a9c:	d8f6      	bhi.n	8004a8c <_printf_i+0x28>
 8004a9e:	a101      	add	r1, pc, #4	@ (adr r1, 8004aa4 <_printf_i+0x40>)
 8004aa0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004aa4:	08004afd 	.word	0x08004afd
 8004aa8:	08004b11 	.word	0x08004b11
 8004aac:	08004a8d 	.word	0x08004a8d
 8004ab0:	08004a8d 	.word	0x08004a8d
 8004ab4:	08004a8d 	.word	0x08004a8d
 8004ab8:	08004a8d 	.word	0x08004a8d
 8004abc:	08004b11 	.word	0x08004b11
 8004ac0:	08004a8d 	.word	0x08004a8d
 8004ac4:	08004a8d 	.word	0x08004a8d
 8004ac8:	08004a8d 	.word	0x08004a8d
 8004acc:	08004a8d 	.word	0x08004a8d
 8004ad0:	08004c13 	.word	0x08004c13
 8004ad4:	08004b3b 	.word	0x08004b3b
 8004ad8:	08004bcd 	.word	0x08004bcd
 8004adc:	08004a8d 	.word	0x08004a8d
 8004ae0:	08004a8d 	.word	0x08004a8d
 8004ae4:	08004c35 	.word	0x08004c35
 8004ae8:	08004a8d 	.word	0x08004a8d
 8004aec:	08004b3b 	.word	0x08004b3b
 8004af0:	08004a8d 	.word	0x08004a8d
 8004af4:	08004a8d 	.word	0x08004a8d
 8004af8:	08004bd5 	.word	0x08004bd5
 8004afc:	6833      	ldr	r3, [r6, #0]
 8004afe:	1d1a      	adds	r2, r3, #4
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	6032      	str	r2, [r6, #0]
 8004b04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e09e      	b.n	8004c4e <_printf_i+0x1ea>
 8004b10:	6833      	ldr	r3, [r6, #0]
 8004b12:	6820      	ldr	r0, [r4, #0]
 8004b14:	1d19      	adds	r1, r3, #4
 8004b16:	6031      	str	r1, [r6, #0]
 8004b18:	0606      	lsls	r6, r0, #24
 8004b1a:	d501      	bpl.n	8004b20 <_printf_i+0xbc>
 8004b1c:	681d      	ldr	r5, [r3, #0]
 8004b1e:	e003      	b.n	8004b28 <_printf_i+0xc4>
 8004b20:	0645      	lsls	r5, r0, #25
 8004b22:	d5fb      	bpl.n	8004b1c <_printf_i+0xb8>
 8004b24:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004b28:	2d00      	cmp	r5, #0
 8004b2a:	da03      	bge.n	8004b34 <_printf_i+0xd0>
 8004b2c:	232d      	movs	r3, #45	@ 0x2d
 8004b2e:	426d      	negs	r5, r5
 8004b30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b34:	230a      	movs	r3, #10
 8004b36:	4859      	ldr	r0, [pc, #356]	@ (8004c9c <_printf_i+0x238>)
 8004b38:	e011      	b.n	8004b5e <_printf_i+0xfa>
 8004b3a:	6821      	ldr	r1, [r4, #0]
 8004b3c:	6833      	ldr	r3, [r6, #0]
 8004b3e:	0608      	lsls	r0, r1, #24
 8004b40:	f853 5b04 	ldr.w	r5, [r3], #4
 8004b44:	d402      	bmi.n	8004b4c <_printf_i+0xe8>
 8004b46:	0649      	lsls	r1, r1, #25
 8004b48:	bf48      	it	mi
 8004b4a:	b2ad      	uxthmi	r5, r5
 8004b4c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004b4e:	6033      	str	r3, [r6, #0]
 8004b50:	bf14      	ite	ne
 8004b52:	230a      	movne	r3, #10
 8004b54:	2308      	moveq	r3, #8
 8004b56:	4851      	ldr	r0, [pc, #324]	@ (8004c9c <_printf_i+0x238>)
 8004b58:	2100      	movs	r1, #0
 8004b5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004b5e:	6866      	ldr	r6, [r4, #4]
 8004b60:	2e00      	cmp	r6, #0
 8004b62:	bfa8      	it	ge
 8004b64:	6821      	ldrge	r1, [r4, #0]
 8004b66:	60a6      	str	r6, [r4, #8]
 8004b68:	bfa4      	itt	ge
 8004b6a:	f021 0104 	bicge.w	r1, r1, #4
 8004b6e:	6021      	strge	r1, [r4, #0]
 8004b70:	b90d      	cbnz	r5, 8004b76 <_printf_i+0x112>
 8004b72:	2e00      	cmp	r6, #0
 8004b74:	d04b      	beq.n	8004c0e <_printf_i+0x1aa>
 8004b76:	4616      	mov	r6, r2
 8004b78:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b7c:	fb03 5711 	mls	r7, r3, r1, r5
 8004b80:	5dc7      	ldrb	r7, [r0, r7]
 8004b82:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b86:	462f      	mov	r7, r5
 8004b88:	42bb      	cmp	r3, r7
 8004b8a:	460d      	mov	r5, r1
 8004b8c:	d9f4      	bls.n	8004b78 <_printf_i+0x114>
 8004b8e:	2b08      	cmp	r3, #8
 8004b90:	d10b      	bne.n	8004baa <_printf_i+0x146>
 8004b92:	6823      	ldr	r3, [r4, #0]
 8004b94:	07df      	lsls	r7, r3, #31
 8004b96:	d508      	bpl.n	8004baa <_printf_i+0x146>
 8004b98:	6923      	ldr	r3, [r4, #16]
 8004b9a:	6861      	ldr	r1, [r4, #4]
 8004b9c:	4299      	cmp	r1, r3
 8004b9e:	bfde      	ittt	le
 8004ba0:	2330      	movle	r3, #48	@ 0x30
 8004ba2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ba6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004baa:	1b92      	subs	r2, r2, r6
 8004bac:	6122      	str	r2, [r4, #16]
 8004bae:	464b      	mov	r3, r9
 8004bb0:	4621      	mov	r1, r4
 8004bb2:	4640      	mov	r0, r8
 8004bb4:	f8cd a000 	str.w	sl, [sp]
 8004bb8:	aa03      	add	r2, sp, #12
 8004bba:	f7ff fee1 	bl	8004980 <_printf_common>
 8004bbe:	3001      	adds	r0, #1
 8004bc0:	d14a      	bne.n	8004c58 <_printf_i+0x1f4>
 8004bc2:	f04f 30ff 	mov.w	r0, #4294967295
 8004bc6:	b004      	add	sp, #16
 8004bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bcc:	6823      	ldr	r3, [r4, #0]
 8004bce:	f043 0320 	orr.w	r3, r3, #32
 8004bd2:	6023      	str	r3, [r4, #0]
 8004bd4:	2778      	movs	r7, #120	@ 0x78
 8004bd6:	4832      	ldr	r0, [pc, #200]	@ (8004ca0 <_printf_i+0x23c>)
 8004bd8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004bdc:	6823      	ldr	r3, [r4, #0]
 8004bde:	6831      	ldr	r1, [r6, #0]
 8004be0:	061f      	lsls	r7, r3, #24
 8004be2:	f851 5b04 	ldr.w	r5, [r1], #4
 8004be6:	d402      	bmi.n	8004bee <_printf_i+0x18a>
 8004be8:	065f      	lsls	r7, r3, #25
 8004bea:	bf48      	it	mi
 8004bec:	b2ad      	uxthmi	r5, r5
 8004bee:	6031      	str	r1, [r6, #0]
 8004bf0:	07d9      	lsls	r1, r3, #31
 8004bf2:	bf44      	itt	mi
 8004bf4:	f043 0320 	orrmi.w	r3, r3, #32
 8004bf8:	6023      	strmi	r3, [r4, #0]
 8004bfa:	b11d      	cbz	r5, 8004c04 <_printf_i+0x1a0>
 8004bfc:	2310      	movs	r3, #16
 8004bfe:	e7ab      	b.n	8004b58 <_printf_i+0xf4>
 8004c00:	4826      	ldr	r0, [pc, #152]	@ (8004c9c <_printf_i+0x238>)
 8004c02:	e7e9      	b.n	8004bd8 <_printf_i+0x174>
 8004c04:	6823      	ldr	r3, [r4, #0]
 8004c06:	f023 0320 	bic.w	r3, r3, #32
 8004c0a:	6023      	str	r3, [r4, #0]
 8004c0c:	e7f6      	b.n	8004bfc <_printf_i+0x198>
 8004c0e:	4616      	mov	r6, r2
 8004c10:	e7bd      	b.n	8004b8e <_printf_i+0x12a>
 8004c12:	6833      	ldr	r3, [r6, #0]
 8004c14:	6825      	ldr	r5, [r4, #0]
 8004c16:	1d18      	adds	r0, r3, #4
 8004c18:	6961      	ldr	r1, [r4, #20]
 8004c1a:	6030      	str	r0, [r6, #0]
 8004c1c:	062e      	lsls	r6, r5, #24
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	d501      	bpl.n	8004c26 <_printf_i+0x1c2>
 8004c22:	6019      	str	r1, [r3, #0]
 8004c24:	e002      	b.n	8004c2c <_printf_i+0x1c8>
 8004c26:	0668      	lsls	r0, r5, #25
 8004c28:	d5fb      	bpl.n	8004c22 <_printf_i+0x1be>
 8004c2a:	8019      	strh	r1, [r3, #0]
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	4616      	mov	r6, r2
 8004c30:	6123      	str	r3, [r4, #16]
 8004c32:	e7bc      	b.n	8004bae <_printf_i+0x14a>
 8004c34:	6833      	ldr	r3, [r6, #0]
 8004c36:	2100      	movs	r1, #0
 8004c38:	1d1a      	adds	r2, r3, #4
 8004c3a:	6032      	str	r2, [r6, #0]
 8004c3c:	681e      	ldr	r6, [r3, #0]
 8004c3e:	6862      	ldr	r2, [r4, #4]
 8004c40:	4630      	mov	r0, r6
 8004c42:	f000 f9d4 	bl	8004fee <memchr>
 8004c46:	b108      	cbz	r0, 8004c4c <_printf_i+0x1e8>
 8004c48:	1b80      	subs	r0, r0, r6
 8004c4a:	6060      	str	r0, [r4, #4]
 8004c4c:	6863      	ldr	r3, [r4, #4]
 8004c4e:	6123      	str	r3, [r4, #16]
 8004c50:	2300      	movs	r3, #0
 8004c52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c56:	e7aa      	b.n	8004bae <_printf_i+0x14a>
 8004c58:	4632      	mov	r2, r6
 8004c5a:	4649      	mov	r1, r9
 8004c5c:	4640      	mov	r0, r8
 8004c5e:	6923      	ldr	r3, [r4, #16]
 8004c60:	47d0      	blx	sl
 8004c62:	3001      	adds	r0, #1
 8004c64:	d0ad      	beq.n	8004bc2 <_printf_i+0x15e>
 8004c66:	6823      	ldr	r3, [r4, #0]
 8004c68:	079b      	lsls	r3, r3, #30
 8004c6a:	d413      	bmi.n	8004c94 <_printf_i+0x230>
 8004c6c:	68e0      	ldr	r0, [r4, #12]
 8004c6e:	9b03      	ldr	r3, [sp, #12]
 8004c70:	4298      	cmp	r0, r3
 8004c72:	bfb8      	it	lt
 8004c74:	4618      	movlt	r0, r3
 8004c76:	e7a6      	b.n	8004bc6 <_printf_i+0x162>
 8004c78:	2301      	movs	r3, #1
 8004c7a:	4632      	mov	r2, r6
 8004c7c:	4649      	mov	r1, r9
 8004c7e:	4640      	mov	r0, r8
 8004c80:	47d0      	blx	sl
 8004c82:	3001      	adds	r0, #1
 8004c84:	d09d      	beq.n	8004bc2 <_printf_i+0x15e>
 8004c86:	3501      	adds	r5, #1
 8004c88:	68e3      	ldr	r3, [r4, #12]
 8004c8a:	9903      	ldr	r1, [sp, #12]
 8004c8c:	1a5b      	subs	r3, r3, r1
 8004c8e:	42ab      	cmp	r3, r5
 8004c90:	dcf2      	bgt.n	8004c78 <_printf_i+0x214>
 8004c92:	e7eb      	b.n	8004c6c <_printf_i+0x208>
 8004c94:	2500      	movs	r5, #0
 8004c96:	f104 0619 	add.w	r6, r4, #25
 8004c9a:	e7f5      	b.n	8004c88 <_printf_i+0x224>
 8004c9c:	08008228 	.word	0x08008228
 8004ca0:	08008239 	.word	0x08008239

08004ca4 <std>:
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	b510      	push	{r4, lr}
 8004ca8:	4604      	mov	r4, r0
 8004caa:	e9c0 3300 	strd	r3, r3, [r0]
 8004cae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004cb2:	6083      	str	r3, [r0, #8]
 8004cb4:	8181      	strh	r1, [r0, #12]
 8004cb6:	6643      	str	r3, [r0, #100]	@ 0x64
 8004cb8:	81c2      	strh	r2, [r0, #14]
 8004cba:	6183      	str	r3, [r0, #24]
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	2208      	movs	r2, #8
 8004cc0:	305c      	adds	r0, #92	@ 0x5c
 8004cc2:	f000 f914 	bl	8004eee <memset>
 8004cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8004cfc <std+0x58>)
 8004cc8:	6224      	str	r4, [r4, #32]
 8004cca:	6263      	str	r3, [r4, #36]	@ 0x24
 8004ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8004d00 <std+0x5c>)
 8004cce:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8004d04 <std+0x60>)
 8004cd2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8004d08 <std+0x64>)
 8004cd6:	6323      	str	r3, [r4, #48]	@ 0x30
 8004cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8004d0c <std+0x68>)
 8004cda:	429c      	cmp	r4, r3
 8004cdc:	d006      	beq.n	8004cec <std+0x48>
 8004cde:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004ce2:	4294      	cmp	r4, r2
 8004ce4:	d002      	beq.n	8004cec <std+0x48>
 8004ce6:	33d0      	adds	r3, #208	@ 0xd0
 8004ce8:	429c      	cmp	r4, r3
 8004cea:	d105      	bne.n	8004cf8 <std+0x54>
 8004cec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cf4:	f000 b978 	b.w	8004fe8 <__retarget_lock_init_recursive>
 8004cf8:	bd10      	pop	{r4, pc}
 8004cfa:	bf00      	nop
 8004cfc:	08004e69 	.word	0x08004e69
 8004d00:	08004e8b 	.word	0x08004e8b
 8004d04:	08004ec3 	.word	0x08004ec3
 8004d08:	08004ee7 	.word	0x08004ee7
 8004d0c:	200006c0 	.word	0x200006c0

08004d10 <stdio_exit_handler>:
 8004d10:	4a02      	ldr	r2, [pc, #8]	@ (8004d1c <stdio_exit_handler+0xc>)
 8004d12:	4903      	ldr	r1, [pc, #12]	@ (8004d20 <stdio_exit_handler+0x10>)
 8004d14:	4803      	ldr	r0, [pc, #12]	@ (8004d24 <stdio_exit_handler+0x14>)
 8004d16:	f000 b869 	b.w	8004dec <_fwalk_sglue>
 8004d1a:	bf00      	nop
 8004d1c:	2000000c 	.word	0x2000000c
 8004d20:	0800695d 	.word	0x0800695d
 8004d24:	2000001c 	.word	0x2000001c

08004d28 <cleanup_stdio>:
 8004d28:	6841      	ldr	r1, [r0, #4]
 8004d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8004d5c <cleanup_stdio+0x34>)
 8004d2c:	b510      	push	{r4, lr}
 8004d2e:	4299      	cmp	r1, r3
 8004d30:	4604      	mov	r4, r0
 8004d32:	d001      	beq.n	8004d38 <cleanup_stdio+0x10>
 8004d34:	f001 fe12 	bl	800695c <_fflush_r>
 8004d38:	68a1      	ldr	r1, [r4, #8]
 8004d3a:	4b09      	ldr	r3, [pc, #36]	@ (8004d60 <cleanup_stdio+0x38>)
 8004d3c:	4299      	cmp	r1, r3
 8004d3e:	d002      	beq.n	8004d46 <cleanup_stdio+0x1e>
 8004d40:	4620      	mov	r0, r4
 8004d42:	f001 fe0b 	bl	800695c <_fflush_r>
 8004d46:	68e1      	ldr	r1, [r4, #12]
 8004d48:	4b06      	ldr	r3, [pc, #24]	@ (8004d64 <cleanup_stdio+0x3c>)
 8004d4a:	4299      	cmp	r1, r3
 8004d4c:	d004      	beq.n	8004d58 <cleanup_stdio+0x30>
 8004d4e:	4620      	mov	r0, r4
 8004d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d54:	f001 be02 	b.w	800695c <_fflush_r>
 8004d58:	bd10      	pop	{r4, pc}
 8004d5a:	bf00      	nop
 8004d5c:	200006c0 	.word	0x200006c0
 8004d60:	20000728 	.word	0x20000728
 8004d64:	20000790 	.word	0x20000790

08004d68 <global_stdio_init.part.0>:
 8004d68:	b510      	push	{r4, lr}
 8004d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8004d98 <global_stdio_init.part.0+0x30>)
 8004d6c:	4c0b      	ldr	r4, [pc, #44]	@ (8004d9c <global_stdio_init.part.0+0x34>)
 8004d6e:	4a0c      	ldr	r2, [pc, #48]	@ (8004da0 <global_stdio_init.part.0+0x38>)
 8004d70:	4620      	mov	r0, r4
 8004d72:	601a      	str	r2, [r3, #0]
 8004d74:	2104      	movs	r1, #4
 8004d76:	2200      	movs	r2, #0
 8004d78:	f7ff ff94 	bl	8004ca4 <std>
 8004d7c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004d80:	2201      	movs	r2, #1
 8004d82:	2109      	movs	r1, #9
 8004d84:	f7ff ff8e 	bl	8004ca4 <std>
 8004d88:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004d8c:	2202      	movs	r2, #2
 8004d8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d92:	2112      	movs	r1, #18
 8004d94:	f7ff bf86 	b.w	8004ca4 <std>
 8004d98:	200007f8 	.word	0x200007f8
 8004d9c:	200006c0 	.word	0x200006c0
 8004da0:	08004d11 	.word	0x08004d11

08004da4 <__sfp_lock_acquire>:
 8004da4:	4801      	ldr	r0, [pc, #4]	@ (8004dac <__sfp_lock_acquire+0x8>)
 8004da6:	f000 b920 	b.w	8004fea <__retarget_lock_acquire_recursive>
 8004daa:	bf00      	nop
 8004dac:	20000801 	.word	0x20000801

08004db0 <__sfp_lock_release>:
 8004db0:	4801      	ldr	r0, [pc, #4]	@ (8004db8 <__sfp_lock_release+0x8>)
 8004db2:	f000 b91b 	b.w	8004fec <__retarget_lock_release_recursive>
 8004db6:	bf00      	nop
 8004db8:	20000801 	.word	0x20000801

08004dbc <__sinit>:
 8004dbc:	b510      	push	{r4, lr}
 8004dbe:	4604      	mov	r4, r0
 8004dc0:	f7ff fff0 	bl	8004da4 <__sfp_lock_acquire>
 8004dc4:	6a23      	ldr	r3, [r4, #32]
 8004dc6:	b11b      	cbz	r3, 8004dd0 <__sinit+0x14>
 8004dc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004dcc:	f7ff bff0 	b.w	8004db0 <__sfp_lock_release>
 8004dd0:	4b04      	ldr	r3, [pc, #16]	@ (8004de4 <__sinit+0x28>)
 8004dd2:	6223      	str	r3, [r4, #32]
 8004dd4:	4b04      	ldr	r3, [pc, #16]	@ (8004de8 <__sinit+0x2c>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1f5      	bne.n	8004dc8 <__sinit+0xc>
 8004ddc:	f7ff ffc4 	bl	8004d68 <global_stdio_init.part.0>
 8004de0:	e7f2      	b.n	8004dc8 <__sinit+0xc>
 8004de2:	bf00      	nop
 8004de4:	08004d29 	.word	0x08004d29
 8004de8:	200007f8 	.word	0x200007f8

08004dec <_fwalk_sglue>:
 8004dec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004df0:	4607      	mov	r7, r0
 8004df2:	4688      	mov	r8, r1
 8004df4:	4614      	mov	r4, r2
 8004df6:	2600      	movs	r6, #0
 8004df8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004dfc:	f1b9 0901 	subs.w	r9, r9, #1
 8004e00:	d505      	bpl.n	8004e0e <_fwalk_sglue+0x22>
 8004e02:	6824      	ldr	r4, [r4, #0]
 8004e04:	2c00      	cmp	r4, #0
 8004e06:	d1f7      	bne.n	8004df8 <_fwalk_sglue+0xc>
 8004e08:	4630      	mov	r0, r6
 8004e0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e0e:	89ab      	ldrh	r3, [r5, #12]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d907      	bls.n	8004e24 <_fwalk_sglue+0x38>
 8004e14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004e18:	3301      	adds	r3, #1
 8004e1a:	d003      	beq.n	8004e24 <_fwalk_sglue+0x38>
 8004e1c:	4629      	mov	r1, r5
 8004e1e:	4638      	mov	r0, r7
 8004e20:	47c0      	blx	r8
 8004e22:	4306      	orrs	r6, r0
 8004e24:	3568      	adds	r5, #104	@ 0x68
 8004e26:	e7e9      	b.n	8004dfc <_fwalk_sglue+0x10>

08004e28 <siprintf>:
 8004e28:	b40e      	push	{r1, r2, r3}
 8004e2a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004e2e:	b500      	push	{lr}
 8004e30:	b09c      	sub	sp, #112	@ 0x70
 8004e32:	ab1d      	add	r3, sp, #116	@ 0x74
 8004e34:	9002      	str	r0, [sp, #8]
 8004e36:	9006      	str	r0, [sp, #24]
 8004e38:	9107      	str	r1, [sp, #28]
 8004e3a:	9104      	str	r1, [sp, #16]
 8004e3c:	4808      	ldr	r0, [pc, #32]	@ (8004e60 <siprintf+0x38>)
 8004e3e:	4909      	ldr	r1, [pc, #36]	@ (8004e64 <siprintf+0x3c>)
 8004e40:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e44:	9105      	str	r1, [sp, #20]
 8004e46:	6800      	ldr	r0, [r0, #0]
 8004e48:	a902      	add	r1, sp, #8
 8004e4a:	9301      	str	r3, [sp, #4]
 8004e4c:	f001 fc0a 	bl	8006664 <_svfiprintf_r>
 8004e50:	2200      	movs	r2, #0
 8004e52:	9b02      	ldr	r3, [sp, #8]
 8004e54:	701a      	strb	r2, [r3, #0]
 8004e56:	b01c      	add	sp, #112	@ 0x70
 8004e58:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e5c:	b003      	add	sp, #12
 8004e5e:	4770      	bx	lr
 8004e60:	20000018 	.word	0x20000018
 8004e64:	ffff0208 	.word	0xffff0208

08004e68 <__sread>:
 8004e68:	b510      	push	{r4, lr}
 8004e6a:	460c      	mov	r4, r1
 8004e6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e70:	f000 f86c 	bl	8004f4c <_read_r>
 8004e74:	2800      	cmp	r0, #0
 8004e76:	bfab      	itete	ge
 8004e78:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004e7a:	89a3      	ldrhlt	r3, [r4, #12]
 8004e7c:	181b      	addge	r3, r3, r0
 8004e7e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004e82:	bfac      	ite	ge
 8004e84:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004e86:	81a3      	strhlt	r3, [r4, #12]
 8004e88:	bd10      	pop	{r4, pc}

08004e8a <__swrite>:
 8004e8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e8e:	461f      	mov	r7, r3
 8004e90:	898b      	ldrh	r3, [r1, #12]
 8004e92:	4605      	mov	r5, r0
 8004e94:	05db      	lsls	r3, r3, #23
 8004e96:	460c      	mov	r4, r1
 8004e98:	4616      	mov	r6, r2
 8004e9a:	d505      	bpl.n	8004ea8 <__swrite+0x1e>
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ea4:	f000 f840 	bl	8004f28 <_lseek_r>
 8004ea8:	89a3      	ldrh	r3, [r4, #12]
 8004eaa:	4632      	mov	r2, r6
 8004eac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004eb0:	81a3      	strh	r3, [r4, #12]
 8004eb2:	4628      	mov	r0, r5
 8004eb4:	463b      	mov	r3, r7
 8004eb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004eba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ebe:	f000 b857 	b.w	8004f70 <_write_r>

08004ec2 <__sseek>:
 8004ec2:	b510      	push	{r4, lr}
 8004ec4:	460c      	mov	r4, r1
 8004ec6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eca:	f000 f82d 	bl	8004f28 <_lseek_r>
 8004ece:	1c43      	adds	r3, r0, #1
 8004ed0:	89a3      	ldrh	r3, [r4, #12]
 8004ed2:	bf15      	itete	ne
 8004ed4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004ed6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004eda:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004ede:	81a3      	strheq	r3, [r4, #12]
 8004ee0:	bf18      	it	ne
 8004ee2:	81a3      	strhne	r3, [r4, #12]
 8004ee4:	bd10      	pop	{r4, pc}

08004ee6 <__sclose>:
 8004ee6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eea:	f000 b80d 	b.w	8004f08 <_close_r>

08004eee <memset>:
 8004eee:	4603      	mov	r3, r0
 8004ef0:	4402      	add	r2, r0
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d100      	bne.n	8004ef8 <memset+0xa>
 8004ef6:	4770      	bx	lr
 8004ef8:	f803 1b01 	strb.w	r1, [r3], #1
 8004efc:	e7f9      	b.n	8004ef2 <memset+0x4>
	...

08004f00 <_localeconv_r>:
 8004f00:	4800      	ldr	r0, [pc, #0]	@ (8004f04 <_localeconv_r+0x4>)
 8004f02:	4770      	bx	lr
 8004f04:	20000158 	.word	0x20000158

08004f08 <_close_r>:
 8004f08:	b538      	push	{r3, r4, r5, lr}
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	4d05      	ldr	r5, [pc, #20]	@ (8004f24 <_close_r+0x1c>)
 8004f0e:	4604      	mov	r4, r0
 8004f10:	4608      	mov	r0, r1
 8004f12:	602b      	str	r3, [r5, #0]
 8004f14:	f7fd f89d 	bl	8002052 <_close>
 8004f18:	1c43      	adds	r3, r0, #1
 8004f1a:	d102      	bne.n	8004f22 <_close_r+0x1a>
 8004f1c:	682b      	ldr	r3, [r5, #0]
 8004f1e:	b103      	cbz	r3, 8004f22 <_close_r+0x1a>
 8004f20:	6023      	str	r3, [r4, #0]
 8004f22:	bd38      	pop	{r3, r4, r5, pc}
 8004f24:	200007fc 	.word	0x200007fc

08004f28 <_lseek_r>:
 8004f28:	b538      	push	{r3, r4, r5, lr}
 8004f2a:	4604      	mov	r4, r0
 8004f2c:	4608      	mov	r0, r1
 8004f2e:	4611      	mov	r1, r2
 8004f30:	2200      	movs	r2, #0
 8004f32:	4d05      	ldr	r5, [pc, #20]	@ (8004f48 <_lseek_r+0x20>)
 8004f34:	602a      	str	r2, [r5, #0]
 8004f36:	461a      	mov	r2, r3
 8004f38:	f7fd f8af 	bl	800209a <_lseek>
 8004f3c:	1c43      	adds	r3, r0, #1
 8004f3e:	d102      	bne.n	8004f46 <_lseek_r+0x1e>
 8004f40:	682b      	ldr	r3, [r5, #0]
 8004f42:	b103      	cbz	r3, 8004f46 <_lseek_r+0x1e>
 8004f44:	6023      	str	r3, [r4, #0]
 8004f46:	bd38      	pop	{r3, r4, r5, pc}
 8004f48:	200007fc 	.word	0x200007fc

08004f4c <_read_r>:
 8004f4c:	b538      	push	{r3, r4, r5, lr}
 8004f4e:	4604      	mov	r4, r0
 8004f50:	4608      	mov	r0, r1
 8004f52:	4611      	mov	r1, r2
 8004f54:	2200      	movs	r2, #0
 8004f56:	4d05      	ldr	r5, [pc, #20]	@ (8004f6c <_read_r+0x20>)
 8004f58:	602a      	str	r2, [r5, #0]
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	f7fd f840 	bl	8001fe0 <_read>
 8004f60:	1c43      	adds	r3, r0, #1
 8004f62:	d102      	bne.n	8004f6a <_read_r+0x1e>
 8004f64:	682b      	ldr	r3, [r5, #0]
 8004f66:	b103      	cbz	r3, 8004f6a <_read_r+0x1e>
 8004f68:	6023      	str	r3, [r4, #0]
 8004f6a:	bd38      	pop	{r3, r4, r5, pc}
 8004f6c:	200007fc 	.word	0x200007fc

08004f70 <_write_r>:
 8004f70:	b538      	push	{r3, r4, r5, lr}
 8004f72:	4604      	mov	r4, r0
 8004f74:	4608      	mov	r0, r1
 8004f76:	4611      	mov	r1, r2
 8004f78:	2200      	movs	r2, #0
 8004f7a:	4d05      	ldr	r5, [pc, #20]	@ (8004f90 <_write_r+0x20>)
 8004f7c:	602a      	str	r2, [r5, #0]
 8004f7e:	461a      	mov	r2, r3
 8004f80:	f7fd f84b 	bl	800201a <_write>
 8004f84:	1c43      	adds	r3, r0, #1
 8004f86:	d102      	bne.n	8004f8e <_write_r+0x1e>
 8004f88:	682b      	ldr	r3, [r5, #0]
 8004f8a:	b103      	cbz	r3, 8004f8e <_write_r+0x1e>
 8004f8c:	6023      	str	r3, [r4, #0]
 8004f8e:	bd38      	pop	{r3, r4, r5, pc}
 8004f90:	200007fc 	.word	0x200007fc

08004f94 <__errno>:
 8004f94:	4b01      	ldr	r3, [pc, #4]	@ (8004f9c <__errno+0x8>)
 8004f96:	6818      	ldr	r0, [r3, #0]
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	20000018 	.word	0x20000018

08004fa0 <__libc_init_array>:
 8004fa0:	b570      	push	{r4, r5, r6, lr}
 8004fa2:	2600      	movs	r6, #0
 8004fa4:	4d0c      	ldr	r5, [pc, #48]	@ (8004fd8 <__libc_init_array+0x38>)
 8004fa6:	4c0d      	ldr	r4, [pc, #52]	@ (8004fdc <__libc_init_array+0x3c>)
 8004fa8:	1b64      	subs	r4, r4, r5
 8004faa:	10a4      	asrs	r4, r4, #2
 8004fac:	42a6      	cmp	r6, r4
 8004fae:	d109      	bne.n	8004fc4 <__libc_init_array+0x24>
 8004fb0:	f002 f870 	bl	8007094 <_init>
 8004fb4:	2600      	movs	r6, #0
 8004fb6:	4d0a      	ldr	r5, [pc, #40]	@ (8004fe0 <__libc_init_array+0x40>)
 8004fb8:	4c0a      	ldr	r4, [pc, #40]	@ (8004fe4 <__libc_init_array+0x44>)
 8004fba:	1b64      	subs	r4, r4, r5
 8004fbc:	10a4      	asrs	r4, r4, #2
 8004fbe:	42a6      	cmp	r6, r4
 8004fc0:	d105      	bne.n	8004fce <__libc_init_array+0x2e>
 8004fc2:	bd70      	pop	{r4, r5, r6, pc}
 8004fc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fc8:	4798      	blx	r3
 8004fca:	3601      	adds	r6, #1
 8004fcc:	e7ee      	b.n	8004fac <__libc_init_array+0xc>
 8004fce:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fd2:	4798      	blx	r3
 8004fd4:	3601      	adds	r6, #1
 8004fd6:	e7f2      	b.n	8004fbe <__libc_init_array+0x1e>
 8004fd8:	08008590 	.word	0x08008590
 8004fdc:	08008590 	.word	0x08008590
 8004fe0:	08008590 	.word	0x08008590
 8004fe4:	08008594 	.word	0x08008594

08004fe8 <__retarget_lock_init_recursive>:
 8004fe8:	4770      	bx	lr

08004fea <__retarget_lock_acquire_recursive>:
 8004fea:	4770      	bx	lr

08004fec <__retarget_lock_release_recursive>:
 8004fec:	4770      	bx	lr

08004fee <memchr>:
 8004fee:	4603      	mov	r3, r0
 8004ff0:	b510      	push	{r4, lr}
 8004ff2:	b2c9      	uxtb	r1, r1
 8004ff4:	4402      	add	r2, r0
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	d101      	bne.n	8005000 <memchr+0x12>
 8004ffc:	2000      	movs	r0, #0
 8004ffe:	e003      	b.n	8005008 <memchr+0x1a>
 8005000:	7804      	ldrb	r4, [r0, #0]
 8005002:	3301      	adds	r3, #1
 8005004:	428c      	cmp	r4, r1
 8005006:	d1f6      	bne.n	8004ff6 <memchr+0x8>
 8005008:	bd10      	pop	{r4, pc}

0800500a <quorem>:
 800500a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800500e:	6903      	ldr	r3, [r0, #16]
 8005010:	690c      	ldr	r4, [r1, #16]
 8005012:	4607      	mov	r7, r0
 8005014:	42a3      	cmp	r3, r4
 8005016:	db7e      	blt.n	8005116 <quorem+0x10c>
 8005018:	3c01      	subs	r4, #1
 800501a:	00a3      	lsls	r3, r4, #2
 800501c:	f100 0514 	add.w	r5, r0, #20
 8005020:	f101 0814 	add.w	r8, r1, #20
 8005024:	9300      	str	r3, [sp, #0]
 8005026:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800502a:	9301      	str	r3, [sp, #4]
 800502c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005030:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005034:	3301      	adds	r3, #1
 8005036:	429a      	cmp	r2, r3
 8005038:	fbb2 f6f3 	udiv	r6, r2, r3
 800503c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005040:	d32e      	bcc.n	80050a0 <quorem+0x96>
 8005042:	f04f 0a00 	mov.w	sl, #0
 8005046:	46c4      	mov	ip, r8
 8005048:	46ae      	mov	lr, r5
 800504a:	46d3      	mov	fp, sl
 800504c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005050:	b298      	uxth	r0, r3
 8005052:	fb06 a000 	mla	r0, r6, r0, sl
 8005056:	0c1b      	lsrs	r3, r3, #16
 8005058:	0c02      	lsrs	r2, r0, #16
 800505a:	fb06 2303 	mla	r3, r6, r3, r2
 800505e:	f8de 2000 	ldr.w	r2, [lr]
 8005062:	b280      	uxth	r0, r0
 8005064:	b292      	uxth	r2, r2
 8005066:	1a12      	subs	r2, r2, r0
 8005068:	445a      	add	r2, fp
 800506a:	f8de 0000 	ldr.w	r0, [lr]
 800506e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005072:	b29b      	uxth	r3, r3
 8005074:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005078:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800507c:	b292      	uxth	r2, r2
 800507e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005082:	45e1      	cmp	r9, ip
 8005084:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005088:	f84e 2b04 	str.w	r2, [lr], #4
 800508c:	d2de      	bcs.n	800504c <quorem+0x42>
 800508e:	9b00      	ldr	r3, [sp, #0]
 8005090:	58eb      	ldr	r3, [r5, r3]
 8005092:	b92b      	cbnz	r3, 80050a0 <quorem+0x96>
 8005094:	9b01      	ldr	r3, [sp, #4]
 8005096:	3b04      	subs	r3, #4
 8005098:	429d      	cmp	r5, r3
 800509a:	461a      	mov	r2, r3
 800509c:	d32f      	bcc.n	80050fe <quorem+0xf4>
 800509e:	613c      	str	r4, [r7, #16]
 80050a0:	4638      	mov	r0, r7
 80050a2:	f001 f97b 	bl	800639c <__mcmp>
 80050a6:	2800      	cmp	r0, #0
 80050a8:	db25      	blt.n	80050f6 <quorem+0xec>
 80050aa:	4629      	mov	r1, r5
 80050ac:	2000      	movs	r0, #0
 80050ae:	f858 2b04 	ldr.w	r2, [r8], #4
 80050b2:	f8d1 c000 	ldr.w	ip, [r1]
 80050b6:	fa1f fe82 	uxth.w	lr, r2
 80050ba:	fa1f f38c 	uxth.w	r3, ip
 80050be:	eba3 030e 	sub.w	r3, r3, lr
 80050c2:	4403      	add	r3, r0
 80050c4:	0c12      	lsrs	r2, r2, #16
 80050c6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80050ca:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80050d4:	45c1      	cmp	r9, r8
 80050d6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80050da:	f841 3b04 	str.w	r3, [r1], #4
 80050de:	d2e6      	bcs.n	80050ae <quorem+0xa4>
 80050e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80050e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80050e8:	b922      	cbnz	r2, 80050f4 <quorem+0xea>
 80050ea:	3b04      	subs	r3, #4
 80050ec:	429d      	cmp	r5, r3
 80050ee:	461a      	mov	r2, r3
 80050f0:	d30b      	bcc.n	800510a <quorem+0x100>
 80050f2:	613c      	str	r4, [r7, #16]
 80050f4:	3601      	adds	r6, #1
 80050f6:	4630      	mov	r0, r6
 80050f8:	b003      	add	sp, #12
 80050fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050fe:	6812      	ldr	r2, [r2, #0]
 8005100:	3b04      	subs	r3, #4
 8005102:	2a00      	cmp	r2, #0
 8005104:	d1cb      	bne.n	800509e <quorem+0x94>
 8005106:	3c01      	subs	r4, #1
 8005108:	e7c6      	b.n	8005098 <quorem+0x8e>
 800510a:	6812      	ldr	r2, [r2, #0]
 800510c:	3b04      	subs	r3, #4
 800510e:	2a00      	cmp	r2, #0
 8005110:	d1ef      	bne.n	80050f2 <quorem+0xe8>
 8005112:	3c01      	subs	r4, #1
 8005114:	e7ea      	b.n	80050ec <quorem+0xe2>
 8005116:	2000      	movs	r0, #0
 8005118:	e7ee      	b.n	80050f8 <quorem+0xee>
 800511a:	0000      	movs	r0, r0
 800511c:	0000      	movs	r0, r0
	...

08005120 <_dtoa_r>:
 8005120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005124:	4614      	mov	r4, r2
 8005126:	461d      	mov	r5, r3
 8005128:	69c7      	ldr	r7, [r0, #28]
 800512a:	b097      	sub	sp, #92	@ 0x5c
 800512c:	4683      	mov	fp, r0
 800512e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005132:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005134:	b97f      	cbnz	r7, 8005156 <_dtoa_r+0x36>
 8005136:	2010      	movs	r0, #16
 8005138:	f000 fe02 	bl	8005d40 <malloc>
 800513c:	4602      	mov	r2, r0
 800513e:	f8cb 001c 	str.w	r0, [fp, #28]
 8005142:	b920      	cbnz	r0, 800514e <_dtoa_r+0x2e>
 8005144:	21ef      	movs	r1, #239	@ 0xef
 8005146:	4ba8      	ldr	r3, [pc, #672]	@ (80053e8 <_dtoa_r+0x2c8>)
 8005148:	48a8      	ldr	r0, [pc, #672]	@ (80053ec <_dtoa_r+0x2cc>)
 800514a:	f001 fc67 	bl	8006a1c <__assert_func>
 800514e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005152:	6007      	str	r7, [r0, #0]
 8005154:	60c7      	str	r7, [r0, #12]
 8005156:	f8db 301c 	ldr.w	r3, [fp, #28]
 800515a:	6819      	ldr	r1, [r3, #0]
 800515c:	b159      	cbz	r1, 8005176 <_dtoa_r+0x56>
 800515e:	685a      	ldr	r2, [r3, #4]
 8005160:	2301      	movs	r3, #1
 8005162:	4093      	lsls	r3, r2
 8005164:	604a      	str	r2, [r1, #4]
 8005166:	608b      	str	r3, [r1, #8]
 8005168:	4658      	mov	r0, fp
 800516a:	f000 fedf 	bl	8005f2c <_Bfree>
 800516e:	2200      	movs	r2, #0
 8005170:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005174:	601a      	str	r2, [r3, #0]
 8005176:	1e2b      	subs	r3, r5, #0
 8005178:	bfaf      	iteee	ge
 800517a:	2300      	movge	r3, #0
 800517c:	2201      	movlt	r2, #1
 800517e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005182:	9303      	strlt	r3, [sp, #12]
 8005184:	bfa8      	it	ge
 8005186:	6033      	strge	r3, [r6, #0]
 8005188:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800518c:	4b98      	ldr	r3, [pc, #608]	@ (80053f0 <_dtoa_r+0x2d0>)
 800518e:	bfb8      	it	lt
 8005190:	6032      	strlt	r2, [r6, #0]
 8005192:	ea33 0308 	bics.w	r3, r3, r8
 8005196:	d112      	bne.n	80051be <_dtoa_r+0x9e>
 8005198:	f242 730f 	movw	r3, #9999	@ 0x270f
 800519c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800519e:	6013      	str	r3, [r2, #0]
 80051a0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80051a4:	4323      	orrs	r3, r4
 80051a6:	f000 8550 	beq.w	8005c4a <_dtoa_r+0xb2a>
 80051aa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80051ac:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80053f4 <_dtoa_r+0x2d4>
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	f000 8552 	beq.w	8005c5a <_dtoa_r+0xb3a>
 80051b6:	f10a 0303 	add.w	r3, sl, #3
 80051ba:	f000 bd4c 	b.w	8005c56 <_dtoa_r+0xb36>
 80051be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80051c2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80051c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80051ca:	2200      	movs	r2, #0
 80051cc:	2300      	movs	r3, #0
 80051ce:	f7fb fbeb 	bl	80009a8 <__aeabi_dcmpeq>
 80051d2:	4607      	mov	r7, r0
 80051d4:	b158      	cbz	r0, 80051ee <_dtoa_r+0xce>
 80051d6:	2301      	movs	r3, #1
 80051d8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80051da:	6013      	str	r3, [r2, #0]
 80051dc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80051de:	b113      	cbz	r3, 80051e6 <_dtoa_r+0xc6>
 80051e0:	4b85      	ldr	r3, [pc, #532]	@ (80053f8 <_dtoa_r+0x2d8>)
 80051e2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80051e4:	6013      	str	r3, [r2, #0]
 80051e6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80053fc <_dtoa_r+0x2dc>
 80051ea:	f000 bd36 	b.w	8005c5a <_dtoa_r+0xb3a>
 80051ee:	ab14      	add	r3, sp, #80	@ 0x50
 80051f0:	9301      	str	r3, [sp, #4]
 80051f2:	ab15      	add	r3, sp, #84	@ 0x54
 80051f4:	9300      	str	r3, [sp, #0]
 80051f6:	4658      	mov	r0, fp
 80051f8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80051fc:	f001 f97e 	bl	80064fc <__d2b>
 8005200:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005204:	4681      	mov	r9, r0
 8005206:	2e00      	cmp	r6, #0
 8005208:	d077      	beq.n	80052fa <_dtoa_r+0x1da>
 800520a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800520e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005210:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005214:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005218:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800521c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005220:	9712      	str	r7, [sp, #72]	@ 0x48
 8005222:	4619      	mov	r1, r3
 8005224:	2200      	movs	r2, #0
 8005226:	4b76      	ldr	r3, [pc, #472]	@ (8005400 <_dtoa_r+0x2e0>)
 8005228:	f7fa ff9e 	bl	8000168 <__aeabi_dsub>
 800522c:	a368      	add	r3, pc, #416	@ (adr r3, 80053d0 <_dtoa_r+0x2b0>)
 800522e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005232:	f7fb f951 	bl	80004d8 <__aeabi_dmul>
 8005236:	a368      	add	r3, pc, #416	@ (adr r3, 80053d8 <_dtoa_r+0x2b8>)
 8005238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523c:	f7fa ff96 	bl	800016c <__adddf3>
 8005240:	4604      	mov	r4, r0
 8005242:	4630      	mov	r0, r6
 8005244:	460d      	mov	r5, r1
 8005246:	f7fb f8dd 	bl	8000404 <__aeabi_i2d>
 800524a:	a365      	add	r3, pc, #404	@ (adr r3, 80053e0 <_dtoa_r+0x2c0>)
 800524c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005250:	f7fb f942 	bl	80004d8 <__aeabi_dmul>
 8005254:	4602      	mov	r2, r0
 8005256:	460b      	mov	r3, r1
 8005258:	4620      	mov	r0, r4
 800525a:	4629      	mov	r1, r5
 800525c:	f7fa ff86 	bl	800016c <__adddf3>
 8005260:	4604      	mov	r4, r0
 8005262:	460d      	mov	r5, r1
 8005264:	f7fb fbe8 	bl	8000a38 <__aeabi_d2iz>
 8005268:	2200      	movs	r2, #0
 800526a:	4607      	mov	r7, r0
 800526c:	2300      	movs	r3, #0
 800526e:	4620      	mov	r0, r4
 8005270:	4629      	mov	r1, r5
 8005272:	f7fb fba3 	bl	80009bc <__aeabi_dcmplt>
 8005276:	b140      	cbz	r0, 800528a <_dtoa_r+0x16a>
 8005278:	4638      	mov	r0, r7
 800527a:	f7fb f8c3 	bl	8000404 <__aeabi_i2d>
 800527e:	4622      	mov	r2, r4
 8005280:	462b      	mov	r3, r5
 8005282:	f7fb fb91 	bl	80009a8 <__aeabi_dcmpeq>
 8005286:	b900      	cbnz	r0, 800528a <_dtoa_r+0x16a>
 8005288:	3f01      	subs	r7, #1
 800528a:	2f16      	cmp	r7, #22
 800528c:	d853      	bhi.n	8005336 <_dtoa_r+0x216>
 800528e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005292:	4b5c      	ldr	r3, [pc, #368]	@ (8005404 <_dtoa_r+0x2e4>)
 8005294:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800529c:	f7fb fb8e 	bl	80009bc <__aeabi_dcmplt>
 80052a0:	2800      	cmp	r0, #0
 80052a2:	d04a      	beq.n	800533a <_dtoa_r+0x21a>
 80052a4:	2300      	movs	r3, #0
 80052a6:	3f01      	subs	r7, #1
 80052a8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80052aa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80052ac:	1b9b      	subs	r3, r3, r6
 80052ae:	1e5a      	subs	r2, r3, #1
 80052b0:	bf46      	itte	mi
 80052b2:	f1c3 0801 	rsbmi	r8, r3, #1
 80052b6:	2300      	movmi	r3, #0
 80052b8:	f04f 0800 	movpl.w	r8, #0
 80052bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80052be:	bf48      	it	mi
 80052c0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80052c2:	2f00      	cmp	r7, #0
 80052c4:	db3b      	blt.n	800533e <_dtoa_r+0x21e>
 80052c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052c8:	970e      	str	r7, [sp, #56]	@ 0x38
 80052ca:	443b      	add	r3, r7
 80052cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80052ce:	2300      	movs	r3, #0
 80052d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80052d2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80052d4:	2b09      	cmp	r3, #9
 80052d6:	d866      	bhi.n	80053a6 <_dtoa_r+0x286>
 80052d8:	2b05      	cmp	r3, #5
 80052da:	bfc4      	itt	gt
 80052dc:	3b04      	subgt	r3, #4
 80052de:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80052e0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80052e2:	bfc8      	it	gt
 80052e4:	2400      	movgt	r4, #0
 80052e6:	f1a3 0302 	sub.w	r3, r3, #2
 80052ea:	bfd8      	it	le
 80052ec:	2401      	movle	r4, #1
 80052ee:	2b03      	cmp	r3, #3
 80052f0:	d864      	bhi.n	80053bc <_dtoa_r+0x29c>
 80052f2:	e8df f003 	tbb	[pc, r3]
 80052f6:	382b      	.short	0x382b
 80052f8:	5636      	.short	0x5636
 80052fa:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80052fe:	441e      	add	r6, r3
 8005300:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005304:	2b20      	cmp	r3, #32
 8005306:	bfc1      	itttt	gt
 8005308:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800530c:	fa08 f803 	lslgt.w	r8, r8, r3
 8005310:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005314:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005318:	bfd6      	itet	le
 800531a:	f1c3 0320 	rsble	r3, r3, #32
 800531e:	ea48 0003 	orrgt.w	r0, r8, r3
 8005322:	fa04 f003 	lslle.w	r0, r4, r3
 8005326:	f7fb f85d 	bl	80003e4 <__aeabi_ui2d>
 800532a:	2201      	movs	r2, #1
 800532c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005330:	3e01      	subs	r6, #1
 8005332:	9212      	str	r2, [sp, #72]	@ 0x48
 8005334:	e775      	b.n	8005222 <_dtoa_r+0x102>
 8005336:	2301      	movs	r3, #1
 8005338:	e7b6      	b.n	80052a8 <_dtoa_r+0x188>
 800533a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800533c:	e7b5      	b.n	80052aa <_dtoa_r+0x18a>
 800533e:	427b      	negs	r3, r7
 8005340:	930a      	str	r3, [sp, #40]	@ 0x28
 8005342:	2300      	movs	r3, #0
 8005344:	eba8 0807 	sub.w	r8, r8, r7
 8005348:	930e      	str	r3, [sp, #56]	@ 0x38
 800534a:	e7c2      	b.n	80052d2 <_dtoa_r+0x1b2>
 800534c:	2300      	movs	r3, #0
 800534e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005350:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005352:	2b00      	cmp	r3, #0
 8005354:	dc35      	bgt.n	80053c2 <_dtoa_r+0x2a2>
 8005356:	2301      	movs	r3, #1
 8005358:	461a      	mov	r2, r3
 800535a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800535e:	9221      	str	r2, [sp, #132]	@ 0x84
 8005360:	e00b      	b.n	800537a <_dtoa_r+0x25a>
 8005362:	2301      	movs	r3, #1
 8005364:	e7f3      	b.n	800534e <_dtoa_r+0x22e>
 8005366:	2300      	movs	r3, #0
 8005368:	930b      	str	r3, [sp, #44]	@ 0x2c
 800536a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800536c:	18fb      	adds	r3, r7, r3
 800536e:	9308      	str	r3, [sp, #32]
 8005370:	3301      	adds	r3, #1
 8005372:	2b01      	cmp	r3, #1
 8005374:	9307      	str	r3, [sp, #28]
 8005376:	bfb8      	it	lt
 8005378:	2301      	movlt	r3, #1
 800537a:	2100      	movs	r1, #0
 800537c:	2204      	movs	r2, #4
 800537e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005382:	f102 0514 	add.w	r5, r2, #20
 8005386:	429d      	cmp	r5, r3
 8005388:	d91f      	bls.n	80053ca <_dtoa_r+0x2aa>
 800538a:	6041      	str	r1, [r0, #4]
 800538c:	4658      	mov	r0, fp
 800538e:	f000 fd8d 	bl	8005eac <_Balloc>
 8005392:	4682      	mov	sl, r0
 8005394:	2800      	cmp	r0, #0
 8005396:	d139      	bne.n	800540c <_dtoa_r+0x2ec>
 8005398:	4602      	mov	r2, r0
 800539a:	f240 11af 	movw	r1, #431	@ 0x1af
 800539e:	4b1a      	ldr	r3, [pc, #104]	@ (8005408 <_dtoa_r+0x2e8>)
 80053a0:	e6d2      	b.n	8005148 <_dtoa_r+0x28>
 80053a2:	2301      	movs	r3, #1
 80053a4:	e7e0      	b.n	8005368 <_dtoa_r+0x248>
 80053a6:	2401      	movs	r4, #1
 80053a8:	2300      	movs	r3, #0
 80053aa:	940b      	str	r4, [sp, #44]	@ 0x2c
 80053ac:	9320      	str	r3, [sp, #128]	@ 0x80
 80053ae:	f04f 33ff 	mov.w	r3, #4294967295
 80053b2:	2200      	movs	r2, #0
 80053b4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80053b8:	2312      	movs	r3, #18
 80053ba:	e7d0      	b.n	800535e <_dtoa_r+0x23e>
 80053bc:	2301      	movs	r3, #1
 80053be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80053c0:	e7f5      	b.n	80053ae <_dtoa_r+0x28e>
 80053c2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80053c4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80053c8:	e7d7      	b.n	800537a <_dtoa_r+0x25a>
 80053ca:	3101      	adds	r1, #1
 80053cc:	0052      	lsls	r2, r2, #1
 80053ce:	e7d8      	b.n	8005382 <_dtoa_r+0x262>
 80053d0:	636f4361 	.word	0x636f4361
 80053d4:	3fd287a7 	.word	0x3fd287a7
 80053d8:	8b60c8b3 	.word	0x8b60c8b3
 80053dc:	3fc68a28 	.word	0x3fc68a28
 80053e0:	509f79fb 	.word	0x509f79fb
 80053e4:	3fd34413 	.word	0x3fd34413
 80053e8:	08008257 	.word	0x08008257
 80053ec:	0800826e 	.word	0x0800826e
 80053f0:	7ff00000 	.word	0x7ff00000
 80053f4:	08008253 	.word	0x08008253
 80053f8:	08008227 	.word	0x08008227
 80053fc:	08008226 	.word	0x08008226
 8005400:	3ff80000 	.word	0x3ff80000
 8005404:	08008368 	.word	0x08008368
 8005408:	080082c6 	.word	0x080082c6
 800540c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005410:	6018      	str	r0, [r3, #0]
 8005412:	9b07      	ldr	r3, [sp, #28]
 8005414:	2b0e      	cmp	r3, #14
 8005416:	f200 80a4 	bhi.w	8005562 <_dtoa_r+0x442>
 800541a:	2c00      	cmp	r4, #0
 800541c:	f000 80a1 	beq.w	8005562 <_dtoa_r+0x442>
 8005420:	2f00      	cmp	r7, #0
 8005422:	dd33      	ble.n	800548c <_dtoa_r+0x36c>
 8005424:	4b86      	ldr	r3, [pc, #536]	@ (8005640 <_dtoa_r+0x520>)
 8005426:	f007 020f 	and.w	r2, r7, #15
 800542a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800542e:	05f8      	lsls	r0, r7, #23
 8005430:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005434:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005438:	ea4f 1427 	mov.w	r4, r7, asr #4
 800543c:	d516      	bpl.n	800546c <_dtoa_r+0x34c>
 800543e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005442:	4b80      	ldr	r3, [pc, #512]	@ (8005644 <_dtoa_r+0x524>)
 8005444:	2603      	movs	r6, #3
 8005446:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800544a:	f7fb f96f 	bl	800072c <__aeabi_ddiv>
 800544e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005452:	f004 040f 	and.w	r4, r4, #15
 8005456:	4d7b      	ldr	r5, [pc, #492]	@ (8005644 <_dtoa_r+0x524>)
 8005458:	b954      	cbnz	r4, 8005470 <_dtoa_r+0x350>
 800545a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800545e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005462:	f7fb f963 	bl	800072c <__aeabi_ddiv>
 8005466:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800546a:	e028      	b.n	80054be <_dtoa_r+0x39e>
 800546c:	2602      	movs	r6, #2
 800546e:	e7f2      	b.n	8005456 <_dtoa_r+0x336>
 8005470:	07e1      	lsls	r1, r4, #31
 8005472:	d508      	bpl.n	8005486 <_dtoa_r+0x366>
 8005474:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005478:	e9d5 2300 	ldrd	r2, r3, [r5]
 800547c:	f7fb f82c 	bl	80004d8 <__aeabi_dmul>
 8005480:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005484:	3601      	adds	r6, #1
 8005486:	1064      	asrs	r4, r4, #1
 8005488:	3508      	adds	r5, #8
 800548a:	e7e5      	b.n	8005458 <_dtoa_r+0x338>
 800548c:	f000 80d2 	beq.w	8005634 <_dtoa_r+0x514>
 8005490:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005494:	427c      	negs	r4, r7
 8005496:	4b6a      	ldr	r3, [pc, #424]	@ (8005640 <_dtoa_r+0x520>)
 8005498:	f004 020f 	and.w	r2, r4, #15
 800549c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80054a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a4:	f7fb f818 	bl	80004d8 <__aeabi_dmul>
 80054a8:	2602      	movs	r6, #2
 80054aa:	2300      	movs	r3, #0
 80054ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054b0:	4d64      	ldr	r5, [pc, #400]	@ (8005644 <_dtoa_r+0x524>)
 80054b2:	1124      	asrs	r4, r4, #4
 80054b4:	2c00      	cmp	r4, #0
 80054b6:	f040 80b2 	bne.w	800561e <_dtoa_r+0x4fe>
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1d3      	bne.n	8005466 <_dtoa_r+0x346>
 80054be:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80054c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f000 80b7 	beq.w	8005638 <_dtoa_r+0x518>
 80054ca:	2200      	movs	r2, #0
 80054cc:	4620      	mov	r0, r4
 80054ce:	4629      	mov	r1, r5
 80054d0:	4b5d      	ldr	r3, [pc, #372]	@ (8005648 <_dtoa_r+0x528>)
 80054d2:	f7fb fa73 	bl	80009bc <__aeabi_dcmplt>
 80054d6:	2800      	cmp	r0, #0
 80054d8:	f000 80ae 	beq.w	8005638 <_dtoa_r+0x518>
 80054dc:	9b07      	ldr	r3, [sp, #28]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	f000 80aa 	beq.w	8005638 <_dtoa_r+0x518>
 80054e4:	9b08      	ldr	r3, [sp, #32]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	dd37      	ble.n	800555a <_dtoa_r+0x43a>
 80054ea:	1e7b      	subs	r3, r7, #1
 80054ec:	4620      	mov	r0, r4
 80054ee:	9304      	str	r3, [sp, #16]
 80054f0:	2200      	movs	r2, #0
 80054f2:	4629      	mov	r1, r5
 80054f4:	4b55      	ldr	r3, [pc, #340]	@ (800564c <_dtoa_r+0x52c>)
 80054f6:	f7fa ffef 	bl	80004d8 <__aeabi_dmul>
 80054fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054fe:	9c08      	ldr	r4, [sp, #32]
 8005500:	3601      	adds	r6, #1
 8005502:	4630      	mov	r0, r6
 8005504:	f7fa ff7e 	bl	8000404 <__aeabi_i2d>
 8005508:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800550c:	f7fa ffe4 	bl	80004d8 <__aeabi_dmul>
 8005510:	2200      	movs	r2, #0
 8005512:	4b4f      	ldr	r3, [pc, #316]	@ (8005650 <_dtoa_r+0x530>)
 8005514:	f7fa fe2a 	bl	800016c <__adddf3>
 8005518:	4605      	mov	r5, r0
 800551a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800551e:	2c00      	cmp	r4, #0
 8005520:	f040 809a 	bne.w	8005658 <_dtoa_r+0x538>
 8005524:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005528:	2200      	movs	r2, #0
 800552a:	4b4a      	ldr	r3, [pc, #296]	@ (8005654 <_dtoa_r+0x534>)
 800552c:	f7fa fe1c 	bl	8000168 <__aeabi_dsub>
 8005530:	4602      	mov	r2, r0
 8005532:	460b      	mov	r3, r1
 8005534:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005538:	462a      	mov	r2, r5
 800553a:	4633      	mov	r3, r6
 800553c:	f7fb fa5c 	bl	80009f8 <__aeabi_dcmpgt>
 8005540:	2800      	cmp	r0, #0
 8005542:	f040 828e 	bne.w	8005a62 <_dtoa_r+0x942>
 8005546:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800554a:	462a      	mov	r2, r5
 800554c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005550:	f7fb fa34 	bl	80009bc <__aeabi_dcmplt>
 8005554:	2800      	cmp	r0, #0
 8005556:	f040 8127 	bne.w	80057a8 <_dtoa_r+0x688>
 800555a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800555e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005562:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005564:	2b00      	cmp	r3, #0
 8005566:	f2c0 8163 	blt.w	8005830 <_dtoa_r+0x710>
 800556a:	2f0e      	cmp	r7, #14
 800556c:	f300 8160 	bgt.w	8005830 <_dtoa_r+0x710>
 8005570:	4b33      	ldr	r3, [pc, #204]	@ (8005640 <_dtoa_r+0x520>)
 8005572:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005576:	e9d3 3400 	ldrd	r3, r4, [r3]
 800557a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800557e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005580:	2b00      	cmp	r3, #0
 8005582:	da03      	bge.n	800558c <_dtoa_r+0x46c>
 8005584:	9b07      	ldr	r3, [sp, #28]
 8005586:	2b00      	cmp	r3, #0
 8005588:	f340 8100 	ble.w	800578c <_dtoa_r+0x66c>
 800558c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005590:	4656      	mov	r6, sl
 8005592:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005596:	4620      	mov	r0, r4
 8005598:	4629      	mov	r1, r5
 800559a:	f7fb f8c7 	bl	800072c <__aeabi_ddiv>
 800559e:	f7fb fa4b 	bl	8000a38 <__aeabi_d2iz>
 80055a2:	4680      	mov	r8, r0
 80055a4:	f7fa ff2e 	bl	8000404 <__aeabi_i2d>
 80055a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055ac:	f7fa ff94 	bl	80004d8 <__aeabi_dmul>
 80055b0:	4602      	mov	r2, r0
 80055b2:	460b      	mov	r3, r1
 80055b4:	4620      	mov	r0, r4
 80055b6:	4629      	mov	r1, r5
 80055b8:	f7fa fdd6 	bl	8000168 <__aeabi_dsub>
 80055bc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80055c0:	9d07      	ldr	r5, [sp, #28]
 80055c2:	f806 4b01 	strb.w	r4, [r6], #1
 80055c6:	eba6 040a 	sub.w	r4, r6, sl
 80055ca:	42a5      	cmp	r5, r4
 80055cc:	4602      	mov	r2, r0
 80055ce:	460b      	mov	r3, r1
 80055d0:	f040 8116 	bne.w	8005800 <_dtoa_r+0x6e0>
 80055d4:	f7fa fdca 	bl	800016c <__adddf3>
 80055d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055dc:	4604      	mov	r4, r0
 80055de:	460d      	mov	r5, r1
 80055e0:	f7fb fa0a 	bl	80009f8 <__aeabi_dcmpgt>
 80055e4:	2800      	cmp	r0, #0
 80055e6:	f040 80f8 	bne.w	80057da <_dtoa_r+0x6ba>
 80055ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055ee:	4620      	mov	r0, r4
 80055f0:	4629      	mov	r1, r5
 80055f2:	f7fb f9d9 	bl	80009a8 <__aeabi_dcmpeq>
 80055f6:	b118      	cbz	r0, 8005600 <_dtoa_r+0x4e0>
 80055f8:	f018 0f01 	tst.w	r8, #1
 80055fc:	f040 80ed 	bne.w	80057da <_dtoa_r+0x6ba>
 8005600:	4649      	mov	r1, r9
 8005602:	4658      	mov	r0, fp
 8005604:	f000 fc92 	bl	8005f2c <_Bfree>
 8005608:	2300      	movs	r3, #0
 800560a:	7033      	strb	r3, [r6, #0]
 800560c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800560e:	3701      	adds	r7, #1
 8005610:	601f      	str	r7, [r3, #0]
 8005612:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005614:	2b00      	cmp	r3, #0
 8005616:	f000 8320 	beq.w	8005c5a <_dtoa_r+0xb3a>
 800561a:	601e      	str	r6, [r3, #0]
 800561c:	e31d      	b.n	8005c5a <_dtoa_r+0xb3a>
 800561e:	07e2      	lsls	r2, r4, #31
 8005620:	d505      	bpl.n	800562e <_dtoa_r+0x50e>
 8005622:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005626:	f7fa ff57 	bl	80004d8 <__aeabi_dmul>
 800562a:	2301      	movs	r3, #1
 800562c:	3601      	adds	r6, #1
 800562e:	1064      	asrs	r4, r4, #1
 8005630:	3508      	adds	r5, #8
 8005632:	e73f      	b.n	80054b4 <_dtoa_r+0x394>
 8005634:	2602      	movs	r6, #2
 8005636:	e742      	b.n	80054be <_dtoa_r+0x39e>
 8005638:	9c07      	ldr	r4, [sp, #28]
 800563a:	9704      	str	r7, [sp, #16]
 800563c:	e761      	b.n	8005502 <_dtoa_r+0x3e2>
 800563e:	bf00      	nop
 8005640:	08008368 	.word	0x08008368
 8005644:	08008340 	.word	0x08008340
 8005648:	3ff00000 	.word	0x3ff00000
 800564c:	40240000 	.word	0x40240000
 8005650:	401c0000 	.word	0x401c0000
 8005654:	40140000 	.word	0x40140000
 8005658:	4b70      	ldr	r3, [pc, #448]	@ (800581c <_dtoa_r+0x6fc>)
 800565a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800565c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005660:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005664:	4454      	add	r4, sl
 8005666:	2900      	cmp	r1, #0
 8005668:	d045      	beq.n	80056f6 <_dtoa_r+0x5d6>
 800566a:	2000      	movs	r0, #0
 800566c:	496c      	ldr	r1, [pc, #432]	@ (8005820 <_dtoa_r+0x700>)
 800566e:	f7fb f85d 	bl	800072c <__aeabi_ddiv>
 8005672:	4633      	mov	r3, r6
 8005674:	462a      	mov	r2, r5
 8005676:	f7fa fd77 	bl	8000168 <__aeabi_dsub>
 800567a:	4656      	mov	r6, sl
 800567c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005680:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005684:	f7fb f9d8 	bl	8000a38 <__aeabi_d2iz>
 8005688:	4605      	mov	r5, r0
 800568a:	f7fa febb 	bl	8000404 <__aeabi_i2d>
 800568e:	4602      	mov	r2, r0
 8005690:	460b      	mov	r3, r1
 8005692:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005696:	f7fa fd67 	bl	8000168 <__aeabi_dsub>
 800569a:	4602      	mov	r2, r0
 800569c:	460b      	mov	r3, r1
 800569e:	3530      	adds	r5, #48	@ 0x30
 80056a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80056a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80056a8:	f806 5b01 	strb.w	r5, [r6], #1
 80056ac:	f7fb f986 	bl	80009bc <__aeabi_dcmplt>
 80056b0:	2800      	cmp	r0, #0
 80056b2:	d163      	bne.n	800577c <_dtoa_r+0x65c>
 80056b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80056b8:	2000      	movs	r0, #0
 80056ba:	495a      	ldr	r1, [pc, #360]	@ (8005824 <_dtoa_r+0x704>)
 80056bc:	f7fa fd54 	bl	8000168 <__aeabi_dsub>
 80056c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80056c4:	f7fb f97a 	bl	80009bc <__aeabi_dcmplt>
 80056c8:	2800      	cmp	r0, #0
 80056ca:	f040 8087 	bne.w	80057dc <_dtoa_r+0x6bc>
 80056ce:	42a6      	cmp	r6, r4
 80056d0:	f43f af43 	beq.w	800555a <_dtoa_r+0x43a>
 80056d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80056d8:	2200      	movs	r2, #0
 80056da:	4b53      	ldr	r3, [pc, #332]	@ (8005828 <_dtoa_r+0x708>)
 80056dc:	f7fa fefc 	bl	80004d8 <__aeabi_dmul>
 80056e0:	2200      	movs	r2, #0
 80056e2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80056e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056ea:	4b4f      	ldr	r3, [pc, #316]	@ (8005828 <_dtoa_r+0x708>)
 80056ec:	f7fa fef4 	bl	80004d8 <__aeabi_dmul>
 80056f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056f4:	e7c4      	b.n	8005680 <_dtoa_r+0x560>
 80056f6:	4631      	mov	r1, r6
 80056f8:	4628      	mov	r0, r5
 80056fa:	f7fa feed 	bl	80004d8 <__aeabi_dmul>
 80056fe:	4656      	mov	r6, sl
 8005700:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005704:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005706:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800570a:	f7fb f995 	bl	8000a38 <__aeabi_d2iz>
 800570e:	4605      	mov	r5, r0
 8005710:	f7fa fe78 	bl	8000404 <__aeabi_i2d>
 8005714:	4602      	mov	r2, r0
 8005716:	460b      	mov	r3, r1
 8005718:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800571c:	f7fa fd24 	bl	8000168 <__aeabi_dsub>
 8005720:	4602      	mov	r2, r0
 8005722:	460b      	mov	r3, r1
 8005724:	3530      	adds	r5, #48	@ 0x30
 8005726:	f806 5b01 	strb.w	r5, [r6], #1
 800572a:	42a6      	cmp	r6, r4
 800572c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005730:	f04f 0200 	mov.w	r2, #0
 8005734:	d124      	bne.n	8005780 <_dtoa_r+0x660>
 8005736:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800573a:	4b39      	ldr	r3, [pc, #228]	@ (8005820 <_dtoa_r+0x700>)
 800573c:	f7fa fd16 	bl	800016c <__adddf3>
 8005740:	4602      	mov	r2, r0
 8005742:	460b      	mov	r3, r1
 8005744:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005748:	f7fb f956 	bl	80009f8 <__aeabi_dcmpgt>
 800574c:	2800      	cmp	r0, #0
 800574e:	d145      	bne.n	80057dc <_dtoa_r+0x6bc>
 8005750:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005754:	2000      	movs	r0, #0
 8005756:	4932      	ldr	r1, [pc, #200]	@ (8005820 <_dtoa_r+0x700>)
 8005758:	f7fa fd06 	bl	8000168 <__aeabi_dsub>
 800575c:	4602      	mov	r2, r0
 800575e:	460b      	mov	r3, r1
 8005760:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005764:	f7fb f92a 	bl	80009bc <__aeabi_dcmplt>
 8005768:	2800      	cmp	r0, #0
 800576a:	f43f aef6 	beq.w	800555a <_dtoa_r+0x43a>
 800576e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005770:	1e73      	subs	r3, r6, #1
 8005772:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005774:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005778:	2b30      	cmp	r3, #48	@ 0x30
 800577a:	d0f8      	beq.n	800576e <_dtoa_r+0x64e>
 800577c:	9f04      	ldr	r7, [sp, #16]
 800577e:	e73f      	b.n	8005600 <_dtoa_r+0x4e0>
 8005780:	4b29      	ldr	r3, [pc, #164]	@ (8005828 <_dtoa_r+0x708>)
 8005782:	f7fa fea9 	bl	80004d8 <__aeabi_dmul>
 8005786:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800578a:	e7bc      	b.n	8005706 <_dtoa_r+0x5e6>
 800578c:	d10c      	bne.n	80057a8 <_dtoa_r+0x688>
 800578e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005792:	2200      	movs	r2, #0
 8005794:	4b25      	ldr	r3, [pc, #148]	@ (800582c <_dtoa_r+0x70c>)
 8005796:	f7fa fe9f 	bl	80004d8 <__aeabi_dmul>
 800579a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800579e:	f7fb f921 	bl	80009e4 <__aeabi_dcmpge>
 80057a2:	2800      	cmp	r0, #0
 80057a4:	f000 815b 	beq.w	8005a5e <_dtoa_r+0x93e>
 80057a8:	2400      	movs	r4, #0
 80057aa:	4625      	mov	r5, r4
 80057ac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80057ae:	4656      	mov	r6, sl
 80057b0:	43db      	mvns	r3, r3
 80057b2:	9304      	str	r3, [sp, #16]
 80057b4:	2700      	movs	r7, #0
 80057b6:	4621      	mov	r1, r4
 80057b8:	4658      	mov	r0, fp
 80057ba:	f000 fbb7 	bl	8005f2c <_Bfree>
 80057be:	2d00      	cmp	r5, #0
 80057c0:	d0dc      	beq.n	800577c <_dtoa_r+0x65c>
 80057c2:	b12f      	cbz	r7, 80057d0 <_dtoa_r+0x6b0>
 80057c4:	42af      	cmp	r7, r5
 80057c6:	d003      	beq.n	80057d0 <_dtoa_r+0x6b0>
 80057c8:	4639      	mov	r1, r7
 80057ca:	4658      	mov	r0, fp
 80057cc:	f000 fbae 	bl	8005f2c <_Bfree>
 80057d0:	4629      	mov	r1, r5
 80057d2:	4658      	mov	r0, fp
 80057d4:	f000 fbaa 	bl	8005f2c <_Bfree>
 80057d8:	e7d0      	b.n	800577c <_dtoa_r+0x65c>
 80057da:	9704      	str	r7, [sp, #16]
 80057dc:	4633      	mov	r3, r6
 80057de:	461e      	mov	r6, r3
 80057e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80057e4:	2a39      	cmp	r2, #57	@ 0x39
 80057e6:	d107      	bne.n	80057f8 <_dtoa_r+0x6d8>
 80057e8:	459a      	cmp	sl, r3
 80057ea:	d1f8      	bne.n	80057de <_dtoa_r+0x6be>
 80057ec:	9a04      	ldr	r2, [sp, #16]
 80057ee:	3201      	adds	r2, #1
 80057f0:	9204      	str	r2, [sp, #16]
 80057f2:	2230      	movs	r2, #48	@ 0x30
 80057f4:	f88a 2000 	strb.w	r2, [sl]
 80057f8:	781a      	ldrb	r2, [r3, #0]
 80057fa:	3201      	adds	r2, #1
 80057fc:	701a      	strb	r2, [r3, #0]
 80057fe:	e7bd      	b.n	800577c <_dtoa_r+0x65c>
 8005800:	2200      	movs	r2, #0
 8005802:	4b09      	ldr	r3, [pc, #36]	@ (8005828 <_dtoa_r+0x708>)
 8005804:	f7fa fe68 	bl	80004d8 <__aeabi_dmul>
 8005808:	2200      	movs	r2, #0
 800580a:	2300      	movs	r3, #0
 800580c:	4604      	mov	r4, r0
 800580e:	460d      	mov	r5, r1
 8005810:	f7fb f8ca 	bl	80009a8 <__aeabi_dcmpeq>
 8005814:	2800      	cmp	r0, #0
 8005816:	f43f aebc 	beq.w	8005592 <_dtoa_r+0x472>
 800581a:	e6f1      	b.n	8005600 <_dtoa_r+0x4e0>
 800581c:	08008368 	.word	0x08008368
 8005820:	3fe00000 	.word	0x3fe00000
 8005824:	3ff00000 	.word	0x3ff00000
 8005828:	40240000 	.word	0x40240000
 800582c:	40140000 	.word	0x40140000
 8005830:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005832:	2a00      	cmp	r2, #0
 8005834:	f000 80db 	beq.w	80059ee <_dtoa_r+0x8ce>
 8005838:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800583a:	2a01      	cmp	r2, #1
 800583c:	f300 80bf 	bgt.w	80059be <_dtoa_r+0x89e>
 8005840:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005842:	2a00      	cmp	r2, #0
 8005844:	f000 80b7 	beq.w	80059b6 <_dtoa_r+0x896>
 8005848:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800584c:	4646      	mov	r6, r8
 800584e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005850:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005852:	2101      	movs	r1, #1
 8005854:	441a      	add	r2, r3
 8005856:	4658      	mov	r0, fp
 8005858:	4498      	add	r8, r3
 800585a:	9209      	str	r2, [sp, #36]	@ 0x24
 800585c:	f000 fc1a 	bl	8006094 <__i2b>
 8005860:	4605      	mov	r5, r0
 8005862:	b15e      	cbz	r6, 800587c <_dtoa_r+0x75c>
 8005864:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005866:	2b00      	cmp	r3, #0
 8005868:	dd08      	ble.n	800587c <_dtoa_r+0x75c>
 800586a:	42b3      	cmp	r3, r6
 800586c:	bfa8      	it	ge
 800586e:	4633      	movge	r3, r6
 8005870:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005872:	eba8 0803 	sub.w	r8, r8, r3
 8005876:	1af6      	subs	r6, r6, r3
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	9309      	str	r3, [sp, #36]	@ 0x24
 800587c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800587e:	b1f3      	cbz	r3, 80058be <_dtoa_r+0x79e>
 8005880:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005882:	2b00      	cmp	r3, #0
 8005884:	f000 80b7 	beq.w	80059f6 <_dtoa_r+0x8d6>
 8005888:	b18c      	cbz	r4, 80058ae <_dtoa_r+0x78e>
 800588a:	4629      	mov	r1, r5
 800588c:	4622      	mov	r2, r4
 800588e:	4658      	mov	r0, fp
 8005890:	f000 fcbe 	bl	8006210 <__pow5mult>
 8005894:	464a      	mov	r2, r9
 8005896:	4601      	mov	r1, r0
 8005898:	4605      	mov	r5, r0
 800589a:	4658      	mov	r0, fp
 800589c:	f000 fc10 	bl	80060c0 <__multiply>
 80058a0:	4649      	mov	r1, r9
 80058a2:	9004      	str	r0, [sp, #16]
 80058a4:	4658      	mov	r0, fp
 80058a6:	f000 fb41 	bl	8005f2c <_Bfree>
 80058aa:	9b04      	ldr	r3, [sp, #16]
 80058ac:	4699      	mov	r9, r3
 80058ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80058b0:	1b1a      	subs	r2, r3, r4
 80058b2:	d004      	beq.n	80058be <_dtoa_r+0x79e>
 80058b4:	4649      	mov	r1, r9
 80058b6:	4658      	mov	r0, fp
 80058b8:	f000 fcaa 	bl	8006210 <__pow5mult>
 80058bc:	4681      	mov	r9, r0
 80058be:	2101      	movs	r1, #1
 80058c0:	4658      	mov	r0, fp
 80058c2:	f000 fbe7 	bl	8006094 <__i2b>
 80058c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80058c8:	4604      	mov	r4, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f000 81c9 	beq.w	8005c62 <_dtoa_r+0xb42>
 80058d0:	461a      	mov	r2, r3
 80058d2:	4601      	mov	r1, r0
 80058d4:	4658      	mov	r0, fp
 80058d6:	f000 fc9b 	bl	8006210 <__pow5mult>
 80058da:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80058dc:	4604      	mov	r4, r0
 80058de:	2b01      	cmp	r3, #1
 80058e0:	f300 808f 	bgt.w	8005a02 <_dtoa_r+0x8e2>
 80058e4:	9b02      	ldr	r3, [sp, #8]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	f040 8087 	bne.w	80059fa <_dtoa_r+0x8da>
 80058ec:	9b03      	ldr	r3, [sp, #12]
 80058ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	f040 8083 	bne.w	80059fe <_dtoa_r+0x8de>
 80058f8:	9b03      	ldr	r3, [sp, #12]
 80058fa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80058fe:	0d1b      	lsrs	r3, r3, #20
 8005900:	051b      	lsls	r3, r3, #20
 8005902:	b12b      	cbz	r3, 8005910 <_dtoa_r+0x7f0>
 8005904:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005906:	f108 0801 	add.w	r8, r8, #1
 800590a:	3301      	adds	r3, #1
 800590c:	9309      	str	r3, [sp, #36]	@ 0x24
 800590e:	2301      	movs	r3, #1
 8005910:	930a      	str	r3, [sp, #40]	@ 0x28
 8005912:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005914:	2b00      	cmp	r3, #0
 8005916:	f000 81aa 	beq.w	8005c6e <_dtoa_r+0xb4e>
 800591a:	6923      	ldr	r3, [r4, #16]
 800591c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005920:	6918      	ldr	r0, [r3, #16]
 8005922:	f000 fb6b 	bl	8005ffc <__hi0bits>
 8005926:	f1c0 0020 	rsb	r0, r0, #32
 800592a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800592c:	4418      	add	r0, r3
 800592e:	f010 001f 	ands.w	r0, r0, #31
 8005932:	d071      	beq.n	8005a18 <_dtoa_r+0x8f8>
 8005934:	f1c0 0320 	rsb	r3, r0, #32
 8005938:	2b04      	cmp	r3, #4
 800593a:	dd65      	ble.n	8005a08 <_dtoa_r+0x8e8>
 800593c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800593e:	f1c0 001c 	rsb	r0, r0, #28
 8005942:	4403      	add	r3, r0
 8005944:	4480      	add	r8, r0
 8005946:	4406      	add	r6, r0
 8005948:	9309      	str	r3, [sp, #36]	@ 0x24
 800594a:	f1b8 0f00 	cmp.w	r8, #0
 800594e:	dd05      	ble.n	800595c <_dtoa_r+0x83c>
 8005950:	4649      	mov	r1, r9
 8005952:	4642      	mov	r2, r8
 8005954:	4658      	mov	r0, fp
 8005956:	f000 fcb5 	bl	80062c4 <__lshift>
 800595a:	4681      	mov	r9, r0
 800595c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800595e:	2b00      	cmp	r3, #0
 8005960:	dd05      	ble.n	800596e <_dtoa_r+0x84e>
 8005962:	4621      	mov	r1, r4
 8005964:	461a      	mov	r2, r3
 8005966:	4658      	mov	r0, fp
 8005968:	f000 fcac 	bl	80062c4 <__lshift>
 800596c:	4604      	mov	r4, r0
 800596e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005970:	2b00      	cmp	r3, #0
 8005972:	d053      	beq.n	8005a1c <_dtoa_r+0x8fc>
 8005974:	4621      	mov	r1, r4
 8005976:	4648      	mov	r0, r9
 8005978:	f000 fd10 	bl	800639c <__mcmp>
 800597c:	2800      	cmp	r0, #0
 800597e:	da4d      	bge.n	8005a1c <_dtoa_r+0x8fc>
 8005980:	1e7b      	subs	r3, r7, #1
 8005982:	4649      	mov	r1, r9
 8005984:	9304      	str	r3, [sp, #16]
 8005986:	220a      	movs	r2, #10
 8005988:	2300      	movs	r3, #0
 800598a:	4658      	mov	r0, fp
 800598c:	f000 faf0 	bl	8005f70 <__multadd>
 8005990:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005992:	4681      	mov	r9, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	f000 816c 	beq.w	8005c72 <_dtoa_r+0xb52>
 800599a:	2300      	movs	r3, #0
 800599c:	4629      	mov	r1, r5
 800599e:	220a      	movs	r2, #10
 80059a0:	4658      	mov	r0, fp
 80059a2:	f000 fae5 	bl	8005f70 <__multadd>
 80059a6:	9b08      	ldr	r3, [sp, #32]
 80059a8:	4605      	mov	r5, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	dc61      	bgt.n	8005a72 <_dtoa_r+0x952>
 80059ae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	dc3b      	bgt.n	8005a2c <_dtoa_r+0x90c>
 80059b4:	e05d      	b.n	8005a72 <_dtoa_r+0x952>
 80059b6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80059b8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80059bc:	e746      	b.n	800584c <_dtoa_r+0x72c>
 80059be:	9b07      	ldr	r3, [sp, #28]
 80059c0:	1e5c      	subs	r4, r3, #1
 80059c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80059c4:	42a3      	cmp	r3, r4
 80059c6:	bfbf      	itttt	lt
 80059c8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80059ca:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80059cc:	1ae3      	sublt	r3, r4, r3
 80059ce:	18d2      	addlt	r2, r2, r3
 80059d0:	bfa8      	it	ge
 80059d2:	1b1c      	subge	r4, r3, r4
 80059d4:	9b07      	ldr	r3, [sp, #28]
 80059d6:	bfbe      	ittt	lt
 80059d8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80059da:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80059dc:	2400      	movlt	r4, #0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	bfb5      	itete	lt
 80059e2:	eba8 0603 	sublt.w	r6, r8, r3
 80059e6:	4646      	movge	r6, r8
 80059e8:	2300      	movlt	r3, #0
 80059ea:	9b07      	ldrge	r3, [sp, #28]
 80059ec:	e730      	b.n	8005850 <_dtoa_r+0x730>
 80059ee:	4646      	mov	r6, r8
 80059f0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80059f2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80059f4:	e735      	b.n	8005862 <_dtoa_r+0x742>
 80059f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80059f8:	e75c      	b.n	80058b4 <_dtoa_r+0x794>
 80059fa:	2300      	movs	r3, #0
 80059fc:	e788      	b.n	8005910 <_dtoa_r+0x7f0>
 80059fe:	9b02      	ldr	r3, [sp, #8]
 8005a00:	e786      	b.n	8005910 <_dtoa_r+0x7f0>
 8005a02:	2300      	movs	r3, #0
 8005a04:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a06:	e788      	b.n	800591a <_dtoa_r+0x7fa>
 8005a08:	d09f      	beq.n	800594a <_dtoa_r+0x82a>
 8005a0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a0c:	331c      	adds	r3, #28
 8005a0e:	441a      	add	r2, r3
 8005a10:	4498      	add	r8, r3
 8005a12:	441e      	add	r6, r3
 8005a14:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a16:	e798      	b.n	800594a <_dtoa_r+0x82a>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	e7f6      	b.n	8005a0a <_dtoa_r+0x8ea>
 8005a1c:	9b07      	ldr	r3, [sp, #28]
 8005a1e:	9704      	str	r7, [sp, #16]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	dc20      	bgt.n	8005a66 <_dtoa_r+0x946>
 8005a24:	9308      	str	r3, [sp, #32]
 8005a26:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	dd1e      	ble.n	8005a6a <_dtoa_r+0x94a>
 8005a2c:	9b08      	ldr	r3, [sp, #32]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f47f aebc 	bne.w	80057ac <_dtoa_r+0x68c>
 8005a34:	4621      	mov	r1, r4
 8005a36:	2205      	movs	r2, #5
 8005a38:	4658      	mov	r0, fp
 8005a3a:	f000 fa99 	bl	8005f70 <__multadd>
 8005a3e:	4601      	mov	r1, r0
 8005a40:	4604      	mov	r4, r0
 8005a42:	4648      	mov	r0, r9
 8005a44:	f000 fcaa 	bl	800639c <__mcmp>
 8005a48:	2800      	cmp	r0, #0
 8005a4a:	f77f aeaf 	ble.w	80057ac <_dtoa_r+0x68c>
 8005a4e:	2331      	movs	r3, #49	@ 0x31
 8005a50:	4656      	mov	r6, sl
 8005a52:	f806 3b01 	strb.w	r3, [r6], #1
 8005a56:	9b04      	ldr	r3, [sp, #16]
 8005a58:	3301      	adds	r3, #1
 8005a5a:	9304      	str	r3, [sp, #16]
 8005a5c:	e6aa      	b.n	80057b4 <_dtoa_r+0x694>
 8005a5e:	9c07      	ldr	r4, [sp, #28]
 8005a60:	9704      	str	r7, [sp, #16]
 8005a62:	4625      	mov	r5, r4
 8005a64:	e7f3      	b.n	8005a4e <_dtoa_r+0x92e>
 8005a66:	9b07      	ldr	r3, [sp, #28]
 8005a68:	9308      	str	r3, [sp, #32]
 8005a6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	f000 8104 	beq.w	8005c7a <_dtoa_r+0xb5a>
 8005a72:	2e00      	cmp	r6, #0
 8005a74:	dd05      	ble.n	8005a82 <_dtoa_r+0x962>
 8005a76:	4629      	mov	r1, r5
 8005a78:	4632      	mov	r2, r6
 8005a7a:	4658      	mov	r0, fp
 8005a7c:	f000 fc22 	bl	80062c4 <__lshift>
 8005a80:	4605      	mov	r5, r0
 8005a82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d05a      	beq.n	8005b3e <_dtoa_r+0xa1e>
 8005a88:	4658      	mov	r0, fp
 8005a8a:	6869      	ldr	r1, [r5, #4]
 8005a8c:	f000 fa0e 	bl	8005eac <_Balloc>
 8005a90:	4606      	mov	r6, r0
 8005a92:	b928      	cbnz	r0, 8005aa0 <_dtoa_r+0x980>
 8005a94:	4602      	mov	r2, r0
 8005a96:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005a9a:	4b83      	ldr	r3, [pc, #524]	@ (8005ca8 <_dtoa_r+0xb88>)
 8005a9c:	f7ff bb54 	b.w	8005148 <_dtoa_r+0x28>
 8005aa0:	692a      	ldr	r2, [r5, #16]
 8005aa2:	f105 010c 	add.w	r1, r5, #12
 8005aa6:	3202      	adds	r2, #2
 8005aa8:	0092      	lsls	r2, r2, #2
 8005aaa:	300c      	adds	r0, #12
 8005aac:	f000 ffa8 	bl	8006a00 <memcpy>
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	4631      	mov	r1, r6
 8005ab4:	4658      	mov	r0, fp
 8005ab6:	f000 fc05 	bl	80062c4 <__lshift>
 8005aba:	462f      	mov	r7, r5
 8005abc:	4605      	mov	r5, r0
 8005abe:	f10a 0301 	add.w	r3, sl, #1
 8005ac2:	9307      	str	r3, [sp, #28]
 8005ac4:	9b08      	ldr	r3, [sp, #32]
 8005ac6:	4453      	add	r3, sl
 8005ac8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005aca:	9b02      	ldr	r3, [sp, #8]
 8005acc:	f003 0301 	and.w	r3, r3, #1
 8005ad0:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ad2:	9b07      	ldr	r3, [sp, #28]
 8005ad4:	4621      	mov	r1, r4
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	4648      	mov	r0, r9
 8005ada:	9302      	str	r3, [sp, #8]
 8005adc:	f7ff fa95 	bl	800500a <quorem>
 8005ae0:	4639      	mov	r1, r7
 8005ae2:	9008      	str	r0, [sp, #32]
 8005ae4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005ae8:	4648      	mov	r0, r9
 8005aea:	f000 fc57 	bl	800639c <__mcmp>
 8005aee:	462a      	mov	r2, r5
 8005af0:	9009      	str	r0, [sp, #36]	@ 0x24
 8005af2:	4621      	mov	r1, r4
 8005af4:	4658      	mov	r0, fp
 8005af6:	f000 fc6d 	bl	80063d4 <__mdiff>
 8005afa:	68c2      	ldr	r2, [r0, #12]
 8005afc:	4606      	mov	r6, r0
 8005afe:	bb02      	cbnz	r2, 8005b42 <_dtoa_r+0xa22>
 8005b00:	4601      	mov	r1, r0
 8005b02:	4648      	mov	r0, r9
 8005b04:	f000 fc4a 	bl	800639c <__mcmp>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	4631      	mov	r1, r6
 8005b0c:	4658      	mov	r0, fp
 8005b0e:	920c      	str	r2, [sp, #48]	@ 0x30
 8005b10:	f000 fa0c 	bl	8005f2c <_Bfree>
 8005b14:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005b16:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005b18:	9e07      	ldr	r6, [sp, #28]
 8005b1a:	ea43 0102 	orr.w	r1, r3, r2
 8005b1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b20:	4319      	orrs	r1, r3
 8005b22:	d110      	bne.n	8005b46 <_dtoa_r+0xa26>
 8005b24:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005b28:	d029      	beq.n	8005b7e <_dtoa_r+0xa5e>
 8005b2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	dd02      	ble.n	8005b36 <_dtoa_r+0xa16>
 8005b30:	9b08      	ldr	r3, [sp, #32]
 8005b32:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005b36:	9b02      	ldr	r3, [sp, #8]
 8005b38:	f883 8000 	strb.w	r8, [r3]
 8005b3c:	e63b      	b.n	80057b6 <_dtoa_r+0x696>
 8005b3e:	4628      	mov	r0, r5
 8005b40:	e7bb      	b.n	8005aba <_dtoa_r+0x99a>
 8005b42:	2201      	movs	r2, #1
 8005b44:	e7e1      	b.n	8005b0a <_dtoa_r+0x9ea>
 8005b46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	db04      	blt.n	8005b56 <_dtoa_r+0xa36>
 8005b4c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8005b4e:	430b      	orrs	r3, r1
 8005b50:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005b52:	430b      	orrs	r3, r1
 8005b54:	d120      	bne.n	8005b98 <_dtoa_r+0xa78>
 8005b56:	2a00      	cmp	r2, #0
 8005b58:	dded      	ble.n	8005b36 <_dtoa_r+0xa16>
 8005b5a:	4649      	mov	r1, r9
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	4658      	mov	r0, fp
 8005b60:	f000 fbb0 	bl	80062c4 <__lshift>
 8005b64:	4621      	mov	r1, r4
 8005b66:	4681      	mov	r9, r0
 8005b68:	f000 fc18 	bl	800639c <__mcmp>
 8005b6c:	2800      	cmp	r0, #0
 8005b6e:	dc03      	bgt.n	8005b78 <_dtoa_r+0xa58>
 8005b70:	d1e1      	bne.n	8005b36 <_dtoa_r+0xa16>
 8005b72:	f018 0f01 	tst.w	r8, #1
 8005b76:	d0de      	beq.n	8005b36 <_dtoa_r+0xa16>
 8005b78:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005b7c:	d1d8      	bne.n	8005b30 <_dtoa_r+0xa10>
 8005b7e:	2339      	movs	r3, #57	@ 0x39
 8005b80:	9a02      	ldr	r2, [sp, #8]
 8005b82:	7013      	strb	r3, [r2, #0]
 8005b84:	4633      	mov	r3, r6
 8005b86:	461e      	mov	r6, r3
 8005b88:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	2a39      	cmp	r2, #57	@ 0x39
 8005b90:	d052      	beq.n	8005c38 <_dtoa_r+0xb18>
 8005b92:	3201      	adds	r2, #1
 8005b94:	701a      	strb	r2, [r3, #0]
 8005b96:	e60e      	b.n	80057b6 <_dtoa_r+0x696>
 8005b98:	2a00      	cmp	r2, #0
 8005b9a:	dd07      	ble.n	8005bac <_dtoa_r+0xa8c>
 8005b9c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005ba0:	d0ed      	beq.n	8005b7e <_dtoa_r+0xa5e>
 8005ba2:	9a02      	ldr	r2, [sp, #8]
 8005ba4:	f108 0301 	add.w	r3, r8, #1
 8005ba8:	7013      	strb	r3, [r2, #0]
 8005baa:	e604      	b.n	80057b6 <_dtoa_r+0x696>
 8005bac:	9b07      	ldr	r3, [sp, #28]
 8005bae:	9a07      	ldr	r2, [sp, #28]
 8005bb0:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005bb4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d028      	beq.n	8005c0c <_dtoa_r+0xaec>
 8005bba:	4649      	mov	r1, r9
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	220a      	movs	r2, #10
 8005bc0:	4658      	mov	r0, fp
 8005bc2:	f000 f9d5 	bl	8005f70 <__multadd>
 8005bc6:	42af      	cmp	r7, r5
 8005bc8:	4681      	mov	r9, r0
 8005bca:	f04f 0300 	mov.w	r3, #0
 8005bce:	f04f 020a 	mov.w	r2, #10
 8005bd2:	4639      	mov	r1, r7
 8005bd4:	4658      	mov	r0, fp
 8005bd6:	d107      	bne.n	8005be8 <_dtoa_r+0xac8>
 8005bd8:	f000 f9ca 	bl	8005f70 <__multadd>
 8005bdc:	4607      	mov	r7, r0
 8005bde:	4605      	mov	r5, r0
 8005be0:	9b07      	ldr	r3, [sp, #28]
 8005be2:	3301      	adds	r3, #1
 8005be4:	9307      	str	r3, [sp, #28]
 8005be6:	e774      	b.n	8005ad2 <_dtoa_r+0x9b2>
 8005be8:	f000 f9c2 	bl	8005f70 <__multadd>
 8005bec:	4629      	mov	r1, r5
 8005bee:	4607      	mov	r7, r0
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	220a      	movs	r2, #10
 8005bf4:	4658      	mov	r0, fp
 8005bf6:	f000 f9bb 	bl	8005f70 <__multadd>
 8005bfa:	4605      	mov	r5, r0
 8005bfc:	e7f0      	b.n	8005be0 <_dtoa_r+0xac0>
 8005bfe:	9b08      	ldr	r3, [sp, #32]
 8005c00:	2700      	movs	r7, #0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	bfcc      	ite	gt
 8005c06:	461e      	movgt	r6, r3
 8005c08:	2601      	movle	r6, #1
 8005c0a:	4456      	add	r6, sl
 8005c0c:	4649      	mov	r1, r9
 8005c0e:	2201      	movs	r2, #1
 8005c10:	4658      	mov	r0, fp
 8005c12:	f000 fb57 	bl	80062c4 <__lshift>
 8005c16:	4621      	mov	r1, r4
 8005c18:	4681      	mov	r9, r0
 8005c1a:	f000 fbbf 	bl	800639c <__mcmp>
 8005c1e:	2800      	cmp	r0, #0
 8005c20:	dcb0      	bgt.n	8005b84 <_dtoa_r+0xa64>
 8005c22:	d102      	bne.n	8005c2a <_dtoa_r+0xb0a>
 8005c24:	f018 0f01 	tst.w	r8, #1
 8005c28:	d1ac      	bne.n	8005b84 <_dtoa_r+0xa64>
 8005c2a:	4633      	mov	r3, r6
 8005c2c:	461e      	mov	r6, r3
 8005c2e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005c32:	2a30      	cmp	r2, #48	@ 0x30
 8005c34:	d0fa      	beq.n	8005c2c <_dtoa_r+0xb0c>
 8005c36:	e5be      	b.n	80057b6 <_dtoa_r+0x696>
 8005c38:	459a      	cmp	sl, r3
 8005c3a:	d1a4      	bne.n	8005b86 <_dtoa_r+0xa66>
 8005c3c:	9b04      	ldr	r3, [sp, #16]
 8005c3e:	3301      	adds	r3, #1
 8005c40:	9304      	str	r3, [sp, #16]
 8005c42:	2331      	movs	r3, #49	@ 0x31
 8005c44:	f88a 3000 	strb.w	r3, [sl]
 8005c48:	e5b5      	b.n	80057b6 <_dtoa_r+0x696>
 8005c4a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005c4c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005cac <_dtoa_r+0xb8c>
 8005c50:	b11b      	cbz	r3, 8005c5a <_dtoa_r+0xb3a>
 8005c52:	f10a 0308 	add.w	r3, sl, #8
 8005c56:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005c58:	6013      	str	r3, [r2, #0]
 8005c5a:	4650      	mov	r0, sl
 8005c5c:	b017      	add	sp, #92	@ 0x5c
 8005c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c62:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	f77f ae3d 	ble.w	80058e4 <_dtoa_r+0x7c4>
 8005c6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005c6c:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c6e:	2001      	movs	r0, #1
 8005c70:	e65b      	b.n	800592a <_dtoa_r+0x80a>
 8005c72:	9b08      	ldr	r3, [sp, #32]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f77f aed6 	ble.w	8005a26 <_dtoa_r+0x906>
 8005c7a:	4656      	mov	r6, sl
 8005c7c:	4621      	mov	r1, r4
 8005c7e:	4648      	mov	r0, r9
 8005c80:	f7ff f9c3 	bl	800500a <quorem>
 8005c84:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005c88:	9b08      	ldr	r3, [sp, #32]
 8005c8a:	f806 8b01 	strb.w	r8, [r6], #1
 8005c8e:	eba6 020a 	sub.w	r2, r6, sl
 8005c92:	4293      	cmp	r3, r2
 8005c94:	ddb3      	ble.n	8005bfe <_dtoa_r+0xade>
 8005c96:	4649      	mov	r1, r9
 8005c98:	2300      	movs	r3, #0
 8005c9a:	220a      	movs	r2, #10
 8005c9c:	4658      	mov	r0, fp
 8005c9e:	f000 f967 	bl	8005f70 <__multadd>
 8005ca2:	4681      	mov	r9, r0
 8005ca4:	e7ea      	b.n	8005c7c <_dtoa_r+0xb5c>
 8005ca6:	bf00      	nop
 8005ca8:	080082c6 	.word	0x080082c6
 8005cac:	0800824a 	.word	0x0800824a

08005cb0 <_free_r>:
 8005cb0:	b538      	push	{r3, r4, r5, lr}
 8005cb2:	4605      	mov	r5, r0
 8005cb4:	2900      	cmp	r1, #0
 8005cb6:	d040      	beq.n	8005d3a <_free_r+0x8a>
 8005cb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cbc:	1f0c      	subs	r4, r1, #4
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	bfb8      	it	lt
 8005cc2:	18e4      	addlt	r4, r4, r3
 8005cc4:	f000 f8e6 	bl	8005e94 <__malloc_lock>
 8005cc8:	4a1c      	ldr	r2, [pc, #112]	@ (8005d3c <_free_r+0x8c>)
 8005cca:	6813      	ldr	r3, [r2, #0]
 8005ccc:	b933      	cbnz	r3, 8005cdc <_free_r+0x2c>
 8005cce:	6063      	str	r3, [r4, #4]
 8005cd0:	6014      	str	r4, [r2, #0]
 8005cd2:	4628      	mov	r0, r5
 8005cd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cd8:	f000 b8e2 	b.w	8005ea0 <__malloc_unlock>
 8005cdc:	42a3      	cmp	r3, r4
 8005cde:	d908      	bls.n	8005cf2 <_free_r+0x42>
 8005ce0:	6820      	ldr	r0, [r4, #0]
 8005ce2:	1821      	adds	r1, r4, r0
 8005ce4:	428b      	cmp	r3, r1
 8005ce6:	bf01      	itttt	eq
 8005ce8:	6819      	ldreq	r1, [r3, #0]
 8005cea:	685b      	ldreq	r3, [r3, #4]
 8005cec:	1809      	addeq	r1, r1, r0
 8005cee:	6021      	streq	r1, [r4, #0]
 8005cf0:	e7ed      	b.n	8005cce <_free_r+0x1e>
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	b10b      	cbz	r3, 8005cfc <_free_r+0x4c>
 8005cf8:	42a3      	cmp	r3, r4
 8005cfa:	d9fa      	bls.n	8005cf2 <_free_r+0x42>
 8005cfc:	6811      	ldr	r1, [r2, #0]
 8005cfe:	1850      	adds	r0, r2, r1
 8005d00:	42a0      	cmp	r0, r4
 8005d02:	d10b      	bne.n	8005d1c <_free_r+0x6c>
 8005d04:	6820      	ldr	r0, [r4, #0]
 8005d06:	4401      	add	r1, r0
 8005d08:	1850      	adds	r0, r2, r1
 8005d0a:	4283      	cmp	r3, r0
 8005d0c:	6011      	str	r1, [r2, #0]
 8005d0e:	d1e0      	bne.n	8005cd2 <_free_r+0x22>
 8005d10:	6818      	ldr	r0, [r3, #0]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	4408      	add	r0, r1
 8005d16:	6010      	str	r0, [r2, #0]
 8005d18:	6053      	str	r3, [r2, #4]
 8005d1a:	e7da      	b.n	8005cd2 <_free_r+0x22>
 8005d1c:	d902      	bls.n	8005d24 <_free_r+0x74>
 8005d1e:	230c      	movs	r3, #12
 8005d20:	602b      	str	r3, [r5, #0]
 8005d22:	e7d6      	b.n	8005cd2 <_free_r+0x22>
 8005d24:	6820      	ldr	r0, [r4, #0]
 8005d26:	1821      	adds	r1, r4, r0
 8005d28:	428b      	cmp	r3, r1
 8005d2a:	bf01      	itttt	eq
 8005d2c:	6819      	ldreq	r1, [r3, #0]
 8005d2e:	685b      	ldreq	r3, [r3, #4]
 8005d30:	1809      	addeq	r1, r1, r0
 8005d32:	6021      	streq	r1, [r4, #0]
 8005d34:	6063      	str	r3, [r4, #4]
 8005d36:	6054      	str	r4, [r2, #4]
 8005d38:	e7cb      	b.n	8005cd2 <_free_r+0x22>
 8005d3a:	bd38      	pop	{r3, r4, r5, pc}
 8005d3c:	20000808 	.word	0x20000808

08005d40 <malloc>:
 8005d40:	4b02      	ldr	r3, [pc, #8]	@ (8005d4c <malloc+0xc>)
 8005d42:	4601      	mov	r1, r0
 8005d44:	6818      	ldr	r0, [r3, #0]
 8005d46:	f000 b825 	b.w	8005d94 <_malloc_r>
 8005d4a:	bf00      	nop
 8005d4c:	20000018 	.word	0x20000018

08005d50 <sbrk_aligned>:
 8005d50:	b570      	push	{r4, r5, r6, lr}
 8005d52:	4e0f      	ldr	r6, [pc, #60]	@ (8005d90 <sbrk_aligned+0x40>)
 8005d54:	460c      	mov	r4, r1
 8005d56:	6831      	ldr	r1, [r6, #0]
 8005d58:	4605      	mov	r5, r0
 8005d5a:	b911      	cbnz	r1, 8005d62 <sbrk_aligned+0x12>
 8005d5c:	f000 fe40 	bl	80069e0 <_sbrk_r>
 8005d60:	6030      	str	r0, [r6, #0]
 8005d62:	4621      	mov	r1, r4
 8005d64:	4628      	mov	r0, r5
 8005d66:	f000 fe3b 	bl	80069e0 <_sbrk_r>
 8005d6a:	1c43      	adds	r3, r0, #1
 8005d6c:	d103      	bne.n	8005d76 <sbrk_aligned+0x26>
 8005d6e:	f04f 34ff 	mov.w	r4, #4294967295
 8005d72:	4620      	mov	r0, r4
 8005d74:	bd70      	pop	{r4, r5, r6, pc}
 8005d76:	1cc4      	adds	r4, r0, #3
 8005d78:	f024 0403 	bic.w	r4, r4, #3
 8005d7c:	42a0      	cmp	r0, r4
 8005d7e:	d0f8      	beq.n	8005d72 <sbrk_aligned+0x22>
 8005d80:	1a21      	subs	r1, r4, r0
 8005d82:	4628      	mov	r0, r5
 8005d84:	f000 fe2c 	bl	80069e0 <_sbrk_r>
 8005d88:	3001      	adds	r0, #1
 8005d8a:	d1f2      	bne.n	8005d72 <sbrk_aligned+0x22>
 8005d8c:	e7ef      	b.n	8005d6e <sbrk_aligned+0x1e>
 8005d8e:	bf00      	nop
 8005d90:	20000804 	.word	0x20000804

08005d94 <_malloc_r>:
 8005d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d98:	1ccd      	adds	r5, r1, #3
 8005d9a:	f025 0503 	bic.w	r5, r5, #3
 8005d9e:	3508      	adds	r5, #8
 8005da0:	2d0c      	cmp	r5, #12
 8005da2:	bf38      	it	cc
 8005da4:	250c      	movcc	r5, #12
 8005da6:	2d00      	cmp	r5, #0
 8005da8:	4606      	mov	r6, r0
 8005daa:	db01      	blt.n	8005db0 <_malloc_r+0x1c>
 8005dac:	42a9      	cmp	r1, r5
 8005dae:	d904      	bls.n	8005dba <_malloc_r+0x26>
 8005db0:	230c      	movs	r3, #12
 8005db2:	6033      	str	r3, [r6, #0]
 8005db4:	2000      	movs	r0, #0
 8005db6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005e90 <_malloc_r+0xfc>
 8005dbe:	f000 f869 	bl	8005e94 <__malloc_lock>
 8005dc2:	f8d8 3000 	ldr.w	r3, [r8]
 8005dc6:	461c      	mov	r4, r3
 8005dc8:	bb44      	cbnz	r4, 8005e1c <_malloc_r+0x88>
 8005dca:	4629      	mov	r1, r5
 8005dcc:	4630      	mov	r0, r6
 8005dce:	f7ff ffbf 	bl	8005d50 <sbrk_aligned>
 8005dd2:	1c43      	adds	r3, r0, #1
 8005dd4:	4604      	mov	r4, r0
 8005dd6:	d158      	bne.n	8005e8a <_malloc_r+0xf6>
 8005dd8:	f8d8 4000 	ldr.w	r4, [r8]
 8005ddc:	4627      	mov	r7, r4
 8005dde:	2f00      	cmp	r7, #0
 8005de0:	d143      	bne.n	8005e6a <_malloc_r+0xd6>
 8005de2:	2c00      	cmp	r4, #0
 8005de4:	d04b      	beq.n	8005e7e <_malloc_r+0xea>
 8005de6:	6823      	ldr	r3, [r4, #0]
 8005de8:	4639      	mov	r1, r7
 8005dea:	4630      	mov	r0, r6
 8005dec:	eb04 0903 	add.w	r9, r4, r3
 8005df0:	f000 fdf6 	bl	80069e0 <_sbrk_r>
 8005df4:	4581      	cmp	r9, r0
 8005df6:	d142      	bne.n	8005e7e <_malloc_r+0xea>
 8005df8:	6821      	ldr	r1, [r4, #0]
 8005dfa:	4630      	mov	r0, r6
 8005dfc:	1a6d      	subs	r5, r5, r1
 8005dfe:	4629      	mov	r1, r5
 8005e00:	f7ff ffa6 	bl	8005d50 <sbrk_aligned>
 8005e04:	3001      	adds	r0, #1
 8005e06:	d03a      	beq.n	8005e7e <_malloc_r+0xea>
 8005e08:	6823      	ldr	r3, [r4, #0]
 8005e0a:	442b      	add	r3, r5
 8005e0c:	6023      	str	r3, [r4, #0]
 8005e0e:	f8d8 3000 	ldr.w	r3, [r8]
 8005e12:	685a      	ldr	r2, [r3, #4]
 8005e14:	bb62      	cbnz	r2, 8005e70 <_malloc_r+0xdc>
 8005e16:	f8c8 7000 	str.w	r7, [r8]
 8005e1a:	e00f      	b.n	8005e3c <_malloc_r+0xa8>
 8005e1c:	6822      	ldr	r2, [r4, #0]
 8005e1e:	1b52      	subs	r2, r2, r5
 8005e20:	d420      	bmi.n	8005e64 <_malloc_r+0xd0>
 8005e22:	2a0b      	cmp	r2, #11
 8005e24:	d917      	bls.n	8005e56 <_malloc_r+0xc2>
 8005e26:	1961      	adds	r1, r4, r5
 8005e28:	42a3      	cmp	r3, r4
 8005e2a:	6025      	str	r5, [r4, #0]
 8005e2c:	bf18      	it	ne
 8005e2e:	6059      	strne	r1, [r3, #4]
 8005e30:	6863      	ldr	r3, [r4, #4]
 8005e32:	bf08      	it	eq
 8005e34:	f8c8 1000 	streq.w	r1, [r8]
 8005e38:	5162      	str	r2, [r4, r5]
 8005e3a:	604b      	str	r3, [r1, #4]
 8005e3c:	4630      	mov	r0, r6
 8005e3e:	f000 f82f 	bl	8005ea0 <__malloc_unlock>
 8005e42:	f104 000b 	add.w	r0, r4, #11
 8005e46:	1d23      	adds	r3, r4, #4
 8005e48:	f020 0007 	bic.w	r0, r0, #7
 8005e4c:	1ac2      	subs	r2, r0, r3
 8005e4e:	bf1c      	itt	ne
 8005e50:	1a1b      	subne	r3, r3, r0
 8005e52:	50a3      	strne	r3, [r4, r2]
 8005e54:	e7af      	b.n	8005db6 <_malloc_r+0x22>
 8005e56:	6862      	ldr	r2, [r4, #4]
 8005e58:	42a3      	cmp	r3, r4
 8005e5a:	bf0c      	ite	eq
 8005e5c:	f8c8 2000 	streq.w	r2, [r8]
 8005e60:	605a      	strne	r2, [r3, #4]
 8005e62:	e7eb      	b.n	8005e3c <_malloc_r+0xa8>
 8005e64:	4623      	mov	r3, r4
 8005e66:	6864      	ldr	r4, [r4, #4]
 8005e68:	e7ae      	b.n	8005dc8 <_malloc_r+0x34>
 8005e6a:	463c      	mov	r4, r7
 8005e6c:	687f      	ldr	r7, [r7, #4]
 8005e6e:	e7b6      	b.n	8005dde <_malloc_r+0x4a>
 8005e70:	461a      	mov	r2, r3
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	42a3      	cmp	r3, r4
 8005e76:	d1fb      	bne.n	8005e70 <_malloc_r+0xdc>
 8005e78:	2300      	movs	r3, #0
 8005e7a:	6053      	str	r3, [r2, #4]
 8005e7c:	e7de      	b.n	8005e3c <_malloc_r+0xa8>
 8005e7e:	230c      	movs	r3, #12
 8005e80:	4630      	mov	r0, r6
 8005e82:	6033      	str	r3, [r6, #0]
 8005e84:	f000 f80c 	bl	8005ea0 <__malloc_unlock>
 8005e88:	e794      	b.n	8005db4 <_malloc_r+0x20>
 8005e8a:	6005      	str	r5, [r0, #0]
 8005e8c:	e7d6      	b.n	8005e3c <_malloc_r+0xa8>
 8005e8e:	bf00      	nop
 8005e90:	20000808 	.word	0x20000808

08005e94 <__malloc_lock>:
 8005e94:	4801      	ldr	r0, [pc, #4]	@ (8005e9c <__malloc_lock+0x8>)
 8005e96:	f7ff b8a8 	b.w	8004fea <__retarget_lock_acquire_recursive>
 8005e9a:	bf00      	nop
 8005e9c:	20000800 	.word	0x20000800

08005ea0 <__malloc_unlock>:
 8005ea0:	4801      	ldr	r0, [pc, #4]	@ (8005ea8 <__malloc_unlock+0x8>)
 8005ea2:	f7ff b8a3 	b.w	8004fec <__retarget_lock_release_recursive>
 8005ea6:	bf00      	nop
 8005ea8:	20000800 	.word	0x20000800

08005eac <_Balloc>:
 8005eac:	b570      	push	{r4, r5, r6, lr}
 8005eae:	69c6      	ldr	r6, [r0, #28]
 8005eb0:	4604      	mov	r4, r0
 8005eb2:	460d      	mov	r5, r1
 8005eb4:	b976      	cbnz	r6, 8005ed4 <_Balloc+0x28>
 8005eb6:	2010      	movs	r0, #16
 8005eb8:	f7ff ff42 	bl	8005d40 <malloc>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	61e0      	str	r0, [r4, #28]
 8005ec0:	b920      	cbnz	r0, 8005ecc <_Balloc+0x20>
 8005ec2:	216b      	movs	r1, #107	@ 0x6b
 8005ec4:	4b17      	ldr	r3, [pc, #92]	@ (8005f24 <_Balloc+0x78>)
 8005ec6:	4818      	ldr	r0, [pc, #96]	@ (8005f28 <_Balloc+0x7c>)
 8005ec8:	f000 fda8 	bl	8006a1c <__assert_func>
 8005ecc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ed0:	6006      	str	r6, [r0, #0]
 8005ed2:	60c6      	str	r6, [r0, #12]
 8005ed4:	69e6      	ldr	r6, [r4, #28]
 8005ed6:	68f3      	ldr	r3, [r6, #12]
 8005ed8:	b183      	cbz	r3, 8005efc <_Balloc+0x50>
 8005eda:	69e3      	ldr	r3, [r4, #28]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005ee2:	b9b8      	cbnz	r0, 8005f14 <_Balloc+0x68>
 8005ee4:	2101      	movs	r1, #1
 8005ee6:	fa01 f605 	lsl.w	r6, r1, r5
 8005eea:	1d72      	adds	r2, r6, #5
 8005eec:	4620      	mov	r0, r4
 8005eee:	0092      	lsls	r2, r2, #2
 8005ef0:	f000 fdb2 	bl	8006a58 <_calloc_r>
 8005ef4:	b160      	cbz	r0, 8005f10 <_Balloc+0x64>
 8005ef6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005efa:	e00e      	b.n	8005f1a <_Balloc+0x6e>
 8005efc:	2221      	movs	r2, #33	@ 0x21
 8005efe:	2104      	movs	r1, #4
 8005f00:	4620      	mov	r0, r4
 8005f02:	f000 fda9 	bl	8006a58 <_calloc_r>
 8005f06:	69e3      	ldr	r3, [r4, #28]
 8005f08:	60f0      	str	r0, [r6, #12]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d1e4      	bne.n	8005eda <_Balloc+0x2e>
 8005f10:	2000      	movs	r0, #0
 8005f12:	bd70      	pop	{r4, r5, r6, pc}
 8005f14:	6802      	ldr	r2, [r0, #0]
 8005f16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005f20:	e7f7      	b.n	8005f12 <_Balloc+0x66>
 8005f22:	bf00      	nop
 8005f24:	08008257 	.word	0x08008257
 8005f28:	080082d7 	.word	0x080082d7

08005f2c <_Bfree>:
 8005f2c:	b570      	push	{r4, r5, r6, lr}
 8005f2e:	69c6      	ldr	r6, [r0, #28]
 8005f30:	4605      	mov	r5, r0
 8005f32:	460c      	mov	r4, r1
 8005f34:	b976      	cbnz	r6, 8005f54 <_Bfree+0x28>
 8005f36:	2010      	movs	r0, #16
 8005f38:	f7ff ff02 	bl	8005d40 <malloc>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	61e8      	str	r0, [r5, #28]
 8005f40:	b920      	cbnz	r0, 8005f4c <_Bfree+0x20>
 8005f42:	218f      	movs	r1, #143	@ 0x8f
 8005f44:	4b08      	ldr	r3, [pc, #32]	@ (8005f68 <_Bfree+0x3c>)
 8005f46:	4809      	ldr	r0, [pc, #36]	@ (8005f6c <_Bfree+0x40>)
 8005f48:	f000 fd68 	bl	8006a1c <__assert_func>
 8005f4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f50:	6006      	str	r6, [r0, #0]
 8005f52:	60c6      	str	r6, [r0, #12]
 8005f54:	b13c      	cbz	r4, 8005f66 <_Bfree+0x3a>
 8005f56:	69eb      	ldr	r3, [r5, #28]
 8005f58:	6862      	ldr	r2, [r4, #4]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f60:	6021      	str	r1, [r4, #0]
 8005f62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005f66:	bd70      	pop	{r4, r5, r6, pc}
 8005f68:	08008257 	.word	0x08008257
 8005f6c:	080082d7 	.word	0x080082d7

08005f70 <__multadd>:
 8005f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f74:	4607      	mov	r7, r0
 8005f76:	460c      	mov	r4, r1
 8005f78:	461e      	mov	r6, r3
 8005f7a:	2000      	movs	r0, #0
 8005f7c:	690d      	ldr	r5, [r1, #16]
 8005f7e:	f101 0c14 	add.w	ip, r1, #20
 8005f82:	f8dc 3000 	ldr.w	r3, [ip]
 8005f86:	3001      	adds	r0, #1
 8005f88:	b299      	uxth	r1, r3
 8005f8a:	fb02 6101 	mla	r1, r2, r1, r6
 8005f8e:	0c1e      	lsrs	r6, r3, #16
 8005f90:	0c0b      	lsrs	r3, r1, #16
 8005f92:	fb02 3306 	mla	r3, r2, r6, r3
 8005f96:	b289      	uxth	r1, r1
 8005f98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005f9c:	4285      	cmp	r5, r0
 8005f9e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005fa2:	f84c 1b04 	str.w	r1, [ip], #4
 8005fa6:	dcec      	bgt.n	8005f82 <__multadd+0x12>
 8005fa8:	b30e      	cbz	r6, 8005fee <__multadd+0x7e>
 8005faa:	68a3      	ldr	r3, [r4, #8]
 8005fac:	42ab      	cmp	r3, r5
 8005fae:	dc19      	bgt.n	8005fe4 <__multadd+0x74>
 8005fb0:	6861      	ldr	r1, [r4, #4]
 8005fb2:	4638      	mov	r0, r7
 8005fb4:	3101      	adds	r1, #1
 8005fb6:	f7ff ff79 	bl	8005eac <_Balloc>
 8005fba:	4680      	mov	r8, r0
 8005fbc:	b928      	cbnz	r0, 8005fca <__multadd+0x5a>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	21ba      	movs	r1, #186	@ 0xba
 8005fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8005ff4 <__multadd+0x84>)
 8005fc4:	480c      	ldr	r0, [pc, #48]	@ (8005ff8 <__multadd+0x88>)
 8005fc6:	f000 fd29 	bl	8006a1c <__assert_func>
 8005fca:	6922      	ldr	r2, [r4, #16]
 8005fcc:	f104 010c 	add.w	r1, r4, #12
 8005fd0:	3202      	adds	r2, #2
 8005fd2:	0092      	lsls	r2, r2, #2
 8005fd4:	300c      	adds	r0, #12
 8005fd6:	f000 fd13 	bl	8006a00 <memcpy>
 8005fda:	4621      	mov	r1, r4
 8005fdc:	4638      	mov	r0, r7
 8005fde:	f7ff ffa5 	bl	8005f2c <_Bfree>
 8005fe2:	4644      	mov	r4, r8
 8005fe4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005fe8:	3501      	adds	r5, #1
 8005fea:	615e      	str	r6, [r3, #20]
 8005fec:	6125      	str	r5, [r4, #16]
 8005fee:	4620      	mov	r0, r4
 8005ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ff4:	080082c6 	.word	0x080082c6
 8005ff8:	080082d7 	.word	0x080082d7

08005ffc <__hi0bits>:
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006002:	bf3a      	itte	cc
 8006004:	0403      	lslcc	r3, r0, #16
 8006006:	2010      	movcc	r0, #16
 8006008:	2000      	movcs	r0, #0
 800600a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800600e:	bf3c      	itt	cc
 8006010:	021b      	lslcc	r3, r3, #8
 8006012:	3008      	addcc	r0, #8
 8006014:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006018:	bf3c      	itt	cc
 800601a:	011b      	lslcc	r3, r3, #4
 800601c:	3004      	addcc	r0, #4
 800601e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006022:	bf3c      	itt	cc
 8006024:	009b      	lslcc	r3, r3, #2
 8006026:	3002      	addcc	r0, #2
 8006028:	2b00      	cmp	r3, #0
 800602a:	db05      	blt.n	8006038 <__hi0bits+0x3c>
 800602c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006030:	f100 0001 	add.w	r0, r0, #1
 8006034:	bf08      	it	eq
 8006036:	2020      	moveq	r0, #32
 8006038:	4770      	bx	lr

0800603a <__lo0bits>:
 800603a:	6803      	ldr	r3, [r0, #0]
 800603c:	4602      	mov	r2, r0
 800603e:	f013 0007 	ands.w	r0, r3, #7
 8006042:	d00b      	beq.n	800605c <__lo0bits+0x22>
 8006044:	07d9      	lsls	r1, r3, #31
 8006046:	d421      	bmi.n	800608c <__lo0bits+0x52>
 8006048:	0798      	lsls	r0, r3, #30
 800604a:	bf49      	itett	mi
 800604c:	085b      	lsrmi	r3, r3, #1
 800604e:	089b      	lsrpl	r3, r3, #2
 8006050:	2001      	movmi	r0, #1
 8006052:	6013      	strmi	r3, [r2, #0]
 8006054:	bf5c      	itt	pl
 8006056:	2002      	movpl	r0, #2
 8006058:	6013      	strpl	r3, [r2, #0]
 800605a:	4770      	bx	lr
 800605c:	b299      	uxth	r1, r3
 800605e:	b909      	cbnz	r1, 8006064 <__lo0bits+0x2a>
 8006060:	2010      	movs	r0, #16
 8006062:	0c1b      	lsrs	r3, r3, #16
 8006064:	b2d9      	uxtb	r1, r3
 8006066:	b909      	cbnz	r1, 800606c <__lo0bits+0x32>
 8006068:	3008      	adds	r0, #8
 800606a:	0a1b      	lsrs	r3, r3, #8
 800606c:	0719      	lsls	r1, r3, #28
 800606e:	bf04      	itt	eq
 8006070:	091b      	lsreq	r3, r3, #4
 8006072:	3004      	addeq	r0, #4
 8006074:	0799      	lsls	r1, r3, #30
 8006076:	bf04      	itt	eq
 8006078:	089b      	lsreq	r3, r3, #2
 800607a:	3002      	addeq	r0, #2
 800607c:	07d9      	lsls	r1, r3, #31
 800607e:	d403      	bmi.n	8006088 <__lo0bits+0x4e>
 8006080:	085b      	lsrs	r3, r3, #1
 8006082:	f100 0001 	add.w	r0, r0, #1
 8006086:	d003      	beq.n	8006090 <__lo0bits+0x56>
 8006088:	6013      	str	r3, [r2, #0]
 800608a:	4770      	bx	lr
 800608c:	2000      	movs	r0, #0
 800608e:	4770      	bx	lr
 8006090:	2020      	movs	r0, #32
 8006092:	4770      	bx	lr

08006094 <__i2b>:
 8006094:	b510      	push	{r4, lr}
 8006096:	460c      	mov	r4, r1
 8006098:	2101      	movs	r1, #1
 800609a:	f7ff ff07 	bl	8005eac <_Balloc>
 800609e:	4602      	mov	r2, r0
 80060a0:	b928      	cbnz	r0, 80060ae <__i2b+0x1a>
 80060a2:	f240 1145 	movw	r1, #325	@ 0x145
 80060a6:	4b04      	ldr	r3, [pc, #16]	@ (80060b8 <__i2b+0x24>)
 80060a8:	4804      	ldr	r0, [pc, #16]	@ (80060bc <__i2b+0x28>)
 80060aa:	f000 fcb7 	bl	8006a1c <__assert_func>
 80060ae:	2301      	movs	r3, #1
 80060b0:	6144      	str	r4, [r0, #20]
 80060b2:	6103      	str	r3, [r0, #16]
 80060b4:	bd10      	pop	{r4, pc}
 80060b6:	bf00      	nop
 80060b8:	080082c6 	.word	0x080082c6
 80060bc:	080082d7 	.word	0x080082d7

080060c0 <__multiply>:
 80060c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060c4:	4614      	mov	r4, r2
 80060c6:	690a      	ldr	r2, [r1, #16]
 80060c8:	6923      	ldr	r3, [r4, #16]
 80060ca:	460f      	mov	r7, r1
 80060cc:	429a      	cmp	r2, r3
 80060ce:	bfa2      	ittt	ge
 80060d0:	4623      	movge	r3, r4
 80060d2:	460c      	movge	r4, r1
 80060d4:	461f      	movge	r7, r3
 80060d6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80060da:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80060de:	68a3      	ldr	r3, [r4, #8]
 80060e0:	6861      	ldr	r1, [r4, #4]
 80060e2:	eb0a 0609 	add.w	r6, sl, r9
 80060e6:	42b3      	cmp	r3, r6
 80060e8:	b085      	sub	sp, #20
 80060ea:	bfb8      	it	lt
 80060ec:	3101      	addlt	r1, #1
 80060ee:	f7ff fedd 	bl	8005eac <_Balloc>
 80060f2:	b930      	cbnz	r0, 8006102 <__multiply+0x42>
 80060f4:	4602      	mov	r2, r0
 80060f6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80060fa:	4b43      	ldr	r3, [pc, #268]	@ (8006208 <__multiply+0x148>)
 80060fc:	4843      	ldr	r0, [pc, #268]	@ (800620c <__multiply+0x14c>)
 80060fe:	f000 fc8d 	bl	8006a1c <__assert_func>
 8006102:	f100 0514 	add.w	r5, r0, #20
 8006106:	462b      	mov	r3, r5
 8006108:	2200      	movs	r2, #0
 800610a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800610e:	4543      	cmp	r3, r8
 8006110:	d321      	bcc.n	8006156 <__multiply+0x96>
 8006112:	f107 0114 	add.w	r1, r7, #20
 8006116:	f104 0214 	add.w	r2, r4, #20
 800611a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800611e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006122:	9302      	str	r3, [sp, #8]
 8006124:	1b13      	subs	r3, r2, r4
 8006126:	3b15      	subs	r3, #21
 8006128:	f023 0303 	bic.w	r3, r3, #3
 800612c:	3304      	adds	r3, #4
 800612e:	f104 0715 	add.w	r7, r4, #21
 8006132:	42ba      	cmp	r2, r7
 8006134:	bf38      	it	cc
 8006136:	2304      	movcc	r3, #4
 8006138:	9301      	str	r3, [sp, #4]
 800613a:	9b02      	ldr	r3, [sp, #8]
 800613c:	9103      	str	r1, [sp, #12]
 800613e:	428b      	cmp	r3, r1
 8006140:	d80c      	bhi.n	800615c <__multiply+0x9c>
 8006142:	2e00      	cmp	r6, #0
 8006144:	dd03      	ble.n	800614e <__multiply+0x8e>
 8006146:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800614a:	2b00      	cmp	r3, #0
 800614c:	d05a      	beq.n	8006204 <__multiply+0x144>
 800614e:	6106      	str	r6, [r0, #16]
 8006150:	b005      	add	sp, #20
 8006152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006156:	f843 2b04 	str.w	r2, [r3], #4
 800615a:	e7d8      	b.n	800610e <__multiply+0x4e>
 800615c:	f8b1 a000 	ldrh.w	sl, [r1]
 8006160:	f1ba 0f00 	cmp.w	sl, #0
 8006164:	d023      	beq.n	80061ae <__multiply+0xee>
 8006166:	46a9      	mov	r9, r5
 8006168:	f04f 0c00 	mov.w	ip, #0
 800616c:	f104 0e14 	add.w	lr, r4, #20
 8006170:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006174:	f8d9 3000 	ldr.w	r3, [r9]
 8006178:	fa1f fb87 	uxth.w	fp, r7
 800617c:	b29b      	uxth	r3, r3
 800617e:	fb0a 330b 	mla	r3, sl, fp, r3
 8006182:	4463      	add	r3, ip
 8006184:	f8d9 c000 	ldr.w	ip, [r9]
 8006188:	0c3f      	lsrs	r7, r7, #16
 800618a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800618e:	fb0a c707 	mla	r7, sl, r7, ip
 8006192:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006196:	b29b      	uxth	r3, r3
 8006198:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800619c:	4572      	cmp	r2, lr
 800619e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80061a2:	f849 3b04 	str.w	r3, [r9], #4
 80061a6:	d8e3      	bhi.n	8006170 <__multiply+0xb0>
 80061a8:	9b01      	ldr	r3, [sp, #4]
 80061aa:	f845 c003 	str.w	ip, [r5, r3]
 80061ae:	9b03      	ldr	r3, [sp, #12]
 80061b0:	3104      	adds	r1, #4
 80061b2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80061b6:	f1b9 0f00 	cmp.w	r9, #0
 80061ba:	d021      	beq.n	8006200 <__multiply+0x140>
 80061bc:	46ae      	mov	lr, r5
 80061be:	f04f 0a00 	mov.w	sl, #0
 80061c2:	682b      	ldr	r3, [r5, #0]
 80061c4:	f104 0c14 	add.w	ip, r4, #20
 80061c8:	f8bc b000 	ldrh.w	fp, [ip]
 80061cc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	fb09 770b 	mla	r7, r9, fp, r7
 80061d6:	4457      	add	r7, sl
 80061d8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80061dc:	f84e 3b04 	str.w	r3, [lr], #4
 80061e0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80061e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80061e8:	f8be 3000 	ldrh.w	r3, [lr]
 80061ec:	4562      	cmp	r2, ip
 80061ee:	fb09 330a 	mla	r3, r9, sl, r3
 80061f2:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80061f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80061fa:	d8e5      	bhi.n	80061c8 <__multiply+0x108>
 80061fc:	9f01      	ldr	r7, [sp, #4]
 80061fe:	51eb      	str	r3, [r5, r7]
 8006200:	3504      	adds	r5, #4
 8006202:	e79a      	b.n	800613a <__multiply+0x7a>
 8006204:	3e01      	subs	r6, #1
 8006206:	e79c      	b.n	8006142 <__multiply+0x82>
 8006208:	080082c6 	.word	0x080082c6
 800620c:	080082d7 	.word	0x080082d7

08006210 <__pow5mult>:
 8006210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006214:	4615      	mov	r5, r2
 8006216:	f012 0203 	ands.w	r2, r2, #3
 800621a:	4607      	mov	r7, r0
 800621c:	460e      	mov	r6, r1
 800621e:	d007      	beq.n	8006230 <__pow5mult+0x20>
 8006220:	4c25      	ldr	r4, [pc, #148]	@ (80062b8 <__pow5mult+0xa8>)
 8006222:	3a01      	subs	r2, #1
 8006224:	2300      	movs	r3, #0
 8006226:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800622a:	f7ff fea1 	bl	8005f70 <__multadd>
 800622e:	4606      	mov	r6, r0
 8006230:	10ad      	asrs	r5, r5, #2
 8006232:	d03d      	beq.n	80062b0 <__pow5mult+0xa0>
 8006234:	69fc      	ldr	r4, [r7, #28]
 8006236:	b97c      	cbnz	r4, 8006258 <__pow5mult+0x48>
 8006238:	2010      	movs	r0, #16
 800623a:	f7ff fd81 	bl	8005d40 <malloc>
 800623e:	4602      	mov	r2, r0
 8006240:	61f8      	str	r0, [r7, #28]
 8006242:	b928      	cbnz	r0, 8006250 <__pow5mult+0x40>
 8006244:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006248:	4b1c      	ldr	r3, [pc, #112]	@ (80062bc <__pow5mult+0xac>)
 800624a:	481d      	ldr	r0, [pc, #116]	@ (80062c0 <__pow5mult+0xb0>)
 800624c:	f000 fbe6 	bl	8006a1c <__assert_func>
 8006250:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006254:	6004      	str	r4, [r0, #0]
 8006256:	60c4      	str	r4, [r0, #12]
 8006258:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800625c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006260:	b94c      	cbnz	r4, 8006276 <__pow5mult+0x66>
 8006262:	f240 2171 	movw	r1, #625	@ 0x271
 8006266:	4638      	mov	r0, r7
 8006268:	f7ff ff14 	bl	8006094 <__i2b>
 800626c:	2300      	movs	r3, #0
 800626e:	4604      	mov	r4, r0
 8006270:	f8c8 0008 	str.w	r0, [r8, #8]
 8006274:	6003      	str	r3, [r0, #0]
 8006276:	f04f 0900 	mov.w	r9, #0
 800627a:	07eb      	lsls	r3, r5, #31
 800627c:	d50a      	bpl.n	8006294 <__pow5mult+0x84>
 800627e:	4631      	mov	r1, r6
 8006280:	4622      	mov	r2, r4
 8006282:	4638      	mov	r0, r7
 8006284:	f7ff ff1c 	bl	80060c0 <__multiply>
 8006288:	4680      	mov	r8, r0
 800628a:	4631      	mov	r1, r6
 800628c:	4638      	mov	r0, r7
 800628e:	f7ff fe4d 	bl	8005f2c <_Bfree>
 8006292:	4646      	mov	r6, r8
 8006294:	106d      	asrs	r5, r5, #1
 8006296:	d00b      	beq.n	80062b0 <__pow5mult+0xa0>
 8006298:	6820      	ldr	r0, [r4, #0]
 800629a:	b938      	cbnz	r0, 80062ac <__pow5mult+0x9c>
 800629c:	4622      	mov	r2, r4
 800629e:	4621      	mov	r1, r4
 80062a0:	4638      	mov	r0, r7
 80062a2:	f7ff ff0d 	bl	80060c0 <__multiply>
 80062a6:	6020      	str	r0, [r4, #0]
 80062a8:	f8c0 9000 	str.w	r9, [r0]
 80062ac:	4604      	mov	r4, r0
 80062ae:	e7e4      	b.n	800627a <__pow5mult+0x6a>
 80062b0:	4630      	mov	r0, r6
 80062b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062b6:	bf00      	nop
 80062b8:	08008330 	.word	0x08008330
 80062bc:	08008257 	.word	0x08008257
 80062c0:	080082d7 	.word	0x080082d7

080062c4 <__lshift>:
 80062c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062c8:	460c      	mov	r4, r1
 80062ca:	4607      	mov	r7, r0
 80062cc:	4691      	mov	r9, r2
 80062ce:	6923      	ldr	r3, [r4, #16]
 80062d0:	6849      	ldr	r1, [r1, #4]
 80062d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80062d6:	68a3      	ldr	r3, [r4, #8]
 80062d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80062dc:	f108 0601 	add.w	r6, r8, #1
 80062e0:	42b3      	cmp	r3, r6
 80062e2:	db0b      	blt.n	80062fc <__lshift+0x38>
 80062e4:	4638      	mov	r0, r7
 80062e6:	f7ff fde1 	bl	8005eac <_Balloc>
 80062ea:	4605      	mov	r5, r0
 80062ec:	b948      	cbnz	r0, 8006302 <__lshift+0x3e>
 80062ee:	4602      	mov	r2, r0
 80062f0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80062f4:	4b27      	ldr	r3, [pc, #156]	@ (8006394 <__lshift+0xd0>)
 80062f6:	4828      	ldr	r0, [pc, #160]	@ (8006398 <__lshift+0xd4>)
 80062f8:	f000 fb90 	bl	8006a1c <__assert_func>
 80062fc:	3101      	adds	r1, #1
 80062fe:	005b      	lsls	r3, r3, #1
 8006300:	e7ee      	b.n	80062e0 <__lshift+0x1c>
 8006302:	2300      	movs	r3, #0
 8006304:	f100 0114 	add.w	r1, r0, #20
 8006308:	f100 0210 	add.w	r2, r0, #16
 800630c:	4618      	mov	r0, r3
 800630e:	4553      	cmp	r3, sl
 8006310:	db33      	blt.n	800637a <__lshift+0xb6>
 8006312:	6920      	ldr	r0, [r4, #16]
 8006314:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006318:	f104 0314 	add.w	r3, r4, #20
 800631c:	f019 091f 	ands.w	r9, r9, #31
 8006320:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006324:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006328:	d02b      	beq.n	8006382 <__lshift+0xbe>
 800632a:	468a      	mov	sl, r1
 800632c:	2200      	movs	r2, #0
 800632e:	f1c9 0e20 	rsb	lr, r9, #32
 8006332:	6818      	ldr	r0, [r3, #0]
 8006334:	fa00 f009 	lsl.w	r0, r0, r9
 8006338:	4310      	orrs	r0, r2
 800633a:	f84a 0b04 	str.w	r0, [sl], #4
 800633e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006342:	459c      	cmp	ip, r3
 8006344:	fa22 f20e 	lsr.w	r2, r2, lr
 8006348:	d8f3      	bhi.n	8006332 <__lshift+0x6e>
 800634a:	ebac 0304 	sub.w	r3, ip, r4
 800634e:	3b15      	subs	r3, #21
 8006350:	f023 0303 	bic.w	r3, r3, #3
 8006354:	3304      	adds	r3, #4
 8006356:	f104 0015 	add.w	r0, r4, #21
 800635a:	4584      	cmp	ip, r0
 800635c:	bf38      	it	cc
 800635e:	2304      	movcc	r3, #4
 8006360:	50ca      	str	r2, [r1, r3]
 8006362:	b10a      	cbz	r2, 8006368 <__lshift+0xa4>
 8006364:	f108 0602 	add.w	r6, r8, #2
 8006368:	3e01      	subs	r6, #1
 800636a:	4638      	mov	r0, r7
 800636c:	4621      	mov	r1, r4
 800636e:	612e      	str	r6, [r5, #16]
 8006370:	f7ff fddc 	bl	8005f2c <_Bfree>
 8006374:	4628      	mov	r0, r5
 8006376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800637a:	f842 0f04 	str.w	r0, [r2, #4]!
 800637e:	3301      	adds	r3, #1
 8006380:	e7c5      	b.n	800630e <__lshift+0x4a>
 8006382:	3904      	subs	r1, #4
 8006384:	f853 2b04 	ldr.w	r2, [r3], #4
 8006388:	459c      	cmp	ip, r3
 800638a:	f841 2f04 	str.w	r2, [r1, #4]!
 800638e:	d8f9      	bhi.n	8006384 <__lshift+0xc0>
 8006390:	e7ea      	b.n	8006368 <__lshift+0xa4>
 8006392:	bf00      	nop
 8006394:	080082c6 	.word	0x080082c6
 8006398:	080082d7 	.word	0x080082d7

0800639c <__mcmp>:
 800639c:	4603      	mov	r3, r0
 800639e:	690a      	ldr	r2, [r1, #16]
 80063a0:	6900      	ldr	r0, [r0, #16]
 80063a2:	b530      	push	{r4, r5, lr}
 80063a4:	1a80      	subs	r0, r0, r2
 80063a6:	d10e      	bne.n	80063c6 <__mcmp+0x2a>
 80063a8:	3314      	adds	r3, #20
 80063aa:	3114      	adds	r1, #20
 80063ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80063b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80063b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80063b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80063bc:	4295      	cmp	r5, r2
 80063be:	d003      	beq.n	80063c8 <__mcmp+0x2c>
 80063c0:	d205      	bcs.n	80063ce <__mcmp+0x32>
 80063c2:	f04f 30ff 	mov.w	r0, #4294967295
 80063c6:	bd30      	pop	{r4, r5, pc}
 80063c8:	42a3      	cmp	r3, r4
 80063ca:	d3f3      	bcc.n	80063b4 <__mcmp+0x18>
 80063cc:	e7fb      	b.n	80063c6 <__mcmp+0x2a>
 80063ce:	2001      	movs	r0, #1
 80063d0:	e7f9      	b.n	80063c6 <__mcmp+0x2a>
	...

080063d4 <__mdiff>:
 80063d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063d8:	4689      	mov	r9, r1
 80063da:	4606      	mov	r6, r0
 80063dc:	4611      	mov	r1, r2
 80063de:	4648      	mov	r0, r9
 80063e0:	4614      	mov	r4, r2
 80063e2:	f7ff ffdb 	bl	800639c <__mcmp>
 80063e6:	1e05      	subs	r5, r0, #0
 80063e8:	d112      	bne.n	8006410 <__mdiff+0x3c>
 80063ea:	4629      	mov	r1, r5
 80063ec:	4630      	mov	r0, r6
 80063ee:	f7ff fd5d 	bl	8005eac <_Balloc>
 80063f2:	4602      	mov	r2, r0
 80063f4:	b928      	cbnz	r0, 8006402 <__mdiff+0x2e>
 80063f6:	f240 2137 	movw	r1, #567	@ 0x237
 80063fa:	4b3e      	ldr	r3, [pc, #248]	@ (80064f4 <__mdiff+0x120>)
 80063fc:	483e      	ldr	r0, [pc, #248]	@ (80064f8 <__mdiff+0x124>)
 80063fe:	f000 fb0d 	bl	8006a1c <__assert_func>
 8006402:	2301      	movs	r3, #1
 8006404:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006408:	4610      	mov	r0, r2
 800640a:	b003      	add	sp, #12
 800640c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006410:	bfbc      	itt	lt
 8006412:	464b      	movlt	r3, r9
 8006414:	46a1      	movlt	r9, r4
 8006416:	4630      	mov	r0, r6
 8006418:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800641c:	bfba      	itte	lt
 800641e:	461c      	movlt	r4, r3
 8006420:	2501      	movlt	r5, #1
 8006422:	2500      	movge	r5, #0
 8006424:	f7ff fd42 	bl	8005eac <_Balloc>
 8006428:	4602      	mov	r2, r0
 800642a:	b918      	cbnz	r0, 8006434 <__mdiff+0x60>
 800642c:	f240 2145 	movw	r1, #581	@ 0x245
 8006430:	4b30      	ldr	r3, [pc, #192]	@ (80064f4 <__mdiff+0x120>)
 8006432:	e7e3      	b.n	80063fc <__mdiff+0x28>
 8006434:	f100 0b14 	add.w	fp, r0, #20
 8006438:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800643c:	f109 0310 	add.w	r3, r9, #16
 8006440:	60c5      	str	r5, [r0, #12]
 8006442:	f04f 0c00 	mov.w	ip, #0
 8006446:	f109 0514 	add.w	r5, r9, #20
 800644a:	46d9      	mov	r9, fp
 800644c:	6926      	ldr	r6, [r4, #16]
 800644e:	f104 0e14 	add.w	lr, r4, #20
 8006452:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006456:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800645a:	9301      	str	r3, [sp, #4]
 800645c:	9b01      	ldr	r3, [sp, #4]
 800645e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006462:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006466:	b281      	uxth	r1, r0
 8006468:	9301      	str	r3, [sp, #4]
 800646a:	fa1f f38a 	uxth.w	r3, sl
 800646e:	1a5b      	subs	r3, r3, r1
 8006470:	0c00      	lsrs	r0, r0, #16
 8006472:	4463      	add	r3, ip
 8006474:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006478:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800647c:	b29b      	uxth	r3, r3
 800647e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006482:	4576      	cmp	r6, lr
 8006484:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006488:	f849 3b04 	str.w	r3, [r9], #4
 800648c:	d8e6      	bhi.n	800645c <__mdiff+0x88>
 800648e:	1b33      	subs	r3, r6, r4
 8006490:	3b15      	subs	r3, #21
 8006492:	f023 0303 	bic.w	r3, r3, #3
 8006496:	3415      	adds	r4, #21
 8006498:	3304      	adds	r3, #4
 800649a:	42a6      	cmp	r6, r4
 800649c:	bf38      	it	cc
 800649e:	2304      	movcc	r3, #4
 80064a0:	441d      	add	r5, r3
 80064a2:	445b      	add	r3, fp
 80064a4:	461e      	mov	r6, r3
 80064a6:	462c      	mov	r4, r5
 80064a8:	4544      	cmp	r4, r8
 80064aa:	d30e      	bcc.n	80064ca <__mdiff+0xf6>
 80064ac:	f108 0103 	add.w	r1, r8, #3
 80064b0:	1b49      	subs	r1, r1, r5
 80064b2:	f021 0103 	bic.w	r1, r1, #3
 80064b6:	3d03      	subs	r5, #3
 80064b8:	45a8      	cmp	r8, r5
 80064ba:	bf38      	it	cc
 80064bc:	2100      	movcc	r1, #0
 80064be:	440b      	add	r3, r1
 80064c0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80064c4:	b199      	cbz	r1, 80064ee <__mdiff+0x11a>
 80064c6:	6117      	str	r7, [r2, #16]
 80064c8:	e79e      	b.n	8006408 <__mdiff+0x34>
 80064ca:	46e6      	mov	lr, ip
 80064cc:	f854 1b04 	ldr.w	r1, [r4], #4
 80064d0:	fa1f fc81 	uxth.w	ip, r1
 80064d4:	44f4      	add	ip, lr
 80064d6:	0c08      	lsrs	r0, r1, #16
 80064d8:	4471      	add	r1, lr
 80064da:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80064de:	b289      	uxth	r1, r1
 80064e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80064e4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80064e8:	f846 1b04 	str.w	r1, [r6], #4
 80064ec:	e7dc      	b.n	80064a8 <__mdiff+0xd4>
 80064ee:	3f01      	subs	r7, #1
 80064f0:	e7e6      	b.n	80064c0 <__mdiff+0xec>
 80064f2:	bf00      	nop
 80064f4:	080082c6 	.word	0x080082c6
 80064f8:	080082d7 	.word	0x080082d7

080064fc <__d2b>:
 80064fc:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006500:	2101      	movs	r1, #1
 8006502:	4690      	mov	r8, r2
 8006504:	4699      	mov	r9, r3
 8006506:	9e08      	ldr	r6, [sp, #32]
 8006508:	f7ff fcd0 	bl	8005eac <_Balloc>
 800650c:	4604      	mov	r4, r0
 800650e:	b930      	cbnz	r0, 800651e <__d2b+0x22>
 8006510:	4602      	mov	r2, r0
 8006512:	f240 310f 	movw	r1, #783	@ 0x30f
 8006516:	4b23      	ldr	r3, [pc, #140]	@ (80065a4 <__d2b+0xa8>)
 8006518:	4823      	ldr	r0, [pc, #140]	@ (80065a8 <__d2b+0xac>)
 800651a:	f000 fa7f 	bl	8006a1c <__assert_func>
 800651e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006522:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006526:	b10d      	cbz	r5, 800652c <__d2b+0x30>
 8006528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800652c:	9301      	str	r3, [sp, #4]
 800652e:	f1b8 0300 	subs.w	r3, r8, #0
 8006532:	d024      	beq.n	800657e <__d2b+0x82>
 8006534:	4668      	mov	r0, sp
 8006536:	9300      	str	r3, [sp, #0]
 8006538:	f7ff fd7f 	bl	800603a <__lo0bits>
 800653c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006540:	b1d8      	cbz	r0, 800657a <__d2b+0x7e>
 8006542:	f1c0 0320 	rsb	r3, r0, #32
 8006546:	fa02 f303 	lsl.w	r3, r2, r3
 800654a:	430b      	orrs	r3, r1
 800654c:	40c2      	lsrs	r2, r0
 800654e:	6163      	str	r3, [r4, #20]
 8006550:	9201      	str	r2, [sp, #4]
 8006552:	9b01      	ldr	r3, [sp, #4]
 8006554:	2b00      	cmp	r3, #0
 8006556:	bf0c      	ite	eq
 8006558:	2201      	moveq	r2, #1
 800655a:	2202      	movne	r2, #2
 800655c:	61a3      	str	r3, [r4, #24]
 800655e:	6122      	str	r2, [r4, #16]
 8006560:	b1ad      	cbz	r5, 800658e <__d2b+0x92>
 8006562:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006566:	4405      	add	r5, r0
 8006568:	6035      	str	r5, [r6, #0]
 800656a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800656e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006570:	6018      	str	r0, [r3, #0]
 8006572:	4620      	mov	r0, r4
 8006574:	b002      	add	sp, #8
 8006576:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800657a:	6161      	str	r1, [r4, #20]
 800657c:	e7e9      	b.n	8006552 <__d2b+0x56>
 800657e:	a801      	add	r0, sp, #4
 8006580:	f7ff fd5b 	bl	800603a <__lo0bits>
 8006584:	9b01      	ldr	r3, [sp, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	6163      	str	r3, [r4, #20]
 800658a:	3020      	adds	r0, #32
 800658c:	e7e7      	b.n	800655e <__d2b+0x62>
 800658e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006592:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006596:	6030      	str	r0, [r6, #0]
 8006598:	6918      	ldr	r0, [r3, #16]
 800659a:	f7ff fd2f 	bl	8005ffc <__hi0bits>
 800659e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80065a2:	e7e4      	b.n	800656e <__d2b+0x72>
 80065a4:	080082c6 	.word	0x080082c6
 80065a8:	080082d7 	.word	0x080082d7

080065ac <__ssputs_r>:
 80065ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065b0:	461f      	mov	r7, r3
 80065b2:	688e      	ldr	r6, [r1, #8]
 80065b4:	4682      	mov	sl, r0
 80065b6:	42be      	cmp	r6, r7
 80065b8:	460c      	mov	r4, r1
 80065ba:	4690      	mov	r8, r2
 80065bc:	680b      	ldr	r3, [r1, #0]
 80065be:	d82d      	bhi.n	800661c <__ssputs_r+0x70>
 80065c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80065c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80065c8:	d026      	beq.n	8006618 <__ssputs_r+0x6c>
 80065ca:	6965      	ldr	r5, [r4, #20]
 80065cc:	6909      	ldr	r1, [r1, #16]
 80065ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80065d2:	eba3 0901 	sub.w	r9, r3, r1
 80065d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80065da:	1c7b      	adds	r3, r7, #1
 80065dc:	444b      	add	r3, r9
 80065de:	106d      	asrs	r5, r5, #1
 80065e0:	429d      	cmp	r5, r3
 80065e2:	bf38      	it	cc
 80065e4:	461d      	movcc	r5, r3
 80065e6:	0553      	lsls	r3, r2, #21
 80065e8:	d527      	bpl.n	800663a <__ssputs_r+0x8e>
 80065ea:	4629      	mov	r1, r5
 80065ec:	f7ff fbd2 	bl	8005d94 <_malloc_r>
 80065f0:	4606      	mov	r6, r0
 80065f2:	b360      	cbz	r0, 800664e <__ssputs_r+0xa2>
 80065f4:	464a      	mov	r2, r9
 80065f6:	6921      	ldr	r1, [r4, #16]
 80065f8:	f000 fa02 	bl	8006a00 <memcpy>
 80065fc:	89a3      	ldrh	r3, [r4, #12]
 80065fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006602:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006606:	81a3      	strh	r3, [r4, #12]
 8006608:	6126      	str	r6, [r4, #16]
 800660a:	444e      	add	r6, r9
 800660c:	6026      	str	r6, [r4, #0]
 800660e:	463e      	mov	r6, r7
 8006610:	6165      	str	r5, [r4, #20]
 8006612:	eba5 0509 	sub.w	r5, r5, r9
 8006616:	60a5      	str	r5, [r4, #8]
 8006618:	42be      	cmp	r6, r7
 800661a:	d900      	bls.n	800661e <__ssputs_r+0x72>
 800661c:	463e      	mov	r6, r7
 800661e:	4632      	mov	r2, r6
 8006620:	4641      	mov	r1, r8
 8006622:	6820      	ldr	r0, [r4, #0]
 8006624:	f000 f9c2 	bl	80069ac <memmove>
 8006628:	2000      	movs	r0, #0
 800662a:	68a3      	ldr	r3, [r4, #8]
 800662c:	1b9b      	subs	r3, r3, r6
 800662e:	60a3      	str	r3, [r4, #8]
 8006630:	6823      	ldr	r3, [r4, #0]
 8006632:	4433      	add	r3, r6
 8006634:	6023      	str	r3, [r4, #0]
 8006636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800663a:	462a      	mov	r2, r5
 800663c:	f000 fa32 	bl	8006aa4 <_realloc_r>
 8006640:	4606      	mov	r6, r0
 8006642:	2800      	cmp	r0, #0
 8006644:	d1e0      	bne.n	8006608 <__ssputs_r+0x5c>
 8006646:	4650      	mov	r0, sl
 8006648:	6921      	ldr	r1, [r4, #16]
 800664a:	f7ff fb31 	bl	8005cb0 <_free_r>
 800664e:	230c      	movs	r3, #12
 8006650:	f8ca 3000 	str.w	r3, [sl]
 8006654:	89a3      	ldrh	r3, [r4, #12]
 8006656:	f04f 30ff 	mov.w	r0, #4294967295
 800665a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800665e:	81a3      	strh	r3, [r4, #12]
 8006660:	e7e9      	b.n	8006636 <__ssputs_r+0x8a>
	...

08006664 <_svfiprintf_r>:
 8006664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006668:	4698      	mov	r8, r3
 800666a:	898b      	ldrh	r3, [r1, #12]
 800666c:	4607      	mov	r7, r0
 800666e:	061b      	lsls	r3, r3, #24
 8006670:	460d      	mov	r5, r1
 8006672:	4614      	mov	r4, r2
 8006674:	b09d      	sub	sp, #116	@ 0x74
 8006676:	d510      	bpl.n	800669a <_svfiprintf_r+0x36>
 8006678:	690b      	ldr	r3, [r1, #16]
 800667a:	b973      	cbnz	r3, 800669a <_svfiprintf_r+0x36>
 800667c:	2140      	movs	r1, #64	@ 0x40
 800667e:	f7ff fb89 	bl	8005d94 <_malloc_r>
 8006682:	6028      	str	r0, [r5, #0]
 8006684:	6128      	str	r0, [r5, #16]
 8006686:	b930      	cbnz	r0, 8006696 <_svfiprintf_r+0x32>
 8006688:	230c      	movs	r3, #12
 800668a:	603b      	str	r3, [r7, #0]
 800668c:	f04f 30ff 	mov.w	r0, #4294967295
 8006690:	b01d      	add	sp, #116	@ 0x74
 8006692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006696:	2340      	movs	r3, #64	@ 0x40
 8006698:	616b      	str	r3, [r5, #20]
 800669a:	2300      	movs	r3, #0
 800669c:	9309      	str	r3, [sp, #36]	@ 0x24
 800669e:	2320      	movs	r3, #32
 80066a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80066a4:	2330      	movs	r3, #48	@ 0x30
 80066a6:	f04f 0901 	mov.w	r9, #1
 80066aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80066ae:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006848 <_svfiprintf_r+0x1e4>
 80066b2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80066b6:	4623      	mov	r3, r4
 80066b8:	469a      	mov	sl, r3
 80066ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066be:	b10a      	cbz	r2, 80066c4 <_svfiprintf_r+0x60>
 80066c0:	2a25      	cmp	r2, #37	@ 0x25
 80066c2:	d1f9      	bne.n	80066b8 <_svfiprintf_r+0x54>
 80066c4:	ebba 0b04 	subs.w	fp, sl, r4
 80066c8:	d00b      	beq.n	80066e2 <_svfiprintf_r+0x7e>
 80066ca:	465b      	mov	r3, fp
 80066cc:	4622      	mov	r2, r4
 80066ce:	4629      	mov	r1, r5
 80066d0:	4638      	mov	r0, r7
 80066d2:	f7ff ff6b 	bl	80065ac <__ssputs_r>
 80066d6:	3001      	adds	r0, #1
 80066d8:	f000 80a7 	beq.w	800682a <_svfiprintf_r+0x1c6>
 80066dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80066de:	445a      	add	r2, fp
 80066e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80066e2:	f89a 3000 	ldrb.w	r3, [sl]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	f000 809f 	beq.w	800682a <_svfiprintf_r+0x1c6>
 80066ec:	2300      	movs	r3, #0
 80066ee:	f04f 32ff 	mov.w	r2, #4294967295
 80066f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066f6:	f10a 0a01 	add.w	sl, sl, #1
 80066fa:	9304      	str	r3, [sp, #16]
 80066fc:	9307      	str	r3, [sp, #28]
 80066fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006702:	931a      	str	r3, [sp, #104]	@ 0x68
 8006704:	4654      	mov	r4, sl
 8006706:	2205      	movs	r2, #5
 8006708:	f814 1b01 	ldrb.w	r1, [r4], #1
 800670c:	484e      	ldr	r0, [pc, #312]	@ (8006848 <_svfiprintf_r+0x1e4>)
 800670e:	f7fe fc6e 	bl	8004fee <memchr>
 8006712:	9a04      	ldr	r2, [sp, #16]
 8006714:	b9d8      	cbnz	r0, 800674e <_svfiprintf_r+0xea>
 8006716:	06d0      	lsls	r0, r2, #27
 8006718:	bf44      	itt	mi
 800671a:	2320      	movmi	r3, #32
 800671c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006720:	0711      	lsls	r1, r2, #28
 8006722:	bf44      	itt	mi
 8006724:	232b      	movmi	r3, #43	@ 0x2b
 8006726:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800672a:	f89a 3000 	ldrb.w	r3, [sl]
 800672e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006730:	d015      	beq.n	800675e <_svfiprintf_r+0xfa>
 8006732:	4654      	mov	r4, sl
 8006734:	2000      	movs	r0, #0
 8006736:	f04f 0c0a 	mov.w	ip, #10
 800673a:	9a07      	ldr	r2, [sp, #28]
 800673c:	4621      	mov	r1, r4
 800673e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006742:	3b30      	subs	r3, #48	@ 0x30
 8006744:	2b09      	cmp	r3, #9
 8006746:	d94b      	bls.n	80067e0 <_svfiprintf_r+0x17c>
 8006748:	b1b0      	cbz	r0, 8006778 <_svfiprintf_r+0x114>
 800674a:	9207      	str	r2, [sp, #28]
 800674c:	e014      	b.n	8006778 <_svfiprintf_r+0x114>
 800674e:	eba0 0308 	sub.w	r3, r0, r8
 8006752:	fa09 f303 	lsl.w	r3, r9, r3
 8006756:	4313      	orrs	r3, r2
 8006758:	46a2      	mov	sl, r4
 800675a:	9304      	str	r3, [sp, #16]
 800675c:	e7d2      	b.n	8006704 <_svfiprintf_r+0xa0>
 800675e:	9b03      	ldr	r3, [sp, #12]
 8006760:	1d19      	adds	r1, r3, #4
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	9103      	str	r1, [sp, #12]
 8006766:	2b00      	cmp	r3, #0
 8006768:	bfbb      	ittet	lt
 800676a:	425b      	neglt	r3, r3
 800676c:	f042 0202 	orrlt.w	r2, r2, #2
 8006770:	9307      	strge	r3, [sp, #28]
 8006772:	9307      	strlt	r3, [sp, #28]
 8006774:	bfb8      	it	lt
 8006776:	9204      	strlt	r2, [sp, #16]
 8006778:	7823      	ldrb	r3, [r4, #0]
 800677a:	2b2e      	cmp	r3, #46	@ 0x2e
 800677c:	d10a      	bne.n	8006794 <_svfiprintf_r+0x130>
 800677e:	7863      	ldrb	r3, [r4, #1]
 8006780:	2b2a      	cmp	r3, #42	@ 0x2a
 8006782:	d132      	bne.n	80067ea <_svfiprintf_r+0x186>
 8006784:	9b03      	ldr	r3, [sp, #12]
 8006786:	3402      	adds	r4, #2
 8006788:	1d1a      	adds	r2, r3, #4
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	9203      	str	r2, [sp, #12]
 800678e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006792:	9305      	str	r3, [sp, #20]
 8006794:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800684c <_svfiprintf_r+0x1e8>
 8006798:	2203      	movs	r2, #3
 800679a:	4650      	mov	r0, sl
 800679c:	7821      	ldrb	r1, [r4, #0]
 800679e:	f7fe fc26 	bl	8004fee <memchr>
 80067a2:	b138      	cbz	r0, 80067b4 <_svfiprintf_r+0x150>
 80067a4:	2240      	movs	r2, #64	@ 0x40
 80067a6:	9b04      	ldr	r3, [sp, #16]
 80067a8:	eba0 000a 	sub.w	r0, r0, sl
 80067ac:	4082      	lsls	r2, r0
 80067ae:	4313      	orrs	r3, r2
 80067b0:	3401      	adds	r4, #1
 80067b2:	9304      	str	r3, [sp, #16]
 80067b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067b8:	2206      	movs	r2, #6
 80067ba:	4825      	ldr	r0, [pc, #148]	@ (8006850 <_svfiprintf_r+0x1ec>)
 80067bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80067c0:	f7fe fc15 	bl	8004fee <memchr>
 80067c4:	2800      	cmp	r0, #0
 80067c6:	d036      	beq.n	8006836 <_svfiprintf_r+0x1d2>
 80067c8:	4b22      	ldr	r3, [pc, #136]	@ (8006854 <_svfiprintf_r+0x1f0>)
 80067ca:	bb1b      	cbnz	r3, 8006814 <_svfiprintf_r+0x1b0>
 80067cc:	9b03      	ldr	r3, [sp, #12]
 80067ce:	3307      	adds	r3, #7
 80067d0:	f023 0307 	bic.w	r3, r3, #7
 80067d4:	3308      	adds	r3, #8
 80067d6:	9303      	str	r3, [sp, #12]
 80067d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067da:	4433      	add	r3, r6
 80067dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80067de:	e76a      	b.n	80066b6 <_svfiprintf_r+0x52>
 80067e0:	460c      	mov	r4, r1
 80067e2:	2001      	movs	r0, #1
 80067e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80067e8:	e7a8      	b.n	800673c <_svfiprintf_r+0xd8>
 80067ea:	2300      	movs	r3, #0
 80067ec:	f04f 0c0a 	mov.w	ip, #10
 80067f0:	4619      	mov	r1, r3
 80067f2:	3401      	adds	r4, #1
 80067f4:	9305      	str	r3, [sp, #20]
 80067f6:	4620      	mov	r0, r4
 80067f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067fc:	3a30      	subs	r2, #48	@ 0x30
 80067fe:	2a09      	cmp	r2, #9
 8006800:	d903      	bls.n	800680a <_svfiprintf_r+0x1a6>
 8006802:	2b00      	cmp	r3, #0
 8006804:	d0c6      	beq.n	8006794 <_svfiprintf_r+0x130>
 8006806:	9105      	str	r1, [sp, #20]
 8006808:	e7c4      	b.n	8006794 <_svfiprintf_r+0x130>
 800680a:	4604      	mov	r4, r0
 800680c:	2301      	movs	r3, #1
 800680e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006812:	e7f0      	b.n	80067f6 <_svfiprintf_r+0x192>
 8006814:	ab03      	add	r3, sp, #12
 8006816:	9300      	str	r3, [sp, #0]
 8006818:	462a      	mov	r2, r5
 800681a:	4638      	mov	r0, r7
 800681c:	4b0e      	ldr	r3, [pc, #56]	@ (8006858 <_svfiprintf_r+0x1f4>)
 800681e:	a904      	add	r1, sp, #16
 8006820:	f7fd fe82 	bl	8004528 <_printf_float>
 8006824:	1c42      	adds	r2, r0, #1
 8006826:	4606      	mov	r6, r0
 8006828:	d1d6      	bne.n	80067d8 <_svfiprintf_r+0x174>
 800682a:	89ab      	ldrh	r3, [r5, #12]
 800682c:	065b      	lsls	r3, r3, #25
 800682e:	f53f af2d 	bmi.w	800668c <_svfiprintf_r+0x28>
 8006832:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006834:	e72c      	b.n	8006690 <_svfiprintf_r+0x2c>
 8006836:	ab03      	add	r3, sp, #12
 8006838:	9300      	str	r3, [sp, #0]
 800683a:	462a      	mov	r2, r5
 800683c:	4638      	mov	r0, r7
 800683e:	4b06      	ldr	r3, [pc, #24]	@ (8006858 <_svfiprintf_r+0x1f4>)
 8006840:	a904      	add	r1, sp, #16
 8006842:	f7fe f90f 	bl	8004a64 <_printf_i>
 8006846:	e7ed      	b.n	8006824 <_svfiprintf_r+0x1c0>
 8006848:	08008430 	.word	0x08008430
 800684c:	08008436 	.word	0x08008436
 8006850:	0800843a 	.word	0x0800843a
 8006854:	08004529 	.word	0x08004529
 8006858:	080065ad 	.word	0x080065ad

0800685c <__sflush_r>:
 800685c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006862:	0716      	lsls	r6, r2, #28
 8006864:	4605      	mov	r5, r0
 8006866:	460c      	mov	r4, r1
 8006868:	d454      	bmi.n	8006914 <__sflush_r+0xb8>
 800686a:	684b      	ldr	r3, [r1, #4]
 800686c:	2b00      	cmp	r3, #0
 800686e:	dc02      	bgt.n	8006876 <__sflush_r+0x1a>
 8006870:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006872:	2b00      	cmp	r3, #0
 8006874:	dd48      	ble.n	8006908 <__sflush_r+0xac>
 8006876:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006878:	2e00      	cmp	r6, #0
 800687a:	d045      	beq.n	8006908 <__sflush_r+0xac>
 800687c:	2300      	movs	r3, #0
 800687e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006882:	682f      	ldr	r7, [r5, #0]
 8006884:	6a21      	ldr	r1, [r4, #32]
 8006886:	602b      	str	r3, [r5, #0]
 8006888:	d030      	beq.n	80068ec <__sflush_r+0x90>
 800688a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800688c:	89a3      	ldrh	r3, [r4, #12]
 800688e:	0759      	lsls	r1, r3, #29
 8006890:	d505      	bpl.n	800689e <__sflush_r+0x42>
 8006892:	6863      	ldr	r3, [r4, #4]
 8006894:	1ad2      	subs	r2, r2, r3
 8006896:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006898:	b10b      	cbz	r3, 800689e <__sflush_r+0x42>
 800689a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800689c:	1ad2      	subs	r2, r2, r3
 800689e:	2300      	movs	r3, #0
 80068a0:	4628      	mov	r0, r5
 80068a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80068a4:	6a21      	ldr	r1, [r4, #32]
 80068a6:	47b0      	blx	r6
 80068a8:	1c43      	adds	r3, r0, #1
 80068aa:	89a3      	ldrh	r3, [r4, #12]
 80068ac:	d106      	bne.n	80068bc <__sflush_r+0x60>
 80068ae:	6829      	ldr	r1, [r5, #0]
 80068b0:	291d      	cmp	r1, #29
 80068b2:	d82b      	bhi.n	800690c <__sflush_r+0xb0>
 80068b4:	4a28      	ldr	r2, [pc, #160]	@ (8006958 <__sflush_r+0xfc>)
 80068b6:	410a      	asrs	r2, r1
 80068b8:	07d6      	lsls	r6, r2, #31
 80068ba:	d427      	bmi.n	800690c <__sflush_r+0xb0>
 80068bc:	2200      	movs	r2, #0
 80068be:	6062      	str	r2, [r4, #4]
 80068c0:	6922      	ldr	r2, [r4, #16]
 80068c2:	04d9      	lsls	r1, r3, #19
 80068c4:	6022      	str	r2, [r4, #0]
 80068c6:	d504      	bpl.n	80068d2 <__sflush_r+0x76>
 80068c8:	1c42      	adds	r2, r0, #1
 80068ca:	d101      	bne.n	80068d0 <__sflush_r+0x74>
 80068cc:	682b      	ldr	r3, [r5, #0]
 80068ce:	b903      	cbnz	r3, 80068d2 <__sflush_r+0x76>
 80068d0:	6560      	str	r0, [r4, #84]	@ 0x54
 80068d2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80068d4:	602f      	str	r7, [r5, #0]
 80068d6:	b1b9      	cbz	r1, 8006908 <__sflush_r+0xac>
 80068d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80068dc:	4299      	cmp	r1, r3
 80068de:	d002      	beq.n	80068e6 <__sflush_r+0x8a>
 80068e0:	4628      	mov	r0, r5
 80068e2:	f7ff f9e5 	bl	8005cb0 <_free_r>
 80068e6:	2300      	movs	r3, #0
 80068e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80068ea:	e00d      	b.n	8006908 <__sflush_r+0xac>
 80068ec:	2301      	movs	r3, #1
 80068ee:	4628      	mov	r0, r5
 80068f0:	47b0      	blx	r6
 80068f2:	4602      	mov	r2, r0
 80068f4:	1c50      	adds	r0, r2, #1
 80068f6:	d1c9      	bne.n	800688c <__sflush_r+0x30>
 80068f8:	682b      	ldr	r3, [r5, #0]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d0c6      	beq.n	800688c <__sflush_r+0x30>
 80068fe:	2b1d      	cmp	r3, #29
 8006900:	d001      	beq.n	8006906 <__sflush_r+0xaa>
 8006902:	2b16      	cmp	r3, #22
 8006904:	d11d      	bne.n	8006942 <__sflush_r+0xe6>
 8006906:	602f      	str	r7, [r5, #0]
 8006908:	2000      	movs	r0, #0
 800690a:	e021      	b.n	8006950 <__sflush_r+0xf4>
 800690c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006910:	b21b      	sxth	r3, r3
 8006912:	e01a      	b.n	800694a <__sflush_r+0xee>
 8006914:	690f      	ldr	r7, [r1, #16]
 8006916:	2f00      	cmp	r7, #0
 8006918:	d0f6      	beq.n	8006908 <__sflush_r+0xac>
 800691a:	0793      	lsls	r3, r2, #30
 800691c:	bf18      	it	ne
 800691e:	2300      	movne	r3, #0
 8006920:	680e      	ldr	r6, [r1, #0]
 8006922:	bf08      	it	eq
 8006924:	694b      	ldreq	r3, [r1, #20]
 8006926:	1bf6      	subs	r6, r6, r7
 8006928:	600f      	str	r7, [r1, #0]
 800692a:	608b      	str	r3, [r1, #8]
 800692c:	2e00      	cmp	r6, #0
 800692e:	ddeb      	ble.n	8006908 <__sflush_r+0xac>
 8006930:	4633      	mov	r3, r6
 8006932:	463a      	mov	r2, r7
 8006934:	4628      	mov	r0, r5
 8006936:	6a21      	ldr	r1, [r4, #32]
 8006938:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800693c:	47e0      	blx	ip
 800693e:	2800      	cmp	r0, #0
 8006940:	dc07      	bgt.n	8006952 <__sflush_r+0xf6>
 8006942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006946:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800694a:	f04f 30ff 	mov.w	r0, #4294967295
 800694e:	81a3      	strh	r3, [r4, #12]
 8006950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006952:	4407      	add	r7, r0
 8006954:	1a36      	subs	r6, r6, r0
 8006956:	e7e9      	b.n	800692c <__sflush_r+0xd0>
 8006958:	dfbffffe 	.word	0xdfbffffe

0800695c <_fflush_r>:
 800695c:	b538      	push	{r3, r4, r5, lr}
 800695e:	690b      	ldr	r3, [r1, #16]
 8006960:	4605      	mov	r5, r0
 8006962:	460c      	mov	r4, r1
 8006964:	b913      	cbnz	r3, 800696c <_fflush_r+0x10>
 8006966:	2500      	movs	r5, #0
 8006968:	4628      	mov	r0, r5
 800696a:	bd38      	pop	{r3, r4, r5, pc}
 800696c:	b118      	cbz	r0, 8006976 <_fflush_r+0x1a>
 800696e:	6a03      	ldr	r3, [r0, #32]
 8006970:	b90b      	cbnz	r3, 8006976 <_fflush_r+0x1a>
 8006972:	f7fe fa23 	bl	8004dbc <__sinit>
 8006976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d0f3      	beq.n	8006966 <_fflush_r+0xa>
 800697e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006980:	07d0      	lsls	r0, r2, #31
 8006982:	d404      	bmi.n	800698e <_fflush_r+0x32>
 8006984:	0599      	lsls	r1, r3, #22
 8006986:	d402      	bmi.n	800698e <_fflush_r+0x32>
 8006988:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800698a:	f7fe fb2e 	bl	8004fea <__retarget_lock_acquire_recursive>
 800698e:	4628      	mov	r0, r5
 8006990:	4621      	mov	r1, r4
 8006992:	f7ff ff63 	bl	800685c <__sflush_r>
 8006996:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006998:	4605      	mov	r5, r0
 800699a:	07da      	lsls	r2, r3, #31
 800699c:	d4e4      	bmi.n	8006968 <_fflush_r+0xc>
 800699e:	89a3      	ldrh	r3, [r4, #12]
 80069a0:	059b      	lsls	r3, r3, #22
 80069a2:	d4e1      	bmi.n	8006968 <_fflush_r+0xc>
 80069a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80069a6:	f7fe fb21 	bl	8004fec <__retarget_lock_release_recursive>
 80069aa:	e7dd      	b.n	8006968 <_fflush_r+0xc>

080069ac <memmove>:
 80069ac:	4288      	cmp	r0, r1
 80069ae:	b510      	push	{r4, lr}
 80069b0:	eb01 0402 	add.w	r4, r1, r2
 80069b4:	d902      	bls.n	80069bc <memmove+0x10>
 80069b6:	4284      	cmp	r4, r0
 80069b8:	4623      	mov	r3, r4
 80069ba:	d807      	bhi.n	80069cc <memmove+0x20>
 80069bc:	1e43      	subs	r3, r0, #1
 80069be:	42a1      	cmp	r1, r4
 80069c0:	d008      	beq.n	80069d4 <memmove+0x28>
 80069c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80069ca:	e7f8      	b.n	80069be <memmove+0x12>
 80069cc:	4601      	mov	r1, r0
 80069ce:	4402      	add	r2, r0
 80069d0:	428a      	cmp	r2, r1
 80069d2:	d100      	bne.n	80069d6 <memmove+0x2a>
 80069d4:	bd10      	pop	{r4, pc}
 80069d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80069da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80069de:	e7f7      	b.n	80069d0 <memmove+0x24>

080069e0 <_sbrk_r>:
 80069e0:	b538      	push	{r3, r4, r5, lr}
 80069e2:	2300      	movs	r3, #0
 80069e4:	4d05      	ldr	r5, [pc, #20]	@ (80069fc <_sbrk_r+0x1c>)
 80069e6:	4604      	mov	r4, r0
 80069e8:	4608      	mov	r0, r1
 80069ea:	602b      	str	r3, [r5, #0]
 80069ec:	f7fb fb62 	bl	80020b4 <_sbrk>
 80069f0:	1c43      	adds	r3, r0, #1
 80069f2:	d102      	bne.n	80069fa <_sbrk_r+0x1a>
 80069f4:	682b      	ldr	r3, [r5, #0]
 80069f6:	b103      	cbz	r3, 80069fa <_sbrk_r+0x1a>
 80069f8:	6023      	str	r3, [r4, #0]
 80069fa:	bd38      	pop	{r3, r4, r5, pc}
 80069fc:	200007fc 	.word	0x200007fc

08006a00 <memcpy>:
 8006a00:	440a      	add	r2, r1
 8006a02:	4291      	cmp	r1, r2
 8006a04:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a08:	d100      	bne.n	8006a0c <memcpy+0xc>
 8006a0a:	4770      	bx	lr
 8006a0c:	b510      	push	{r4, lr}
 8006a0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a12:	4291      	cmp	r1, r2
 8006a14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a18:	d1f9      	bne.n	8006a0e <memcpy+0xe>
 8006a1a:	bd10      	pop	{r4, pc}

08006a1c <__assert_func>:
 8006a1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006a1e:	4614      	mov	r4, r2
 8006a20:	461a      	mov	r2, r3
 8006a22:	4b09      	ldr	r3, [pc, #36]	@ (8006a48 <__assert_func+0x2c>)
 8006a24:	4605      	mov	r5, r0
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68d8      	ldr	r0, [r3, #12]
 8006a2a:	b954      	cbnz	r4, 8006a42 <__assert_func+0x26>
 8006a2c:	4b07      	ldr	r3, [pc, #28]	@ (8006a4c <__assert_func+0x30>)
 8006a2e:	461c      	mov	r4, r3
 8006a30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006a34:	9100      	str	r1, [sp, #0]
 8006a36:	462b      	mov	r3, r5
 8006a38:	4905      	ldr	r1, [pc, #20]	@ (8006a50 <__assert_func+0x34>)
 8006a3a:	f000 f86f 	bl	8006b1c <fiprintf>
 8006a3e:	f000 f87f 	bl	8006b40 <abort>
 8006a42:	4b04      	ldr	r3, [pc, #16]	@ (8006a54 <__assert_func+0x38>)
 8006a44:	e7f4      	b.n	8006a30 <__assert_func+0x14>
 8006a46:	bf00      	nop
 8006a48:	20000018 	.word	0x20000018
 8006a4c:	08008486 	.word	0x08008486
 8006a50:	08008458 	.word	0x08008458
 8006a54:	0800844b 	.word	0x0800844b

08006a58 <_calloc_r>:
 8006a58:	b570      	push	{r4, r5, r6, lr}
 8006a5a:	fba1 5402 	umull	r5, r4, r1, r2
 8006a5e:	b93c      	cbnz	r4, 8006a70 <_calloc_r+0x18>
 8006a60:	4629      	mov	r1, r5
 8006a62:	f7ff f997 	bl	8005d94 <_malloc_r>
 8006a66:	4606      	mov	r6, r0
 8006a68:	b928      	cbnz	r0, 8006a76 <_calloc_r+0x1e>
 8006a6a:	2600      	movs	r6, #0
 8006a6c:	4630      	mov	r0, r6
 8006a6e:	bd70      	pop	{r4, r5, r6, pc}
 8006a70:	220c      	movs	r2, #12
 8006a72:	6002      	str	r2, [r0, #0]
 8006a74:	e7f9      	b.n	8006a6a <_calloc_r+0x12>
 8006a76:	462a      	mov	r2, r5
 8006a78:	4621      	mov	r1, r4
 8006a7a:	f7fe fa38 	bl	8004eee <memset>
 8006a7e:	e7f5      	b.n	8006a6c <_calloc_r+0x14>

08006a80 <__ascii_mbtowc>:
 8006a80:	b082      	sub	sp, #8
 8006a82:	b901      	cbnz	r1, 8006a86 <__ascii_mbtowc+0x6>
 8006a84:	a901      	add	r1, sp, #4
 8006a86:	b142      	cbz	r2, 8006a9a <__ascii_mbtowc+0x1a>
 8006a88:	b14b      	cbz	r3, 8006a9e <__ascii_mbtowc+0x1e>
 8006a8a:	7813      	ldrb	r3, [r2, #0]
 8006a8c:	600b      	str	r3, [r1, #0]
 8006a8e:	7812      	ldrb	r2, [r2, #0]
 8006a90:	1e10      	subs	r0, r2, #0
 8006a92:	bf18      	it	ne
 8006a94:	2001      	movne	r0, #1
 8006a96:	b002      	add	sp, #8
 8006a98:	4770      	bx	lr
 8006a9a:	4610      	mov	r0, r2
 8006a9c:	e7fb      	b.n	8006a96 <__ascii_mbtowc+0x16>
 8006a9e:	f06f 0001 	mvn.w	r0, #1
 8006aa2:	e7f8      	b.n	8006a96 <__ascii_mbtowc+0x16>

08006aa4 <_realloc_r>:
 8006aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006aa8:	4680      	mov	r8, r0
 8006aaa:	4615      	mov	r5, r2
 8006aac:	460c      	mov	r4, r1
 8006aae:	b921      	cbnz	r1, 8006aba <_realloc_r+0x16>
 8006ab0:	4611      	mov	r1, r2
 8006ab2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ab6:	f7ff b96d 	b.w	8005d94 <_malloc_r>
 8006aba:	b92a      	cbnz	r2, 8006ac8 <_realloc_r+0x24>
 8006abc:	f7ff f8f8 	bl	8005cb0 <_free_r>
 8006ac0:	2400      	movs	r4, #0
 8006ac2:	4620      	mov	r0, r4
 8006ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ac8:	f000 f841 	bl	8006b4e <_malloc_usable_size_r>
 8006acc:	4285      	cmp	r5, r0
 8006ace:	4606      	mov	r6, r0
 8006ad0:	d802      	bhi.n	8006ad8 <_realloc_r+0x34>
 8006ad2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006ad6:	d8f4      	bhi.n	8006ac2 <_realloc_r+0x1e>
 8006ad8:	4629      	mov	r1, r5
 8006ada:	4640      	mov	r0, r8
 8006adc:	f7ff f95a 	bl	8005d94 <_malloc_r>
 8006ae0:	4607      	mov	r7, r0
 8006ae2:	2800      	cmp	r0, #0
 8006ae4:	d0ec      	beq.n	8006ac0 <_realloc_r+0x1c>
 8006ae6:	42b5      	cmp	r5, r6
 8006ae8:	462a      	mov	r2, r5
 8006aea:	4621      	mov	r1, r4
 8006aec:	bf28      	it	cs
 8006aee:	4632      	movcs	r2, r6
 8006af0:	f7ff ff86 	bl	8006a00 <memcpy>
 8006af4:	4621      	mov	r1, r4
 8006af6:	4640      	mov	r0, r8
 8006af8:	f7ff f8da 	bl	8005cb0 <_free_r>
 8006afc:	463c      	mov	r4, r7
 8006afe:	e7e0      	b.n	8006ac2 <_realloc_r+0x1e>

08006b00 <__ascii_wctomb>:
 8006b00:	4603      	mov	r3, r0
 8006b02:	4608      	mov	r0, r1
 8006b04:	b141      	cbz	r1, 8006b18 <__ascii_wctomb+0x18>
 8006b06:	2aff      	cmp	r2, #255	@ 0xff
 8006b08:	d904      	bls.n	8006b14 <__ascii_wctomb+0x14>
 8006b0a:	228a      	movs	r2, #138	@ 0x8a
 8006b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b10:	601a      	str	r2, [r3, #0]
 8006b12:	4770      	bx	lr
 8006b14:	2001      	movs	r0, #1
 8006b16:	700a      	strb	r2, [r1, #0]
 8006b18:	4770      	bx	lr
	...

08006b1c <fiprintf>:
 8006b1c:	b40e      	push	{r1, r2, r3}
 8006b1e:	b503      	push	{r0, r1, lr}
 8006b20:	4601      	mov	r1, r0
 8006b22:	ab03      	add	r3, sp, #12
 8006b24:	4805      	ldr	r0, [pc, #20]	@ (8006b3c <fiprintf+0x20>)
 8006b26:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b2a:	6800      	ldr	r0, [r0, #0]
 8006b2c:	9301      	str	r3, [sp, #4]
 8006b2e:	f000 f83d 	bl	8006bac <_vfiprintf_r>
 8006b32:	b002      	add	sp, #8
 8006b34:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b38:	b003      	add	sp, #12
 8006b3a:	4770      	bx	lr
 8006b3c:	20000018 	.word	0x20000018

08006b40 <abort>:
 8006b40:	2006      	movs	r0, #6
 8006b42:	b508      	push	{r3, lr}
 8006b44:	f000 fa06 	bl	8006f54 <raise>
 8006b48:	2001      	movs	r0, #1
 8006b4a:	f7fb fa3e 	bl	8001fca <_exit>

08006b4e <_malloc_usable_size_r>:
 8006b4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b52:	1f18      	subs	r0, r3, #4
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	bfbc      	itt	lt
 8006b58:	580b      	ldrlt	r3, [r1, r0]
 8006b5a:	18c0      	addlt	r0, r0, r3
 8006b5c:	4770      	bx	lr

08006b5e <__sfputc_r>:
 8006b5e:	6893      	ldr	r3, [r2, #8]
 8006b60:	b410      	push	{r4}
 8006b62:	3b01      	subs	r3, #1
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	6093      	str	r3, [r2, #8]
 8006b68:	da07      	bge.n	8006b7a <__sfputc_r+0x1c>
 8006b6a:	6994      	ldr	r4, [r2, #24]
 8006b6c:	42a3      	cmp	r3, r4
 8006b6e:	db01      	blt.n	8006b74 <__sfputc_r+0x16>
 8006b70:	290a      	cmp	r1, #10
 8006b72:	d102      	bne.n	8006b7a <__sfputc_r+0x1c>
 8006b74:	bc10      	pop	{r4}
 8006b76:	f000 b931 	b.w	8006ddc <__swbuf_r>
 8006b7a:	6813      	ldr	r3, [r2, #0]
 8006b7c:	1c58      	adds	r0, r3, #1
 8006b7e:	6010      	str	r0, [r2, #0]
 8006b80:	7019      	strb	r1, [r3, #0]
 8006b82:	4608      	mov	r0, r1
 8006b84:	bc10      	pop	{r4}
 8006b86:	4770      	bx	lr

08006b88 <__sfputs_r>:
 8006b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b8a:	4606      	mov	r6, r0
 8006b8c:	460f      	mov	r7, r1
 8006b8e:	4614      	mov	r4, r2
 8006b90:	18d5      	adds	r5, r2, r3
 8006b92:	42ac      	cmp	r4, r5
 8006b94:	d101      	bne.n	8006b9a <__sfputs_r+0x12>
 8006b96:	2000      	movs	r0, #0
 8006b98:	e007      	b.n	8006baa <__sfputs_r+0x22>
 8006b9a:	463a      	mov	r2, r7
 8006b9c:	4630      	mov	r0, r6
 8006b9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ba2:	f7ff ffdc 	bl	8006b5e <__sfputc_r>
 8006ba6:	1c43      	adds	r3, r0, #1
 8006ba8:	d1f3      	bne.n	8006b92 <__sfputs_r+0xa>
 8006baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006bac <_vfiprintf_r>:
 8006bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb0:	460d      	mov	r5, r1
 8006bb2:	4614      	mov	r4, r2
 8006bb4:	4698      	mov	r8, r3
 8006bb6:	4606      	mov	r6, r0
 8006bb8:	b09d      	sub	sp, #116	@ 0x74
 8006bba:	b118      	cbz	r0, 8006bc4 <_vfiprintf_r+0x18>
 8006bbc:	6a03      	ldr	r3, [r0, #32]
 8006bbe:	b90b      	cbnz	r3, 8006bc4 <_vfiprintf_r+0x18>
 8006bc0:	f7fe f8fc 	bl	8004dbc <__sinit>
 8006bc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006bc6:	07d9      	lsls	r1, r3, #31
 8006bc8:	d405      	bmi.n	8006bd6 <_vfiprintf_r+0x2a>
 8006bca:	89ab      	ldrh	r3, [r5, #12]
 8006bcc:	059a      	lsls	r2, r3, #22
 8006bce:	d402      	bmi.n	8006bd6 <_vfiprintf_r+0x2a>
 8006bd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006bd2:	f7fe fa0a 	bl	8004fea <__retarget_lock_acquire_recursive>
 8006bd6:	89ab      	ldrh	r3, [r5, #12]
 8006bd8:	071b      	lsls	r3, r3, #28
 8006bda:	d501      	bpl.n	8006be0 <_vfiprintf_r+0x34>
 8006bdc:	692b      	ldr	r3, [r5, #16]
 8006bde:	b99b      	cbnz	r3, 8006c08 <_vfiprintf_r+0x5c>
 8006be0:	4629      	mov	r1, r5
 8006be2:	4630      	mov	r0, r6
 8006be4:	f000 f938 	bl	8006e58 <__swsetup_r>
 8006be8:	b170      	cbz	r0, 8006c08 <_vfiprintf_r+0x5c>
 8006bea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006bec:	07dc      	lsls	r4, r3, #31
 8006bee:	d504      	bpl.n	8006bfa <_vfiprintf_r+0x4e>
 8006bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8006bf4:	b01d      	add	sp, #116	@ 0x74
 8006bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bfa:	89ab      	ldrh	r3, [r5, #12]
 8006bfc:	0598      	lsls	r0, r3, #22
 8006bfe:	d4f7      	bmi.n	8006bf0 <_vfiprintf_r+0x44>
 8006c00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006c02:	f7fe f9f3 	bl	8004fec <__retarget_lock_release_recursive>
 8006c06:	e7f3      	b.n	8006bf0 <_vfiprintf_r+0x44>
 8006c08:	2300      	movs	r3, #0
 8006c0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c0c:	2320      	movs	r3, #32
 8006c0e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006c12:	2330      	movs	r3, #48	@ 0x30
 8006c14:	f04f 0901 	mov.w	r9, #1
 8006c18:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c1c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006dc8 <_vfiprintf_r+0x21c>
 8006c20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006c24:	4623      	mov	r3, r4
 8006c26:	469a      	mov	sl, r3
 8006c28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c2c:	b10a      	cbz	r2, 8006c32 <_vfiprintf_r+0x86>
 8006c2e:	2a25      	cmp	r2, #37	@ 0x25
 8006c30:	d1f9      	bne.n	8006c26 <_vfiprintf_r+0x7a>
 8006c32:	ebba 0b04 	subs.w	fp, sl, r4
 8006c36:	d00b      	beq.n	8006c50 <_vfiprintf_r+0xa4>
 8006c38:	465b      	mov	r3, fp
 8006c3a:	4622      	mov	r2, r4
 8006c3c:	4629      	mov	r1, r5
 8006c3e:	4630      	mov	r0, r6
 8006c40:	f7ff ffa2 	bl	8006b88 <__sfputs_r>
 8006c44:	3001      	adds	r0, #1
 8006c46:	f000 80a7 	beq.w	8006d98 <_vfiprintf_r+0x1ec>
 8006c4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c4c:	445a      	add	r2, fp
 8006c4e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c50:	f89a 3000 	ldrb.w	r3, [sl]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	f000 809f 	beq.w	8006d98 <_vfiprintf_r+0x1ec>
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8006c60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c64:	f10a 0a01 	add.w	sl, sl, #1
 8006c68:	9304      	str	r3, [sp, #16]
 8006c6a:	9307      	str	r3, [sp, #28]
 8006c6c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006c70:	931a      	str	r3, [sp, #104]	@ 0x68
 8006c72:	4654      	mov	r4, sl
 8006c74:	2205      	movs	r2, #5
 8006c76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c7a:	4853      	ldr	r0, [pc, #332]	@ (8006dc8 <_vfiprintf_r+0x21c>)
 8006c7c:	f7fe f9b7 	bl	8004fee <memchr>
 8006c80:	9a04      	ldr	r2, [sp, #16]
 8006c82:	b9d8      	cbnz	r0, 8006cbc <_vfiprintf_r+0x110>
 8006c84:	06d1      	lsls	r1, r2, #27
 8006c86:	bf44      	itt	mi
 8006c88:	2320      	movmi	r3, #32
 8006c8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c8e:	0713      	lsls	r3, r2, #28
 8006c90:	bf44      	itt	mi
 8006c92:	232b      	movmi	r3, #43	@ 0x2b
 8006c94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c98:	f89a 3000 	ldrb.w	r3, [sl]
 8006c9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c9e:	d015      	beq.n	8006ccc <_vfiprintf_r+0x120>
 8006ca0:	4654      	mov	r4, sl
 8006ca2:	2000      	movs	r0, #0
 8006ca4:	f04f 0c0a 	mov.w	ip, #10
 8006ca8:	9a07      	ldr	r2, [sp, #28]
 8006caa:	4621      	mov	r1, r4
 8006cac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cb0:	3b30      	subs	r3, #48	@ 0x30
 8006cb2:	2b09      	cmp	r3, #9
 8006cb4:	d94b      	bls.n	8006d4e <_vfiprintf_r+0x1a2>
 8006cb6:	b1b0      	cbz	r0, 8006ce6 <_vfiprintf_r+0x13a>
 8006cb8:	9207      	str	r2, [sp, #28]
 8006cba:	e014      	b.n	8006ce6 <_vfiprintf_r+0x13a>
 8006cbc:	eba0 0308 	sub.w	r3, r0, r8
 8006cc0:	fa09 f303 	lsl.w	r3, r9, r3
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	46a2      	mov	sl, r4
 8006cc8:	9304      	str	r3, [sp, #16]
 8006cca:	e7d2      	b.n	8006c72 <_vfiprintf_r+0xc6>
 8006ccc:	9b03      	ldr	r3, [sp, #12]
 8006cce:	1d19      	adds	r1, r3, #4
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	9103      	str	r1, [sp, #12]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	bfbb      	ittet	lt
 8006cd8:	425b      	neglt	r3, r3
 8006cda:	f042 0202 	orrlt.w	r2, r2, #2
 8006cde:	9307      	strge	r3, [sp, #28]
 8006ce0:	9307      	strlt	r3, [sp, #28]
 8006ce2:	bfb8      	it	lt
 8006ce4:	9204      	strlt	r2, [sp, #16]
 8006ce6:	7823      	ldrb	r3, [r4, #0]
 8006ce8:	2b2e      	cmp	r3, #46	@ 0x2e
 8006cea:	d10a      	bne.n	8006d02 <_vfiprintf_r+0x156>
 8006cec:	7863      	ldrb	r3, [r4, #1]
 8006cee:	2b2a      	cmp	r3, #42	@ 0x2a
 8006cf0:	d132      	bne.n	8006d58 <_vfiprintf_r+0x1ac>
 8006cf2:	9b03      	ldr	r3, [sp, #12]
 8006cf4:	3402      	adds	r4, #2
 8006cf6:	1d1a      	adds	r2, r3, #4
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	9203      	str	r2, [sp, #12]
 8006cfc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006d00:	9305      	str	r3, [sp, #20]
 8006d02:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006dcc <_vfiprintf_r+0x220>
 8006d06:	2203      	movs	r2, #3
 8006d08:	4650      	mov	r0, sl
 8006d0a:	7821      	ldrb	r1, [r4, #0]
 8006d0c:	f7fe f96f 	bl	8004fee <memchr>
 8006d10:	b138      	cbz	r0, 8006d22 <_vfiprintf_r+0x176>
 8006d12:	2240      	movs	r2, #64	@ 0x40
 8006d14:	9b04      	ldr	r3, [sp, #16]
 8006d16:	eba0 000a 	sub.w	r0, r0, sl
 8006d1a:	4082      	lsls	r2, r0
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	3401      	adds	r4, #1
 8006d20:	9304      	str	r3, [sp, #16]
 8006d22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d26:	2206      	movs	r2, #6
 8006d28:	4829      	ldr	r0, [pc, #164]	@ (8006dd0 <_vfiprintf_r+0x224>)
 8006d2a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006d2e:	f7fe f95e 	bl	8004fee <memchr>
 8006d32:	2800      	cmp	r0, #0
 8006d34:	d03f      	beq.n	8006db6 <_vfiprintf_r+0x20a>
 8006d36:	4b27      	ldr	r3, [pc, #156]	@ (8006dd4 <_vfiprintf_r+0x228>)
 8006d38:	bb1b      	cbnz	r3, 8006d82 <_vfiprintf_r+0x1d6>
 8006d3a:	9b03      	ldr	r3, [sp, #12]
 8006d3c:	3307      	adds	r3, #7
 8006d3e:	f023 0307 	bic.w	r3, r3, #7
 8006d42:	3308      	adds	r3, #8
 8006d44:	9303      	str	r3, [sp, #12]
 8006d46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d48:	443b      	add	r3, r7
 8006d4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d4c:	e76a      	b.n	8006c24 <_vfiprintf_r+0x78>
 8006d4e:	460c      	mov	r4, r1
 8006d50:	2001      	movs	r0, #1
 8006d52:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d56:	e7a8      	b.n	8006caa <_vfiprintf_r+0xfe>
 8006d58:	2300      	movs	r3, #0
 8006d5a:	f04f 0c0a 	mov.w	ip, #10
 8006d5e:	4619      	mov	r1, r3
 8006d60:	3401      	adds	r4, #1
 8006d62:	9305      	str	r3, [sp, #20]
 8006d64:	4620      	mov	r0, r4
 8006d66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d6a:	3a30      	subs	r2, #48	@ 0x30
 8006d6c:	2a09      	cmp	r2, #9
 8006d6e:	d903      	bls.n	8006d78 <_vfiprintf_r+0x1cc>
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d0c6      	beq.n	8006d02 <_vfiprintf_r+0x156>
 8006d74:	9105      	str	r1, [sp, #20]
 8006d76:	e7c4      	b.n	8006d02 <_vfiprintf_r+0x156>
 8006d78:	4604      	mov	r4, r0
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d80:	e7f0      	b.n	8006d64 <_vfiprintf_r+0x1b8>
 8006d82:	ab03      	add	r3, sp, #12
 8006d84:	9300      	str	r3, [sp, #0]
 8006d86:	462a      	mov	r2, r5
 8006d88:	4630      	mov	r0, r6
 8006d8a:	4b13      	ldr	r3, [pc, #76]	@ (8006dd8 <_vfiprintf_r+0x22c>)
 8006d8c:	a904      	add	r1, sp, #16
 8006d8e:	f7fd fbcb 	bl	8004528 <_printf_float>
 8006d92:	4607      	mov	r7, r0
 8006d94:	1c78      	adds	r0, r7, #1
 8006d96:	d1d6      	bne.n	8006d46 <_vfiprintf_r+0x19a>
 8006d98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006d9a:	07d9      	lsls	r1, r3, #31
 8006d9c:	d405      	bmi.n	8006daa <_vfiprintf_r+0x1fe>
 8006d9e:	89ab      	ldrh	r3, [r5, #12]
 8006da0:	059a      	lsls	r2, r3, #22
 8006da2:	d402      	bmi.n	8006daa <_vfiprintf_r+0x1fe>
 8006da4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006da6:	f7fe f921 	bl	8004fec <__retarget_lock_release_recursive>
 8006daa:	89ab      	ldrh	r3, [r5, #12]
 8006dac:	065b      	lsls	r3, r3, #25
 8006dae:	f53f af1f 	bmi.w	8006bf0 <_vfiprintf_r+0x44>
 8006db2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006db4:	e71e      	b.n	8006bf4 <_vfiprintf_r+0x48>
 8006db6:	ab03      	add	r3, sp, #12
 8006db8:	9300      	str	r3, [sp, #0]
 8006dba:	462a      	mov	r2, r5
 8006dbc:	4630      	mov	r0, r6
 8006dbe:	4b06      	ldr	r3, [pc, #24]	@ (8006dd8 <_vfiprintf_r+0x22c>)
 8006dc0:	a904      	add	r1, sp, #16
 8006dc2:	f7fd fe4f 	bl	8004a64 <_printf_i>
 8006dc6:	e7e4      	b.n	8006d92 <_vfiprintf_r+0x1e6>
 8006dc8:	08008430 	.word	0x08008430
 8006dcc:	08008436 	.word	0x08008436
 8006dd0:	0800843a 	.word	0x0800843a
 8006dd4:	08004529 	.word	0x08004529
 8006dd8:	08006b89 	.word	0x08006b89

08006ddc <__swbuf_r>:
 8006ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dde:	460e      	mov	r6, r1
 8006de0:	4614      	mov	r4, r2
 8006de2:	4605      	mov	r5, r0
 8006de4:	b118      	cbz	r0, 8006dee <__swbuf_r+0x12>
 8006de6:	6a03      	ldr	r3, [r0, #32]
 8006de8:	b90b      	cbnz	r3, 8006dee <__swbuf_r+0x12>
 8006dea:	f7fd ffe7 	bl	8004dbc <__sinit>
 8006dee:	69a3      	ldr	r3, [r4, #24]
 8006df0:	60a3      	str	r3, [r4, #8]
 8006df2:	89a3      	ldrh	r3, [r4, #12]
 8006df4:	071a      	lsls	r2, r3, #28
 8006df6:	d501      	bpl.n	8006dfc <__swbuf_r+0x20>
 8006df8:	6923      	ldr	r3, [r4, #16]
 8006dfa:	b943      	cbnz	r3, 8006e0e <__swbuf_r+0x32>
 8006dfc:	4621      	mov	r1, r4
 8006dfe:	4628      	mov	r0, r5
 8006e00:	f000 f82a 	bl	8006e58 <__swsetup_r>
 8006e04:	b118      	cbz	r0, 8006e0e <__swbuf_r+0x32>
 8006e06:	f04f 37ff 	mov.w	r7, #4294967295
 8006e0a:	4638      	mov	r0, r7
 8006e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e0e:	6823      	ldr	r3, [r4, #0]
 8006e10:	6922      	ldr	r2, [r4, #16]
 8006e12:	b2f6      	uxtb	r6, r6
 8006e14:	1a98      	subs	r0, r3, r2
 8006e16:	6963      	ldr	r3, [r4, #20]
 8006e18:	4637      	mov	r7, r6
 8006e1a:	4283      	cmp	r3, r0
 8006e1c:	dc05      	bgt.n	8006e2a <__swbuf_r+0x4e>
 8006e1e:	4621      	mov	r1, r4
 8006e20:	4628      	mov	r0, r5
 8006e22:	f7ff fd9b 	bl	800695c <_fflush_r>
 8006e26:	2800      	cmp	r0, #0
 8006e28:	d1ed      	bne.n	8006e06 <__swbuf_r+0x2a>
 8006e2a:	68a3      	ldr	r3, [r4, #8]
 8006e2c:	3b01      	subs	r3, #1
 8006e2e:	60a3      	str	r3, [r4, #8]
 8006e30:	6823      	ldr	r3, [r4, #0]
 8006e32:	1c5a      	adds	r2, r3, #1
 8006e34:	6022      	str	r2, [r4, #0]
 8006e36:	701e      	strb	r6, [r3, #0]
 8006e38:	6962      	ldr	r2, [r4, #20]
 8006e3a:	1c43      	adds	r3, r0, #1
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d004      	beq.n	8006e4a <__swbuf_r+0x6e>
 8006e40:	89a3      	ldrh	r3, [r4, #12]
 8006e42:	07db      	lsls	r3, r3, #31
 8006e44:	d5e1      	bpl.n	8006e0a <__swbuf_r+0x2e>
 8006e46:	2e0a      	cmp	r6, #10
 8006e48:	d1df      	bne.n	8006e0a <__swbuf_r+0x2e>
 8006e4a:	4621      	mov	r1, r4
 8006e4c:	4628      	mov	r0, r5
 8006e4e:	f7ff fd85 	bl	800695c <_fflush_r>
 8006e52:	2800      	cmp	r0, #0
 8006e54:	d0d9      	beq.n	8006e0a <__swbuf_r+0x2e>
 8006e56:	e7d6      	b.n	8006e06 <__swbuf_r+0x2a>

08006e58 <__swsetup_r>:
 8006e58:	b538      	push	{r3, r4, r5, lr}
 8006e5a:	4b29      	ldr	r3, [pc, #164]	@ (8006f00 <__swsetup_r+0xa8>)
 8006e5c:	4605      	mov	r5, r0
 8006e5e:	6818      	ldr	r0, [r3, #0]
 8006e60:	460c      	mov	r4, r1
 8006e62:	b118      	cbz	r0, 8006e6c <__swsetup_r+0x14>
 8006e64:	6a03      	ldr	r3, [r0, #32]
 8006e66:	b90b      	cbnz	r3, 8006e6c <__swsetup_r+0x14>
 8006e68:	f7fd ffa8 	bl	8004dbc <__sinit>
 8006e6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e70:	0719      	lsls	r1, r3, #28
 8006e72:	d422      	bmi.n	8006eba <__swsetup_r+0x62>
 8006e74:	06da      	lsls	r2, r3, #27
 8006e76:	d407      	bmi.n	8006e88 <__swsetup_r+0x30>
 8006e78:	2209      	movs	r2, #9
 8006e7a:	602a      	str	r2, [r5, #0]
 8006e7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e80:	f04f 30ff 	mov.w	r0, #4294967295
 8006e84:	81a3      	strh	r3, [r4, #12]
 8006e86:	e033      	b.n	8006ef0 <__swsetup_r+0x98>
 8006e88:	0758      	lsls	r0, r3, #29
 8006e8a:	d512      	bpl.n	8006eb2 <__swsetup_r+0x5a>
 8006e8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e8e:	b141      	cbz	r1, 8006ea2 <__swsetup_r+0x4a>
 8006e90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e94:	4299      	cmp	r1, r3
 8006e96:	d002      	beq.n	8006e9e <__swsetup_r+0x46>
 8006e98:	4628      	mov	r0, r5
 8006e9a:	f7fe ff09 	bl	8005cb0 <_free_r>
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	6363      	str	r3, [r4, #52]	@ 0x34
 8006ea2:	89a3      	ldrh	r3, [r4, #12]
 8006ea4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006ea8:	81a3      	strh	r3, [r4, #12]
 8006eaa:	2300      	movs	r3, #0
 8006eac:	6063      	str	r3, [r4, #4]
 8006eae:	6923      	ldr	r3, [r4, #16]
 8006eb0:	6023      	str	r3, [r4, #0]
 8006eb2:	89a3      	ldrh	r3, [r4, #12]
 8006eb4:	f043 0308 	orr.w	r3, r3, #8
 8006eb8:	81a3      	strh	r3, [r4, #12]
 8006eba:	6923      	ldr	r3, [r4, #16]
 8006ebc:	b94b      	cbnz	r3, 8006ed2 <__swsetup_r+0x7a>
 8006ebe:	89a3      	ldrh	r3, [r4, #12]
 8006ec0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006ec4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ec8:	d003      	beq.n	8006ed2 <__swsetup_r+0x7a>
 8006eca:	4621      	mov	r1, r4
 8006ecc:	4628      	mov	r0, r5
 8006ece:	f000 f882 	bl	8006fd6 <__smakebuf_r>
 8006ed2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ed6:	f013 0201 	ands.w	r2, r3, #1
 8006eda:	d00a      	beq.n	8006ef2 <__swsetup_r+0x9a>
 8006edc:	2200      	movs	r2, #0
 8006ede:	60a2      	str	r2, [r4, #8]
 8006ee0:	6962      	ldr	r2, [r4, #20]
 8006ee2:	4252      	negs	r2, r2
 8006ee4:	61a2      	str	r2, [r4, #24]
 8006ee6:	6922      	ldr	r2, [r4, #16]
 8006ee8:	b942      	cbnz	r2, 8006efc <__swsetup_r+0xa4>
 8006eea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006eee:	d1c5      	bne.n	8006e7c <__swsetup_r+0x24>
 8006ef0:	bd38      	pop	{r3, r4, r5, pc}
 8006ef2:	0799      	lsls	r1, r3, #30
 8006ef4:	bf58      	it	pl
 8006ef6:	6962      	ldrpl	r2, [r4, #20]
 8006ef8:	60a2      	str	r2, [r4, #8]
 8006efa:	e7f4      	b.n	8006ee6 <__swsetup_r+0x8e>
 8006efc:	2000      	movs	r0, #0
 8006efe:	e7f7      	b.n	8006ef0 <__swsetup_r+0x98>
 8006f00:	20000018 	.word	0x20000018

08006f04 <_raise_r>:
 8006f04:	291f      	cmp	r1, #31
 8006f06:	b538      	push	{r3, r4, r5, lr}
 8006f08:	4605      	mov	r5, r0
 8006f0a:	460c      	mov	r4, r1
 8006f0c:	d904      	bls.n	8006f18 <_raise_r+0x14>
 8006f0e:	2316      	movs	r3, #22
 8006f10:	6003      	str	r3, [r0, #0]
 8006f12:	f04f 30ff 	mov.w	r0, #4294967295
 8006f16:	bd38      	pop	{r3, r4, r5, pc}
 8006f18:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006f1a:	b112      	cbz	r2, 8006f22 <_raise_r+0x1e>
 8006f1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006f20:	b94b      	cbnz	r3, 8006f36 <_raise_r+0x32>
 8006f22:	4628      	mov	r0, r5
 8006f24:	f000 f830 	bl	8006f88 <_getpid_r>
 8006f28:	4622      	mov	r2, r4
 8006f2a:	4601      	mov	r1, r0
 8006f2c:	4628      	mov	r0, r5
 8006f2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f32:	f000 b817 	b.w	8006f64 <_kill_r>
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d00a      	beq.n	8006f50 <_raise_r+0x4c>
 8006f3a:	1c59      	adds	r1, r3, #1
 8006f3c:	d103      	bne.n	8006f46 <_raise_r+0x42>
 8006f3e:	2316      	movs	r3, #22
 8006f40:	6003      	str	r3, [r0, #0]
 8006f42:	2001      	movs	r0, #1
 8006f44:	e7e7      	b.n	8006f16 <_raise_r+0x12>
 8006f46:	2100      	movs	r1, #0
 8006f48:	4620      	mov	r0, r4
 8006f4a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006f4e:	4798      	blx	r3
 8006f50:	2000      	movs	r0, #0
 8006f52:	e7e0      	b.n	8006f16 <_raise_r+0x12>

08006f54 <raise>:
 8006f54:	4b02      	ldr	r3, [pc, #8]	@ (8006f60 <raise+0xc>)
 8006f56:	4601      	mov	r1, r0
 8006f58:	6818      	ldr	r0, [r3, #0]
 8006f5a:	f7ff bfd3 	b.w	8006f04 <_raise_r>
 8006f5e:	bf00      	nop
 8006f60:	20000018 	.word	0x20000018

08006f64 <_kill_r>:
 8006f64:	b538      	push	{r3, r4, r5, lr}
 8006f66:	2300      	movs	r3, #0
 8006f68:	4d06      	ldr	r5, [pc, #24]	@ (8006f84 <_kill_r+0x20>)
 8006f6a:	4604      	mov	r4, r0
 8006f6c:	4608      	mov	r0, r1
 8006f6e:	4611      	mov	r1, r2
 8006f70:	602b      	str	r3, [r5, #0]
 8006f72:	f7fb f81a 	bl	8001faa <_kill>
 8006f76:	1c43      	adds	r3, r0, #1
 8006f78:	d102      	bne.n	8006f80 <_kill_r+0x1c>
 8006f7a:	682b      	ldr	r3, [r5, #0]
 8006f7c:	b103      	cbz	r3, 8006f80 <_kill_r+0x1c>
 8006f7e:	6023      	str	r3, [r4, #0]
 8006f80:	bd38      	pop	{r3, r4, r5, pc}
 8006f82:	bf00      	nop
 8006f84:	200007fc 	.word	0x200007fc

08006f88 <_getpid_r>:
 8006f88:	f7fb b808 	b.w	8001f9c <_getpid>

08006f8c <__swhatbuf_r>:
 8006f8c:	b570      	push	{r4, r5, r6, lr}
 8006f8e:	460c      	mov	r4, r1
 8006f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f94:	4615      	mov	r5, r2
 8006f96:	2900      	cmp	r1, #0
 8006f98:	461e      	mov	r6, r3
 8006f9a:	b096      	sub	sp, #88	@ 0x58
 8006f9c:	da0c      	bge.n	8006fb8 <__swhatbuf_r+0x2c>
 8006f9e:	89a3      	ldrh	r3, [r4, #12]
 8006fa0:	2100      	movs	r1, #0
 8006fa2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006fa6:	bf14      	ite	ne
 8006fa8:	2340      	movne	r3, #64	@ 0x40
 8006faa:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006fae:	2000      	movs	r0, #0
 8006fb0:	6031      	str	r1, [r6, #0]
 8006fb2:	602b      	str	r3, [r5, #0]
 8006fb4:	b016      	add	sp, #88	@ 0x58
 8006fb6:	bd70      	pop	{r4, r5, r6, pc}
 8006fb8:	466a      	mov	r2, sp
 8006fba:	f000 f849 	bl	8007050 <_fstat_r>
 8006fbe:	2800      	cmp	r0, #0
 8006fc0:	dbed      	blt.n	8006f9e <__swhatbuf_r+0x12>
 8006fc2:	9901      	ldr	r1, [sp, #4]
 8006fc4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006fc8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006fcc:	4259      	negs	r1, r3
 8006fce:	4159      	adcs	r1, r3
 8006fd0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006fd4:	e7eb      	b.n	8006fae <__swhatbuf_r+0x22>

08006fd6 <__smakebuf_r>:
 8006fd6:	898b      	ldrh	r3, [r1, #12]
 8006fd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006fda:	079d      	lsls	r5, r3, #30
 8006fdc:	4606      	mov	r6, r0
 8006fde:	460c      	mov	r4, r1
 8006fe0:	d507      	bpl.n	8006ff2 <__smakebuf_r+0x1c>
 8006fe2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006fe6:	6023      	str	r3, [r4, #0]
 8006fe8:	6123      	str	r3, [r4, #16]
 8006fea:	2301      	movs	r3, #1
 8006fec:	6163      	str	r3, [r4, #20]
 8006fee:	b003      	add	sp, #12
 8006ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ff2:	466a      	mov	r2, sp
 8006ff4:	ab01      	add	r3, sp, #4
 8006ff6:	f7ff ffc9 	bl	8006f8c <__swhatbuf_r>
 8006ffa:	9f00      	ldr	r7, [sp, #0]
 8006ffc:	4605      	mov	r5, r0
 8006ffe:	4639      	mov	r1, r7
 8007000:	4630      	mov	r0, r6
 8007002:	f7fe fec7 	bl	8005d94 <_malloc_r>
 8007006:	b948      	cbnz	r0, 800701c <__smakebuf_r+0x46>
 8007008:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800700c:	059a      	lsls	r2, r3, #22
 800700e:	d4ee      	bmi.n	8006fee <__smakebuf_r+0x18>
 8007010:	f023 0303 	bic.w	r3, r3, #3
 8007014:	f043 0302 	orr.w	r3, r3, #2
 8007018:	81a3      	strh	r3, [r4, #12]
 800701a:	e7e2      	b.n	8006fe2 <__smakebuf_r+0xc>
 800701c:	89a3      	ldrh	r3, [r4, #12]
 800701e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007022:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007026:	81a3      	strh	r3, [r4, #12]
 8007028:	9b01      	ldr	r3, [sp, #4]
 800702a:	6020      	str	r0, [r4, #0]
 800702c:	b15b      	cbz	r3, 8007046 <__smakebuf_r+0x70>
 800702e:	4630      	mov	r0, r6
 8007030:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007034:	f000 f81e 	bl	8007074 <_isatty_r>
 8007038:	b128      	cbz	r0, 8007046 <__smakebuf_r+0x70>
 800703a:	89a3      	ldrh	r3, [r4, #12]
 800703c:	f023 0303 	bic.w	r3, r3, #3
 8007040:	f043 0301 	orr.w	r3, r3, #1
 8007044:	81a3      	strh	r3, [r4, #12]
 8007046:	89a3      	ldrh	r3, [r4, #12]
 8007048:	431d      	orrs	r5, r3
 800704a:	81a5      	strh	r5, [r4, #12]
 800704c:	e7cf      	b.n	8006fee <__smakebuf_r+0x18>
	...

08007050 <_fstat_r>:
 8007050:	b538      	push	{r3, r4, r5, lr}
 8007052:	2300      	movs	r3, #0
 8007054:	4d06      	ldr	r5, [pc, #24]	@ (8007070 <_fstat_r+0x20>)
 8007056:	4604      	mov	r4, r0
 8007058:	4608      	mov	r0, r1
 800705a:	4611      	mov	r1, r2
 800705c:	602b      	str	r3, [r5, #0]
 800705e:	f7fb f803 	bl	8002068 <_fstat>
 8007062:	1c43      	adds	r3, r0, #1
 8007064:	d102      	bne.n	800706c <_fstat_r+0x1c>
 8007066:	682b      	ldr	r3, [r5, #0]
 8007068:	b103      	cbz	r3, 800706c <_fstat_r+0x1c>
 800706a:	6023      	str	r3, [r4, #0]
 800706c:	bd38      	pop	{r3, r4, r5, pc}
 800706e:	bf00      	nop
 8007070:	200007fc 	.word	0x200007fc

08007074 <_isatty_r>:
 8007074:	b538      	push	{r3, r4, r5, lr}
 8007076:	2300      	movs	r3, #0
 8007078:	4d05      	ldr	r5, [pc, #20]	@ (8007090 <_isatty_r+0x1c>)
 800707a:	4604      	mov	r4, r0
 800707c:	4608      	mov	r0, r1
 800707e:	602b      	str	r3, [r5, #0]
 8007080:	f7fb f801 	bl	8002086 <_isatty>
 8007084:	1c43      	adds	r3, r0, #1
 8007086:	d102      	bne.n	800708e <_isatty_r+0x1a>
 8007088:	682b      	ldr	r3, [r5, #0]
 800708a:	b103      	cbz	r3, 800708e <_isatty_r+0x1a>
 800708c:	6023      	str	r3, [r4, #0]
 800708e:	bd38      	pop	{r3, r4, r5, pc}
 8007090:	200007fc 	.word	0x200007fc

08007094 <_init>:
 8007094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007096:	bf00      	nop
 8007098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800709a:	bc08      	pop	{r3}
 800709c:	469e      	mov	lr, r3
 800709e:	4770      	bx	lr

080070a0 <_fini>:
 80070a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070a2:	bf00      	nop
 80070a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070a6:	bc08      	pop	{r3}
 80070a8:	469e      	mov	lr, r3
 80070aa:	4770      	bx	lr
