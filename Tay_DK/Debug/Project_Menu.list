
Project_Menu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000490c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ec4  08004a18  08004a18  00005a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058dc  080058dc  00007070  2**0
                  CONTENTS
  4 .ARM          00000000  080058dc  080058dc  00007070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080058dc  080058dc  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058dc  080058dc  000068dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058e0  080058e0  000068e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080058e4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a0  20000070  08005954  00007070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000710  08005954  00007710  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d6b6  00000000  00000000  00007099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023de  00000000  00000000  0001474f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc8  00000000  00000000  00016b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009e4  00000000  00000000  000177f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000191b8  00000000  00000000  000181dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ae2  00000000  00000000  00031394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cba0  00000000  00000000  00041e76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cea16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f3c  00000000  00000000  000cea5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  000d2998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004a00 	.word	0x08004a00

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004a00 	.word	0x08004a00

0800014c <drawCourt>:
}

/* GAME */

/* Ham ve khung vien*/
void drawCourt(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af02      	add	r7, sp, #8
    ssd1306_DrawRectangle(0, 0, 127, 63, White);
 8000152:	2301      	movs	r3, #1
 8000154:	9300      	str	r3, [sp, #0]
 8000156:	233f      	movs	r3, #63	@ 0x3f
 8000158:	227f      	movs	r2, #127	@ 0x7f
 800015a:	2100      	movs	r1, #0
 800015c:	2000      	movs	r0, #0
 800015e:	f001 f91f 	bl	80013a0 <ssd1306_DrawRectangle>
    Mid_line();
 8000162:	f000 fa8b 	bl	800067c <Mid_line>
    ssd1306_UpdateScreen();
 8000166:	f000 ff67 	bl	8001038 <ssd1306_UpdateScreen>
}
 800016a:	bf00      	nop
 800016c:	46bd      	mov	sp, r7
 800016e:	bd80      	pop	{r7, pc}

08000170 <Game_Pong>:

void Game_Pong(void)
{
 8000170:	b590      	push	{r4, r7, lr}
 8000172:	b087      	sub	sp, #28
 8000174:	af02      	add	r7, sp, #8
	uint8_t  update = 0;
 8000176:	2300      	movs	r3, #0
 8000178:	73fb      	strb	r3, [r7, #15]
	unsigned long time = HAL_GetTick();
 800017a:	f001 f9d1 	bl	8001520 <HAL_GetTick>
 800017e:	60b8      	str	r0, [r7, #8]
	 static uint8_t up_state = 0;
	 static uint8_t down_state = 0;

	 up_state |= (HAL_GPIO_ReadPin(BT1_UP_GPIO_Port, BT1_UP_Pin) == 0);					// Đọc trạng thái nút nhấn lên, nếu được nhấn trả về 1, ngược lại trả về 0
 8000180:	2108      	movs	r1, #8
 8000182:	4887      	ldr	r0, [pc, #540]	@ (80003a0 <Game_Pong+0x230>)
 8000184:	f001 fffe 	bl	8002184 <HAL_GPIO_ReadPin>
 8000188:	4603      	mov	r3, r0
 800018a:	2b00      	cmp	r3, #0
 800018c:	bf0c      	ite	eq
 800018e:	2301      	moveq	r3, #1
 8000190:	2300      	movne	r3, #0
 8000192:	b2db      	uxtb	r3, r3
 8000194:	b25a      	sxtb	r2, r3
 8000196:	4b83      	ldr	r3, [pc, #524]	@ (80003a4 <Game_Pong+0x234>)
 8000198:	781b      	ldrb	r3, [r3, #0]
 800019a:	b25b      	sxtb	r3, r3
 800019c:	4313      	orrs	r3, r2
 800019e:	b25b      	sxtb	r3, r3
 80001a0:	b2da      	uxtb	r2, r3
 80001a2:	4b80      	ldr	r3, [pc, #512]	@ (80003a4 <Game_Pong+0x234>)
 80001a4:	701a      	strb	r2, [r3, #0]
	 down_state |= (HAL_GPIO_ReadPin(BT3_DOW_GPIO_Port, BT3_DOW_Pin) == 0);				// Đọc trạng thái nút nhấn xuong, nếu được nhấn trả về 1, ngược lại trả về 0
 80001a6:	2120      	movs	r1, #32
 80001a8:	487d      	ldr	r0, [pc, #500]	@ (80003a0 <Game_Pong+0x230>)
 80001aa:	f001 ffeb 	bl	8002184 <HAL_GPIO_ReadPin>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	bf0c      	ite	eq
 80001b4:	2301      	moveq	r3, #1
 80001b6:	2300      	movne	r3, #0
 80001b8:	b2db      	uxtb	r3, r3
 80001ba:	b25a      	sxtb	r2, r3
 80001bc:	4b7a      	ldr	r3, [pc, #488]	@ (80003a8 <Game_Pong+0x238>)
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	b25b      	sxtb	r3, r3
 80001c2:	4313      	orrs	r3, r2
 80001c4:	b25b      	sxtb	r3, r3
 80001c6:	b2da      	uxtb	r2, r3
 80001c8:	4b77      	ldr	r3, [pc, #476]	@ (80003a8 <Game_Pong+0x238>)
 80001ca:	701a      	strb	r2, [r3, #0]

	 if(time > ball_update)
 80001cc:	4b77      	ldr	r3, [pc, #476]	@ (80003ac <Game_Pong+0x23c>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	68ba      	ldr	r2, [r7, #8]
 80001d2:	429a      	cmp	r2, r3
 80001d4:	f240 8124 	bls.w	8000420 <Game_Pong+0x2b0>
	 {
		 uint8_t new_x = ball_x + ball_dir_x;					// Tinh vi tri x cua bong
 80001d8:	4b75      	ldr	r3, [pc, #468]	@ (80003b0 <Game_Pong+0x240>)
 80001da:	781a      	ldrb	r2, [r3, #0]
 80001dc:	4b75      	ldr	r3, [pc, #468]	@ (80003b4 <Game_Pong+0x244>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	4413      	add	r3, r2
 80001e2:	71fb      	strb	r3, [r7, #7]
		 uint8_t new_y = ball_y + ball_dir_y;					// Tinh vi tri y cua bong
 80001e4:	4b74      	ldr	r3, [pc, #464]	@ (80003b8 <Game_Pong+0x248>)
 80001e6:	781a      	ldrb	r2, [r3, #0]
 80001e8:	4b74      	ldr	r3, [pc, #464]	@ (80003bc <Game_Pong+0x24c>)
 80001ea:	781b      	ldrb	r3, [r3, #0]
 80001ec:	4413      	add	r3, r2
 80001ee:	71bb      	strb	r3, [r7, #6]

		 /*Neu bong tram vao canh trai hoac phai thi dao nguoc lai huong di chuyen cua X (Tuc la cham vao thanh danh bong)*/
		 if(new_x == 2 || new_y == 125)
 80001f0:	79fb      	ldrb	r3, [r7, #7]
 80001f2:	2b02      	cmp	r3, #2
 80001f4:	d002      	beq.n	80001fc <Game_Pong+0x8c>
 80001f6:	79bb      	ldrb	r3, [r7, #6]
 80001f8:	2b7d      	cmp	r3, #125	@ 0x7d
 80001fa:	d110      	bne.n	800021e <Game_Pong+0xae>
		 {
			 tmp_point = 0;
 80001fc:	4b70      	ldr	r3, [pc, #448]	@ (80003c0 <Game_Pong+0x250>)
 80001fe:	2200      	movs	r2, #0
 8000200:	701a      	strb	r2, [r3, #0]
			 ball_dir_x = -ball_dir_x;
 8000202:	4b6c      	ldr	r3, [pc, #432]	@ (80003b4 <Game_Pong+0x244>)
 8000204:	781b      	ldrb	r3, [r3, #0]
 8000206:	425b      	negs	r3, r3
 8000208:	b2da      	uxtb	r2, r3
 800020a:	4b6a      	ldr	r3, [pc, #424]	@ (80003b4 <Game_Pong+0x244>)
 800020c:	701a      	strb	r2, [r3, #0]
			 new_x += ball_dir_x + ball_dir_x;
 800020e:	4b69      	ldr	r3, [pc, #420]	@ (80003b4 <Game_Pong+0x244>)
 8000210:	781b      	ldrb	r3, [r3, #0]
 8000212:	005b      	lsls	r3, r3, #1
 8000214:	b2da      	uxtb	r2, r3
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	4413      	add	r3, r2
 800021a:	71fb      	strb	r3, [r7, #7]
 800021c:	e100      	b.n	8000420 <Game_Pong+0x2b0>
		 }

		 /*Neu bong tram vao canh tren hoac duoi thi dao nguoc lai huong di chuyen cua Y */
		 else if(new_y == 0 || new_y == 63)
 800021e:	79bb      	ldrb	r3, [r7, #6]
 8000220:	2b00      	cmp	r3, #0
 8000222:	d002      	beq.n	800022a <Game_Pong+0xba>
 8000224:	79bb      	ldrb	r3, [r7, #6]
 8000226:	2b3f      	cmp	r3, #63	@ 0x3f
 8000228:	d110      	bne.n	800024c <Game_Pong+0xdc>
		 {
			 tmp_point = 0;
 800022a:	4b65      	ldr	r3, [pc, #404]	@ (80003c0 <Game_Pong+0x250>)
 800022c:	2200      	movs	r2, #0
 800022e:	701a      	strb	r2, [r3, #0]
			 ball_dir_y = -ball_dir_y;
 8000230:	4b62      	ldr	r3, [pc, #392]	@ (80003bc <Game_Pong+0x24c>)
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	425b      	negs	r3, r3
 8000236:	b2da      	uxtb	r2, r3
 8000238:	4b60      	ldr	r3, [pc, #384]	@ (80003bc <Game_Pong+0x24c>)
 800023a:	701a      	strb	r2, [r3, #0]
			 new_y += ball_dir_y + ball_dir_y;
 800023c:	4b5f      	ldr	r3, [pc, #380]	@ (80003bc <Game_Pong+0x24c>)
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	005b      	lsls	r3, r3, #1
 8000242:	b2da      	uxtb	r2, r3
 8000244:	79bb      	ldrb	r3, [r7, #6]
 8000246:	4413      	add	r3, r2
 8000248:	71bb      	strb	r3, [r7, #6]
 800024a:	e0e9      	b.n	8000420 <Game_Pong+0x2b0>
		 }

		 else if(new_x == CPU_X && new_y >= CPU_Y && new_y <= CPU_Y + PADDLE_HEIGHT)
 800024c:	220c      	movs	r2, #12
 800024e:	79fb      	ldrb	r3, [r7, #7]
 8000250:	4293      	cmp	r3, r2
 8000252:	d11d      	bne.n	8000290 <Game_Pong+0x120>
 8000254:	4b5b      	ldr	r3, [pc, #364]	@ (80003c4 <Game_Pong+0x254>)
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	79ba      	ldrb	r2, [r7, #6]
 800025a:	429a      	cmp	r2, r3
 800025c:	d318      	bcc.n	8000290 <Game_Pong+0x120>
 800025e:	79ba      	ldrb	r2, [r7, #6]
 8000260:	4b58      	ldr	r3, [pc, #352]	@ (80003c4 <Game_Pong+0x254>)
 8000262:	781b      	ldrb	r3, [r3, #0]
 8000264:	4619      	mov	r1, r3
 8000266:	230a      	movs	r3, #10
 8000268:	440b      	add	r3, r1
 800026a:	429a      	cmp	r2, r3
 800026c:	dc10      	bgt.n	8000290 <Game_Pong+0x120>
		 {
			 tmp_point = 0;
 800026e:	4b54      	ldr	r3, [pc, #336]	@ (80003c0 <Game_Pong+0x250>)
 8000270:	2200      	movs	r2, #0
 8000272:	701a      	strb	r2, [r3, #0]
			 ball_dir_x = -ball_dir_x;
 8000274:	4b4f      	ldr	r3, [pc, #316]	@ (80003b4 <Game_Pong+0x244>)
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	425b      	negs	r3, r3
 800027a:	b2da      	uxtb	r2, r3
 800027c:	4b4d      	ldr	r3, [pc, #308]	@ (80003b4 <Game_Pong+0x244>)
 800027e:	701a      	strb	r2, [r3, #0]
			 new_x += ball_dir_x + ball_dir_x;
 8000280:	4b4c      	ldr	r3, [pc, #304]	@ (80003b4 <Game_Pong+0x244>)
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	005b      	lsls	r3, r3, #1
 8000286:	b2da      	uxtb	r2, r3
 8000288:	79fb      	ldrb	r3, [r7, #7]
 800028a:	4413      	add	r3, r2
 800028c:	71fb      	strb	r3, [r7, #7]
 800028e:	e0c7      	b.n	8000420 <Game_Pong+0x2b0>
		 }

		 else if(new_x == PLAYER_X && new_y >= PLAYER_Y && new_y <= PLAYER_Y + PADDLE_HEIGHT)
 8000290:	2273      	movs	r2, #115	@ 0x73
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	4293      	cmp	r3, r2
 8000296:	d11d      	bne.n	80002d4 <Game_Pong+0x164>
 8000298:	4b4b      	ldr	r3, [pc, #300]	@ (80003c8 <Game_Pong+0x258>)
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	79ba      	ldrb	r2, [r7, #6]
 800029e:	429a      	cmp	r2, r3
 80002a0:	d318      	bcc.n	80002d4 <Game_Pong+0x164>
 80002a2:	79ba      	ldrb	r2, [r7, #6]
 80002a4:	4b48      	ldr	r3, [pc, #288]	@ (80003c8 <Game_Pong+0x258>)
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	4619      	mov	r1, r3
 80002aa:	230a      	movs	r3, #10
 80002ac:	440b      	add	r3, r1
 80002ae:	429a      	cmp	r2, r3
 80002b0:	dc10      	bgt.n	80002d4 <Game_Pong+0x164>
		 {
			 tmp_point = 0;
 80002b2:	4b43      	ldr	r3, [pc, #268]	@ (80003c0 <Game_Pong+0x250>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	701a      	strb	r2, [r3, #0]
			 ball_dir_x = -ball_dir_x;
 80002b8:	4b3e      	ldr	r3, [pc, #248]	@ (80003b4 <Game_Pong+0x244>)
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	425b      	negs	r3, r3
 80002be:	b2da      	uxtb	r2, r3
 80002c0:	4b3c      	ldr	r3, [pc, #240]	@ (80003b4 <Game_Pong+0x244>)
 80002c2:	701a      	strb	r2, [r3, #0]
			 new_x += ball_dir_x + ball_dir_x;
 80002c4:	4b3b      	ldr	r3, [pc, #236]	@ (80003b4 <Game_Pong+0x244>)
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	005b      	lsls	r3, r3, #1
 80002ca:	b2da      	uxtb	r2, r3
 80002cc:	79fb      	ldrb	r3, [r7, #7]
 80002ce:	4413      	add	r3, r2
 80002d0:	71fb      	strb	r3, [r7, #7]
 80002d2:	e0a5      	b.n	8000420 <Game_Pong+0x2b0>
		 }

		 /*		TH khi nguoi choi thang*/
		 else if((new_x == 64) && (new_y != 64) && (tmp_point == 0))
 80002d4:	79fb      	ldrb	r3, [r7, #7]
 80002d6:	2b40      	cmp	r3, #64	@ 0x40
 80002d8:	d140      	bne.n	800035c <Game_Pong+0x1ec>
 80002da:	79bb      	ldrb	r3, [r7, #6]
 80002dc:	2b40      	cmp	r3, #64	@ 0x40
 80002de:	d03d      	beq.n	800035c <Game_Pong+0x1ec>
 80002e0:	4b37      	ldr	r3, [pc, #220]	@ (80003c0 <Game_Pong+0x250>)
 80002e2:	781b      	ldrb	r3, [r3, #0]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d139      	bne.n	800035c <Game_Pong+0x1ec>
		 {
			 cnt_points1++;
 80002e8:	4b38      	ldr	r3, [pc, #224]	@ (80003cc <Game_Pong+0x25c>)
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	3301      	adds	r3, #1
 80002ee:	b2da      	uxtb	r2, r3
 80002f0:	4b36      	ldr	r3, [pc, #216]	@ (80003cc <Game_Pong+0x25c>)
 80002f2:	701a      	strb	r2, [r3, #0]
			 tmp_point = 1;
 80002f4:	4b32      	ldr	r3, [pc, #200]	@ (80003c0 <Game_Pong+0x250>)
 80002f6:	2201      	movs	r2, #1
 80002f8:	701a      	strb	r2, [r3, #0]
			 ssd1306_SetCursor(30, 30);
 80002fa:	211e      	movs	r1, #30
 80002fc:	201e      	movs	r0, #30
 80002fe:	f000 ffcb 	bl	8001298 <ssd1306_SetCursor>
			 sprintf(Ar_point,"%d", cnt_points1);
 8000302:	4b32      	ldr	r3, [pc, #200]	@ (80003cc <Game_Pong+0x25c>)
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	461a      	mov	r2, r3
 8000308:	4931      	ldr	r1, [pc, #196]	@ (80003d0 <Game_Pong+0x260>)
 800030a:	4832      	ldr	r0, [pc, #200]	@ (80003d4 <Game_Pong+0x264>)
 800030c:	f003 faba 	bl	8003884 <siprintf>
			 ssd1306_WriteChar(Ar_point, Font_6x8, White);
 8000310:	4b30      	ldr	r3, [pc, #192]	@ (80003d4 <Game_Pong+0x264>)
 8000312:	b2d8      	uxtb	r0, r3
 8000314:	4b30      	ldr	r3, [pc, #192]	@ (80003d8 <Game_Pong+0x268>)
 8000316:	2201      	movs	r2, #1
 8000318:	9200      	str	r2, [sp, #0]
 800031a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800031c:	f000 ff06 	bl	800112c <ssd1306_WriteChar>
			 ssd1306_UpdateScreen();
 8000320:	f000 fe8a 	bl	8001038 <ssd1306_UpdateScreen>

			 // Neu so len di qua vach giua lon hon hoac bang 5 thi thang
			 if(cnt_points1 >= 5)
 8000324:	4b29      	ldr	r3, [pc, #164]	@ (80003cc <Game_Pong+0x25c>)
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	2b04      	cmp	r3, #4
 800032a:	d979      	bls.n	8000420 <Game_Pong+0x2b0>
			 {
				 ssd1306_Fill(Black);
 800032c:	2000      	movs	r0, #0
 800032e:	f000 fe6b 	bl	8001008 <ssd1306_Fill>
				 ssd1306_SetCursor(40, 32);
 8000332:	2120      	movs	r1, #32
 8000334:	2028      	movs	r0, #40	@ 0x28
 8000336:	f000 ffaf 	bl	8001298 <ssd1306_SetCursor>
				 ssd1306_WriteString("You Win", Font_7x10, White);
 800033a:	4b28      	ldr	r3, [pc, #160]	@ (80003dc <Game_Pong+0x26c>)
 800033c:	2201      	movs	r2, #1
 800033e:	9200      	str	r2, [sp, #0]
 8000340:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000342:	4827      	ldr	r0, [pc, #156]	@ (80003e0 <Game_Pong+0x270>)
 8000344:	f000 ff82 	bl	800124c <ssd1306_WriteString>
				 cnt_points1 = 0;
 8000348:	4b20      	ldr	r3, [pc, #128]	@ (80003cc <Game_Pong+0x25c>)
 800034a:	2200      	movs	r2, #0
 800034c:	701a      	strb	r2, [r3, #0]

				 ssd1306_UpdateScreen();
 800034e:	f000 fe73 	bl	8001038 <ssd1306_UpdateScreen>

				 Wait_Update();
 8000352:	f000 f929 	bl	80005a8 <Wait_Update>
				 Reset_Game_Pong();
 8000356:	f000 f94b 	bl	80005f0 <Reset_Game_Pong>
			 if(cnt_points1 >= 5)
 800035a:	e061      	b.n	8000420 <Game_Pong+0x2b0>
			 }
		 }

		 else if(new_x <= 2 || new_x >= 125)
 800035c:	79fb      	ldrb	r3, [r7, #7]
 800035e:	2b02      	cmp	r3, #2
 8000360:	d902      	bls.n	8000368 <Game_Pong+0x1f8>
 8000362:	79fb      	ldrb	r3, [r7, #7]
 8000364:	2b7c      	cmp	r3, #124	@ 0x7c
 8000366:	d93f      	bls.n	80003e8 <Game_Pong+0x278>
		 {
			 tmp_point = 0;
 8000368:	4b15      	ldr	r3, [pc, #84]	@ (80003c0 <Game_Pong+0x250>)
 800036a:	2200      	movs	r2, #0
 800036c:	701a      	strb	r2, [r3, #0]
			 cnt_points1 = 0;
 800036e:	4b17      	ldr	r3, [pc, #92]	@ (80003cc <Game_Pong+0x25c>)
 8000370:	2200      	movs	r2, #0
 8000372:	701a      	strb	r2, [r3, #0]
			 ssd1306_Fill(Black);
 8000374:	2000      	movs	r0, #0
 8000376:	f000 fe47 	bl	8001008 <ssd1306_Fill>
			 ssd1306_SetCursor(40, 32);
 800037a:	2120      	movs	r1, #32
 800037c:	2028      	movs	r0, #40	@ 0x28
 800037e:	f000 ff8b 	bl	8001298 <ssd1306_SetCursor>
			 ssd1306_WriteString("Game Over", Font_7x10, White);
 8000382:	4b16      	ldr	r3, [pc, #88]	@ (80003dc <Game_Pong+0x26c>)
 8000384:	2201      	movs	r2, #1
 8000386:	9200      	str	r2, [sp, #0]
 8000388:	cb0e      	ldmia	r3, {r1, r2, r3}
 800038a:	4816      	ldr	r0, [pc, #88]	@ (80003e4 <Game_Pong+0x274>)
 800038c:	f000 ff5e 	bl	800124c <ssd1306_WriteString>
			 ssd1306_UpdateScreen();
 8000390:	f000 fe52 	bl	8001038 <ssd1306_UpdateScreen>

			 Wait_Update();
 8000394:	f000 f908 	bl	80005a8 <Wait_Update>
			 Reset_Game_Pong();
 8000398:	f000 f92a 	bl	80005f0 <Reset_Game_Pong>
 800039c:	e040      	b.n	8000420 <Game_Pong+0x2b0>
 800039e:	bf00      	nop
 80003a0:	40010800 	.word	0x40010800
 80003a4:	200001b2 	.word	0x200001b2
 80003a8:	200001b3 	.word	0x200001b3
 80003ac:	2000019c 	.word	0x2000019c
 80003b0:	20000000 	.word	0x20000000
 80003b4:	20000002 	.word	0x20000002
 80003b8:	20000001 	.word	0x20000001
 80003bc:	20000003 	.word	0x20000003
 80003c0:	200001a5 	.word	0x200001a5
 80003c4:	20000004 	.word	0x20000004
 80003c8:	20000005 	.word	0x20000005
 80003cc:	200001a4 	.word	0x200001a4
 80003d0:	08004a48 	.word	0x08004a48
 80003d4:	200001a8 	.word	0x200001a8
 80003d8:	080057d4 	.word	0x080057d4
 80003dc:	080057e0 	.word	0x080057e0
 80003e0:	08004a4c 	.word	0x08004a4c
 80003e4:	08004a54 	.word	0x08004a54
		 }
		 else
		 {
			 ssd1306_DrawPixel(ball_x, ball_y, Black);		// Xoa bong cu khi danh ra ngoai bang cach to mau den
 80003e8:	4b67      	ldr	r3, [pc, #412]	@ (8000588 <Game_Pong+0x418>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	4a67      	ldr	r2, [pc, #412]	@ (800058c <Game_Pong+0x41c>)
 80003ee:	7811      	ldrb	r1, [r2, #0]
 80003f0:	2200      	movs	r2, #0
 80003f2:	4618      	mov	r0, r3
 80003f4:	f000 fe48 	bl	8001088 <ssd1306_DrawPixel>
			 ssd1306_DrawPixel(new_x, new_y, White);		// Cap nhat lai vi tri cua bong khi danh ra ngoai
 80003f8:	79b9      	ldrb	r1, [r7, #6]
 80003fa:	79fb      	ldrb	r3, [r7, #7]
 80003fc:	2201      	movs	r2, #1
 80003fe:	4618      	mov	r0, r3
 8000400:	f000 fe42 	bl	8001088 <ssd1306_DrawPixel>

			 /*Sua kich thuoc bong lon hon bi treo chip*/
	 //		 ssd1306_FillCircle(ball_x, ball_y, BALL_SIZE, Black);
	 //		 ssd1306_FillCircle(new_x, new_y, BALL_SIZE, White);
			 ball_x = new_x;
 8000404:	4a60      	ldr	r2, [pc, #384]	@ (8000588 <Game_Pong+0x418>)
 8000406:	79fb      	ldrb	r3, [r7, #7]
 8000408:	7013      	strb	r3, [r2, #0]
			 ball_y = new_y;
 800040a:	4a60      	ldr	r2, [pc, #384]	@ (800058c <Game_Pong+0x41c>)
 800040c:	79bb      	ldrb	r3, [r7, #6]
 800040e:	7013      	strb	r3, [r2, #0]
			 ball_update += BALL_RATE;
 8000410:	4b5f      	ldr	r3, [pc, #380]	@ (8000590 <Game_Pong+0x420>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	2205      	movs	r2, #5
 8000416:	4413      	add	r3, r2
 8000418:	4a5d      	ldr	r2, [pc, #372]	@ (8000590 <Game_Pong+0x420>)
 800041a:	6013      	str	r3, [r2, #0]
			 update = 1;
 800041c:	2301      	movs	r3, #1
 800041e:	73fb      	strb	r3, [r7, #15]
		 }
	}
	 if(time > paddle_update) {
 8000420:	4b5c      	ldr	r3, [pc, #368]	@ (8000594 <Game_Pong+0x424>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	68ba      	ldr	r2, [r7, #8]
 8000426:	429a      	cmp	r2, r3
 8000428:	f240 80a4 	bls.w	8000574 <Game_Pong+0x404>
		 paddle_update += PADDLE_RATE;
 800042c:	4b59      	ldr	r3, [pc, #356]	@ (8000594 <Game_Pong+0x424>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	2214      	movs	r2, #20
 8000432:	4413      	add	r3, r2
 8000434:	4a57      	ldr	r2, [pc, #348]	@ (8000594 <Game_Pong+0x424>)
 8000436:	6013      	str	r3, [r2, #0]

		 ssd1306_Line(CPU_X, CPU_Y, CPU_X, CPU_Y + PADDLE_HEIGHT, Black);
 8000438:	200c      	movs	r0, #12
 800043a:	4b57      	ldr	r3, [pc, #348]	@ (8000598 <Game_Pong+0x428>)
 800043c:	7819      	ldrb	r1, [r3, #0]
 800043e:	240c      	movs	r4, #12
 8000440:	4b55      	ldr	r3, [pc, #340]	@ (8000598 <Game_Pong+0x428>)
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	220a      	movs	r2, #10
 8000446:	4413      	add	r3, r2
 8000448:	b2db      	uxtb	r3, r3
 800044a:	2200      	movs	r2, #0
 800044c:	9200      	str	r2, [sp, #0]
 800044e:	4622      	mov	r2, r4
 8000450:	f000 ff3a 	bl	80012c8 <ssd1306_Line>
		 const uint8_t half_paddle = PADDLE_HEIGHT >> 1;
 8000454:	230a      	movs	r3, #10
 8000456:	085b      	lsrs	r3, r3, #1
 8000458:	717b      	strb	r3, [r7, #5]
		 if(CPU_Y + half_paddle > ball_y) {
 800045a:	4b4f      	ldr	r3, [pc, #316]	@ (8000598 <Game_Pong+0x428>)
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	461a      	mov	r2, r3
 8000460:	797b      	ldrb	r3, [r7, #5]
 8000462:	4413      	add	r3, r2
 8000464:	4a49      	ldr	r2, [pc, #292]	@ (800058c <Game_Pong+0x41c>)
 8000466:	7812      	ldrb	r2, [r2, #0]
 8000468:	4293      	cmp	r3, r2
 800046a:	dd05      	ble.n	8000478 <Game_Pong+0x308>
			 CPU_Y -= 1;
 800046c:	4b4a      	ldr	r3, [pc, #296]	@ (8000598 <Game_Pong+0x428>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	3b01      	subs	r3, #1
 8000472:	b2da      	uxtb	r2, r3
 8000474:	4b48      	ldr	r3, [pc, #288]	@ (8000598 <Game_Pong+0x428>)
 8000476:	701a      	strb	r2, [r3, #0]
		 }
		 if(CPU_Y + half_paddle < ball_y) {
 8000478:	4b47      	ldr	r3, [pc, #284]	@ (8000598 <Game_Pong+0x428>)
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	461a      	mov	r2, r3
 800047e:	797b      	ldrb	r3, [r7, #5]
 8000480:	4413      	add	r3, r2
 8000482:	4a42      	ldr	r2, [pc, #264]	@ (800058c <Game_Pong+0x41c>)
 8000484:	7812      	ldrb	r2, [r2, #0]
 8000486:	4293      	cmp	r3, r2
 8000488:	da05      	bge.n	8000496 <Game_Pong+0x326>
			 CPU_Y += 1;
 800048a:	4b43      	ldr	r3, [pc, #268]	@ (8000598 <Game_Pong+0x428>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	3301      	adds	r3, #1
 8000490:	b2da      	uxtb	r2, r3
 8000492:	4b41      	ldr	r3, [pc, #260]	@ (8000598 <Game_Pong+0x428>)
 8000494:	701a      	strb	r2, [r3, #0]
		 }
		 if(CPU_Y < 1) CPU_Y = 1;
 8000496:	4b40      	ldr	r3, [pc, #256]	@ (8000598 <Game_Pong+0x428>)
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	2b00      	cmp	r3, #0
 800049c:	d102      	bne.n	80004a4 <Game_Pong+0x334>
 800049e:	4b3e      	ldr	r3, [pc, #248]	@ (8000598 <Game_Pong+0x428>)
 80004a0:	2201      	movs	r2, #1
 80004a2:	701a      	strb	r2, [r3, #0]
		 if(CPU_Y + PADDLE_HEIGHT > 63) CPU_Y = 63 - PADDLE_HEIGHT;
 80004a4:	4b3c      	ldr	r3, [pc, #240]	@ (8000598 <Game_Pong+0x428>)
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	461a      	mov	r2, r3
 80004aa:	230a      	movs	r3, #10
 80004ac:	4413      	add	r3, r2
 80004ae:	2b3f      	cmp	r3, #63	@ 0x3f
 80004b0:	dd05      	ble.n	80004be <Game_Pong+0x34e>
 80004b2:	230a      	movs	r3, #10
 80004b4:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 80004b8:	b2da      	uxtb	r2, r3
 80004ba:	4b37      	ldr	r3, [pc, #220]	@ (8000598 <Game_Pong+0x428>)
 80004bc:	701a      	strb	r2, [r3, #0]
		 ssd1306_Line(CPU_X, CPU_Y, CPU_X, CPU_Y + PADDLE_HEIGHT, White);
 80004be:	200c      	movs	r0, #12
 80004c0:	4b35      	ldr	r3, [pc, #212]	@ (8000598 <Game_Pong+0x428>)
 80004c2:	7819      	ldrb	r1, [r3, #0]
 80004c4:	240c      	movs	r4, #12
 80004c6:	4b34      	ldr	r3, [pc, #208]	@ (8000598 <Game_Pong+0x428>)
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	220a      	movs	r2, #10
 80004cc:	4413      	add	r3, r2
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	2201      	movs	r2, #1
 80004d2:	9200      	str	r2, [sp, #0]
 80004d4:	4622      	mov	r2, r4
 80004d6:	f000 fef7 	bl	80012c8 <ssd1306_Line>

		 ssd1306_Line(PLAYER_X, PLAYER_Y, PLAYER_X, PLAYER_Y + PADDLE_HEIGHT, Black);
 80004da:	2073      	movs	r0, #115	@ 0x73
 80004dc:	4b2f      	ldr	r3, [pc, #188]	@ (800059c <Game_Pong+0x42c>)
 80004de:	7819      	ldrb	r1, [r3, #0]
 80004e0:	2473      	movs	r4, #115	@ 0x73
 80004e2:	4b2e      	ldr	r3, [pc, #184]	@ (800059c <Game_Pong+0x42c>)
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	220a      	movs	r2, #10
 80004e8:	4413      	add	r3, r2
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	2200      	movs	r2, #0
 80004ee:	9200      	str	r2, [sp, #0]
 80004f0:	4622      	mov	r2, r4
 80004f2:	f000 fee9 	bl	80012c8 <ssd1306_Line>
		 if(up_state) {
 80004f6:	4b2a      	ldr	r3, [pc, #168]	@ (80005a0 <Game_Pong+0x430>)
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d005      	beq.n	800050a <Game_Pong+0x39a>
			 PLAYER_Y -= 1;
 80004fe:	4b27      	ldr	r3, [pc, #156]	@ (800059c <Game_Pong+0x42c>)
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	3b01      	subs	r3, #1
 8000504:	b2da      	uxtb	r2, r3
 8000506:	4b25      	ldr	r3, [pc, #148]	@ (800059c <Game_Pong+0x42c>)
 8000508:	701a      	strb	r2, [r3, #0]
		 }
		 if(down_state) {
 800050a:	4b26      	ldr	r3, [pc, #152]	@ (80005a4 <Game_Pong+0x434>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d005      	beq.n	800051e <Game_Pong+0x3ae>
			 PLAYER_Y += 1;
 8000512:	4b22      	ldr	r3, [pc, #136]	@ (800059c <Game_Pong+0x42c>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	3301      	adds	r3, #1
 8000518:	b2da      	uxtb	r2, r3
 800051a:	4b20      	ldr	r3, [pc, #128]	@ (800059c <Game_Pong+0x42c>)
 800051c:	701a      	strb	r2, [r3, #0]
		 }
		 up_state = down_state = 0;
 800051e:	4b21      	ldr	r3, [pc, #132]	@ (80005a4 <Game_Pong+0x434>)
 8000520:	2200      	movs	r2, #0
 8000522:	701a      	strb	r2, [r3, #0]
 8000524:	4b1f      	ldr	r3, [pc, #124]	@ (80005a4 <Game_Pong+0x434>)
 8000526:	781a      	ldrb	r2, [r3, #0]
 8000528:	4b1d      	ldr	r3, [pc, #116]	@ (80005a0 <Game_Pong+0x430>)
 800052a:	701a      	strb	r2, [r3, #0]
		 if(PLAYER_Y < 1) PLAYER_Y = 1;
 800052c:	4b1b      	ldr	r3, [pc, #108]	@ (800059c <Game_Pong+0x42c>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d102      	bne.n	800053a <Game_Pong+0x3ca>
 8000534:	4b19      	ldr	r3, [pc, #100]	@ (800059c <Game_Pong+0x42c>)
 8000536:	2201      	movs	r2, #1
 8000538:	701a      	strb	r2, [r3, #0]
		 if(PLAYER_Y + PADDLE_HEIGHT > 63) PLAYER_Y = 63 - PADDLE_HEIGHT;
 800053a:	4b18      	ldr	r3, [pc, #96]	@ (800059c <Game_Pong+0x42c>)
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	461a      	mov	r2, r3
 8000540:	230a      	movs	r3, #10
 8000542:	4413      	add	r3, r2
 8000544:	2b3f      	cmp	r3, #63	@ 0x3f
 8000546:	dd05      	ble.n	8000554 <Game_Pong+0x3e4>
 8000548:	230a      	movs	r3, #10
 800054a:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 800054e:	b2da      	uxtb	r2, r3
 8000550:	4b12      	ldr	r3, [pc, #72]	@ (800059c <Game_Pong+0x42c>)
 8000552:	701a      	strb	r2, [r3, #0]
		 ssd1306_Line(PLAYER_X, PLAYER_Y, PLAYER_X, PLAYER_Y + PADDLE_HEIGHT, White);
 8000554:	2073      	movs	r0, #115	@ 0x73
 8000556:	4b11      	ldr	r3, [pc, #68]	@ (800059c <Game_Pong+0x42c>)
 8000558:	7819      	ldrb	r1, [r3, #0]
 800055a:	2473      	movs	r4, #115	@ 0x73
 800055c:	4b0f      	ldr	r3, [pc, #60]	@ (800059c <Game_Pong+0x42c>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	220a      	movs	r2, #10
 8000562:	4413      	add	r3, r2
 8000564:	b2db      	uxtb	r3, r3
 8000566:	2201      	movs	r2, #1
 8000568:	9200      	str	r2, [sp, #0]
 800056a:	4622      	mov	r2, r4
 800056c:	f000 feac 	bl	80012c8 <ssd1306_Line>

		 update = 1;
 8000570:	2301      	movs	r3, #1
 8000572:	73fb      	strb	r3, [r7, #15]
	 }

	 if(update) {
 8000574:	7bfb      	ldrb	r3, [r7, #15]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <Game_Pong+0x40e>
		 ssd1306_UpdateScreen();
 800057a:	f000 fd5d 	bl	8001038 <ssd1306_UpdateScreen>
	 }
}
 800057e:	bf00      	nop
 8000580:	3714      	adds	r7, #20
 8000582:	46bd      	mov	sp, r7
 8000584:	bd90      	pop	{r4, r7, pc}
 8000586:	bf00      	nop
 8000588:	20000000 	.word	0x20000000
 800058c:	20000001 	.word	0x20000001
 8000590:	2000019c 	.word	0x2000019c
 8000594:	200001a0 	.word	0x200001a0
 8000598:	20000004 	.word	0x20000004
 800059c:	20000005 	.word	0x20000005
 80005a0:	200001b2 	.word	0x200001b2
 80005a4:	200001b3 	.word	0x200001b3

080005a8 <Wait_Update>:
/* Khi nhan nut len hoac xuong se bat choi lai tu dau
 * 	Co tac dung khi nguoi choi thua cuoc
 *
 * */
void Wait_Update(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	while(1)
	{
		if((HAL_GPIO_ReadPin(BT1_UP_GPIO_Port, BT1_UP_Pin) == 0) || (HAL_GPIO_ReadPin(BT3_DOW_GPIO_Port, BT3_DOW_Pin) == 0))
 80005ac:	2108      	movs	r1, #8
 80005ae:	480f      	ldr	r0, [pc, #60]	@ (80005ec <Wait_Update+0x44>)
 80005b0:	f001 fde8 	bl	8002184 <HAL_GPIO_ReadPin>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d006      	beq.n	80005c8 <Wait_Update+0x20>
 80005ba:	2120      	movs	r1, #32
 80005bc:	480b      	ldr	r0, [pc, #44]	@ (80005ec <Wait_Update+0x44>)
 80005be:	f001 fde1 	bl	8002184 <HAL_GPIO_ReadPin>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d1f1      	bne.n	80005ac <Wait_Update+0x4>
		{
			while((HAL_GPIO_ReadPin(BT1_UP_GPIO_Port, BT1_UP_Pin) == 0) || (HAL_GPIO_ReadPin(BT3_DOW_GPIO_Port, BT3_DOW_Pin) == 0));
 80005c8:	bf00      	nop
 80005ca:	2108      	movs	r1, #8
 80005cc:	4807      	ldr	r0, [pc, #28]	@ (80005ec <Wait_Update+0x44>)
 80005ce:	f001 fdd9 	bl	8002184 <HAL_GPIO_ReadPin>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d0f8      	beq.n	80005ca <Wait_Update+0x22>
 80005d8:	2120      	movs	r1, #32
 80005da:	4804      	ldr	r0, [pc, #16]	@ (80005ec <Wait_Update+0x44>)
 80005dc:	f001 fdd2 	bl	8002184 <HAL_GPIO_ReadPin>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d0f1      	beq.n	80005ca <Wait_Update+0x22>
			break;
		}
	}
}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40010800 	.word	0x40010800

080005f0 <Reset_Game_Pong>:

void Reset_Game_Pong(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	// Đặt lại vị trí của bóng ở giữa màn hình
	ball_x = SCREEN_WIDTH / 2 - BALL_SIZE / 2;
 80005f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000664 <Reset_Game_Pong+0x74>)
 80005f6:	223f      	movs	r2, #63	@ 0x3f
 80005f8:	701a      	strb	r2, [r3, #0]
	ball_y = SCREEN_HEIGHT / 2 - BALL_SIZE / 2;
 80005fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000668 <Reset_Game_Pong+0x78>)
 80005fc:	221f      	movs	r2, #31
 80005fe:	701a      	strb	r2, [r3, #0]

	// Đặt lại hướng bóng
	ball_dir_x = (rand() % 2 == 0) ? 1 : -1;
 8000600:	f003 f840 	bl	8003684 <rand>
 8000604:	4603      	mov	r3, r0
 8000606:	f003 0301 	and.w	r3, r3, #1
 800060a:	2b00      	cmp	r3, #0
 800060c:	d101      	bne.n	8000612 <Reset_Game_Pong+0x22>
 800060e:	2201      	movs	r2, #1
 8000610:	e000      	b.n	8000614 <Reset_Game_Pong+0x24>
 8000612:	22ff      	movs	r2, #255	@ 0xff
 8000614:	4b15      	ldr	r3, [pc, #84]	@ (800066c <Reset_Game_Pong+0x7c>)
 8000616:	701a      	strb	r2, [r3, #0]
	ball_dir_y = (rand() % 2 == 0) ? 1 : -1;
 8000618:	f003 f834 	bl	8003684 <rand>
 800061c:	4603      	mov	r3, r0
 800061e:	f003 0301 	and.w	r3, r3, #1
 8000622:	2b00      	cmp	r3, #0
 8000624:	d101      	bne.n	800062a <Reset_Game_Pong+0x3a>
 8000626:	2201      	movs	r2, #1
 8000628:	e000      	b.n	800062c <Reset_Game_Pong+0x3c>
 800062a:	22ff      	movs	r2, #255	@ 0xff
 800062c:	4b10      	ldr	r3, [pc, #64]	@ (8000670 <Reset_Game_Pong+0x80>)
 800062e:	701a      	strb	r2, [r3, #0]

	// Đặt lại vị trí của thanh truot danh bong
	CPU_Y = SCREEN_HEIGHT / 2 - PADDLE_HEIGHT / 2;
 8000630:	230a      	movs	r3, #10
 8000632:	085b      	lsrs	r3, r3, #1
 8000634:	b2db      	uxtb	r3, r3
 8000636:	f1c3 0320 	rsb	r3, r3, #32
 800063a:	b2da      	uxtb	r2, r3
 800063c:	4b0d      	ldr	r3, [pc, #52]	@ (8000674 <Reset_Game_Pong+0x84>)
 800063e:	701a      	strb	r2, [r3, #0]
	PLAYER_Y = SCREEN_HEIGHT / 2 - PADDLE_HEIGHT / 2;
 8000640:	230a      	movs	r3, #10
 8000642:	085b      	lsrs	r3, r3, #1
 8000644:	b2db      	uxtb	r3, r3
 8000646:	f1c3 0320 	rsb	r3, r3, #32
 800064a:	b2da      	uxtb	r2, r3
 800064c:	4b0a      	ldr	r3, [pc, #40]	@ (8000678 <Reset_Game_Pong+0x88>)
 800064e:	701a      	strb	r2, [r3, #0]

	// Xóa toàn bộ màn hình và vẽ lại sân chơi
	ssd1306_Fill(Black);
 8000650:	2000      	movs	r0, #0
 8000652:	f000 fcd9 	bl	8001008 <ssd1306_Fill>
	drawCourt();
 8000656:	f7ff fd79 	bl	800014c <drawCourt>
	ssd1306_UpdateScreen();
 800065a:	f000 fced 	bl	8001038 <ssd1306_UpdateScreen>
}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	20000000 	.word	0x20000000
 8000668:	20000001 	.word	0x20000001
 800066c:	20000002 	.word	0x20000002
 8000670:	20000003 	.word	0x20000003
 8000674:	20000004 	.word	0x20000004
 8000678:	20000005 	.word	0x20000005

0800067c <Mid_line>:

// Ke duong thang o giua
void Mid_line(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af02      	add	r7, sp, #8
	ssd1306_Line(64, 64, 64, 0, White);
 8000682:	2301      	movs	r3, #1
 8000684:	9300      	str	r3, [sp, #0]
 8000686:	2300      	movs	r3, #0
 8000688:	2240      	movs	r2, #64	@ 0x40
 800068a:	2140      	movs	r1, #64	@ 0x40
 800068c:	2040      	movs	r0, #64	@ 0x40
 800068e:	f000 fe1b 	bl	80012c8 <ssd1306_Line>
	ssd1306_UpdateScreen();
 8000692:	f000 fcd1 	bl	8001038 <ssd1306_UpdateScreen>
}
 8000696:	bf00      	nop
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}

0800069c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	unsigned long Start = HAL_GetTick();
 80006a2:	f000 ff3d 	bl	8001520 <HAL_GetTick>
 80006a6:	6078      	str	r0, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a8:	f000 fee2 	bl	8001470 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ac:	f000 f828 	bl	8000700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b0:	f000 f948 	bl	8000944 <MX_GPIO_Init>
  MX_DMA_Init();
 80006b4:	f000 f928 	bl	8000908 <MX_DMA_Init>
  MX_I2C1_Init();
 80006b8:	f000 f8ce 	bl	8000858 <MX_I2C1_Init>
  MX_ADC1_Init();
 80006bc:	f000 f870 	bl	80007a0 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 80006c0:	f000 f8f8 	bl	80008b4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 80006c4:	f000 fc36 	bl	8000f34 <ssd1306_Init>
  drawCourt();
 80006c8:	f7ff fd40 	bl	800014c <drawCourt>
  /*Sau 2s Bong moi xuat hien*/
  while(HAL_GetTick() - Start < 2000);
 80006cc:	bf00      	nop
 80006ce:	f000 ff27 	bl	8001520 <HAL_GetTick>
 80006d2:	4602      	mov	r2, r0
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	1ad3      	subs	r3, r2, r3
 80006d8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80006dc:	d3f7      	bcc.n	80006ce <main+0x32>
  ball_update = HAL_GetTick();
 80006de:	f000 ff1f 	bl	8001520 <HAL_GetTick>
 80006e2:	4603      	mov	r3, r0
 80006e4:	4a04      	ldr	r2, [pc, #16]	@ (80006f8 <main+0x5c>)
 80006e6:	6013      	str	r3, [r2, #0]
  paddle_update = ball_update;
 80006e8:	4b03      	ldr	r3, [pc, #12]	@ (80006f8 <main+0x5c>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a03      	ldr	r2, [pc, #12]	@ (80006fc <main+0x60>)
 80006ee:	6013      	str	r3, [r2, #0]
	  //Display_Select();
	  // Doc gia tri ADC
//	  snprintf(buffer_adc_x_right, sizeof(buffer_adc_x_right), "%d",Read_ADC[1]);
//	  snprintf(buffer_adc_y_right, sizeof(buffer_adc_y_right), "%d",Read_ADC[2]);
	  //Read_Buttons();
	 Game_Pong();
 80006f0:	f7ff fd3e 	bl	8000170 <Game_Pong>
 80006f4:	e7fc      	b.n	80006f0 <main+0x54>
 80006f6:	bf00      	nop
 80006f8:	2000019c 	.word	0x2000019c
 80006fc:	200001a0 	.word	0x200001a0

08000700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b094      	sub	sp, #80	@ 0x50
 8000704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000706:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800070a:	2228      	movs	r2, #40	@ 0x28
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f003 f935 	bl	800397e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000714:	f107 0314 	add.w	r3, r7, #20
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000730:	2302      	movs	r3, #2
 8000732:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000734:	2301      	movs	r3, #1
 8000736:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000738:	2310      	movs	r3, #16
 800073a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800073c:	2300      	movs	r3, #0
 800073e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000740:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000744:	4618      	mov	r0, r3
 8000746:	f002 f9f9 	bl	8002b3c <HAL_RCC_OscConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000750:	f000 f952 	bl	80009f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000754:	230f      	movs	r3, #15
 8000756:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000758:	2300      	movs	r3, #0
 800075a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f002 fc66 	bl	8003040 <HAL_RCC_ClockConfig>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800077a:	f000 f93d 	bl	80009f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800077e:	2302      	movs	r3, #2
 8000780:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	4618      	mov	r0, r3
 800078a:	f002 fde7 	bl	800335c <HAL_RCCEx_PeriphCLKConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000794:	f000 f930 	bl	80009f8 <Error_Handler>
  }
}
 8000798:	bf00      	nop
 800079a:	3750      	adds	r7, #80	@ 0x50
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007b0:	4b27      	ldr	r3, [pc, #156]	@ (8000850 <MX_ADC1_Init+0xb0>)
 80007b2:	4a28      	ldr	r2, [pc, #160]	@ (8000854 <MX_ADC1_Init+0xb4>)
 80007b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007b6:	4b26      	ldr	r3, [pc, #152]	@ (8000850 <MX_ADC1_Init+0xb0>)
 80007b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80007bc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007be:	4b24      	ldr	r3, [pc, #144]	@ (8000850 <MX_ADC1_Init+0xb0>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007c4:	4b22      	ldr	r3, [pc, #136]	@ (8000850 <MX_ADC1_Init+0xb0>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007ca:	4b21      	ldr	r3, [pc, #132]	@ (8000850 <MX_ADC1_Init+0xb0>)
 80007cc:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80007d0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000850 <MX_ADC1_Init+0xb0>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 80007d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000850 <MX_ADC1_Init+0xb0>)
 80007da:	2203      	movs	r2, #3
 80007dc:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007de:	481c      	ldr	r0, [pc, #112]	@ (8000850 <MX_ADC1_Init+0xb0>)
 80007e0:	f000 fecc 	bl	800157c <HAL_ADC_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80007ea:	f000 f905 	bl	80009f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80007ee:	2307      	movs	r3, #7
 80007f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007f2:	2301      	movs	r3, #1
 80007f4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80007f6:	2307      	movs	r3, #7
 80007f8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007fa:	1d3b      	adds	r3, r7, #4
 80007fc:	4619      	mov	r1, r3
 80007fe:	4814      	ldr	r0, [pc, #80]	@ (8000850 <MX_ADC1_Init+0xb0>)
 8000800:	f000 ff94 	bl	800172c <HAL_ADC_ConfigChannel>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800080a:	f000 f8f5 	bl	80009f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800080e:	2308      	movs	r3, #8
 8000810:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000812:	2302      	movs	r3, #2
 8000814:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	4619      	mov	r1, r3
 800081a:	480d      	ldr	r0, [pc, #52]	@ (8000850 <MX_ADC1_Init+0xb0>)
 800081c:	f000 ff86 	bl	800172c <HAL_ADC_ConfigChannel>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000826:	f000 f8e7 	bl	80009f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800082a:	2309      	movs	r3, #9
 800082c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800082e:	2303      	movs	r3, #3
 8000830:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	4619      	mov	r1, r3
 8000836:	4806      	ldr	r0, [pc, #24]	@ (8000850 <MX_ADC1_Init+0xb0>)
 8000838:	f000 ff78 	bl	800172c <HAL_ADC_ConfigChannel>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000842:	f000 f8d9 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	3710      	adds	r7, #16
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	2000008c 	.word	0x2000008c
 8000854:	40012400 	.word	0x40012400

08000858 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800085c:	4b12      	ldr	r3, [pc, #72]	@ (80008a8 <MX_I2C1_Init+0x50>)
 800085e:	4a13      	ldr	r2, [pc, #76]	@ (80008ac <MX_I2C1_Init+0x54>)
 8000860:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000862:	4b11      	ldr	r3, [pc, #68]	@ (80008a8 <MX_I2C1_Init+0x50>)
 8000864:	4a12      	ldr	r2, [pc, #72]	@ (80008b0 <MX_I2C1_Init+0x58>)
 8000866:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000868:	4b0f      	ldr	r3, [pc, #60]	@ (80008a8 <MX_I2C1_Init+0x50>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800086e:	4b0e      	ldr	r3, [pc, #56]	@ (80008a8 <MX_I2C1_Init+0x50>)
 8000870:	2200      	movs	r2, #0
 8000872:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000874:	4b0c      	ldr	r3, [pc, #48]	@ (80008a8 <MX_I2C1_Init+0x50>)
 8000876:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800087a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800087c:	4b0a      	ldr	r3, [pc, #40]	@ (80008a8 <MX_I2C1_Init+0x50>)
 800087e:	2200      	movs	r2, #0
 8000880:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000882:	4b09      	ldr	r3, [pc, #36]	@ (80008a8 <MX_I2C1_Init+0x50>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000888:	4b07      	ldr	r3, [pc, #28]	@ (80008a8 <MX_I2C1_Init+0x50>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800088e:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <MX_I2C1_Init+0x50>)
 8000890:	2200      	movs	r2, #0
 8000892:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000894:	4804      	ldr	r0, [pc, #16]	@ (80008a8 <MX_I2C1_Init+0x50>)
 8000896:	f001 fca5 	bl	80021e4 <HAL_I2C_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008a0:	f000 f8aa 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000100 	.word	0x20000100
 80008ac:	40005400 	.word	0x40005400
 80008b0:	00061a80 	.word	0x00061a80

080008b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008b8:	4b11      	ldr	r3, [pc, #68]	@ (8000900 <MX_USART3_UART_Init+0x4c>)
 80008ba:	4a12      	ldr	r2, [pc, #72]	@ (8000904 <MX_USART3_UART_Init+0x50>)
 80008bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008be:	4b10      	ldr	r3, [pc, #64]	@ (8000900 <MX_USART3_UART_Init+0x4c>)
 80008c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000900 <MX_USART3_UART_Init+0x4c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000900 <MX_USART3_UART_Init+0x4c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000900 <MX_USART3_UART_Init+0x4c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008d8:	4b09      	ldr	r3, [pc, #36]	@ (8000900 <MX_USART3_UART_Init+0x4c>)
 80008da:	220c      	movs	r2, #12
 80008dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008de:	4b08      	ldr	r3, [pc, #32]	@ (8000900 <MX_USART3_UART_Init+0x4c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e4:	4b06      	ldr	r3, [pc, #24]	@ (8000900 <MX_USART3_UART_Init+0x4c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008ea:	4805      	ldr	r0, [pc, #20]	@ (8000900 <MX_USART3_UART_Init+0x4c>)
 80008ec:	f002 fdec 	bl	80034c8 <HAL_UART_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80008f6:	f000 f87f 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000154 	.word	0x20000154
 8000904:	40004800 	.word	0x40004800

08000908 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800090e:	4b0c      	ldr	r3, [pc, #48]	@ (8000940 <MX_DMA_Init+0x38>)
 8000910:	695b      	ldr	r3, [r3, #20]
 8000912:	4a0b      	ldr	r2, [pc, #44]	@ (8000940 <MX_DMA_Init+0x38>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6153      	str	r3, [r2, #20]
 800091a:	4b09      	ldr	r3, [pc, #36]	@ (8000940 <MX_DMA_Init+0x38>)
 800091c:	695b      	ldr	r3, [r3, #20]
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000926:	2200      	movs	r2, #0
 8000928:	2100      	movs	r1, #0
 800092a:	200b      	movs	r0, #11
 800092c:	f001 f90f 	bl	8001b4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000930:	200b      	movs	r0, #11
 8000932:	f001 f928 	bl	8001b86 <HAL_NVIC_EnableIRQ>

}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40021000 	.word	0x40021000

08000944 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094a:	f107 0308 	add.w	r3, r7, #8
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000958:	4b24      	ldr	r3, [pc, #144]	@ (80009ec <MX_GPIO_Init+0xa8>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	4a23      	ldr	r2, [pc, #140]	@ (80009ec <MX_GPIO_Init+0xa8>)
 800095e:	f043 0304 	orr.w	r3, r3, #4
 8000962:	6193      	str	r3, [r2, #24]
 8000964:	4b21      	ldr	r3, [pc, #132]	@ (80009ec <MX_GPIO_Init+0xa8>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	f003 0304 	and.w	r3, r3, #4
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000970:	4b1e      	ldr	r3, [pc, #120]	@ (80009ec <MX_GPIO_Init+0xa8>)
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	4a1d      	ldr	r2, [pc, #116]	@ (80009ec <MX_GPIO_Init+0xa8>)
 8000976:	f043 0308 	orr.w	r3, r3, #8
 800097a:	6193      	str	r3, [r2, #24]
 800097c:	4b1b      	ldr	r3, [pc, #108]	@ (80009ec <MX_GPIO_Init+0xa8>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	f003 0308 	and.w	r3, r3, #8
 8000984:	603b      	str	r3, [r7, #0]
 8000986:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Test_GPIO_Port, LED_Test_Pin, GPIO_PIN_RESET);
 8000988:	2200      	movs	r2, #0
 800098a:	2104      	movs	r1, #4
 800098c:	4818      	ldr	r0, [pc, #96]	@ (80009f0 <MX_GPIO_Init+0xac>)
 800098e:	f001 fc10 	bl	80021b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Button_Joystick_Left_Pin BT1_UP_Pin BT4_L_Pin BT3_DOW_Pin
                           BT2_R_Pin BT7_DOWN_RIGHT_Pin BT6_R_Pin BT5_UP_RIGHT_Pin
                           Button_Joystick_Right_Pin */
  GPIO_InitStruct.Pin = Button_Joystick_Left_Pin|BT1_UP_Pin|BT4_L_Pin|BT3_DOW_Pin
 8000992:	f640 7379 	movw	r3, #3961	@ 0xf79
 8000996:	60bb      	str	r3, [r7, #8]
                          |BT2_R_Pin|BT7_DOWN_RIGHT_Pin|BT6_R_Pin|BT5_UP_RIGHT_Pin
                          |Button_Joystick_Right_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000998:	2300      	movs	r3, #0
 800099a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a0:	f107 0308 	add.w	r3, r7, #8
 80009a4:	4619      	mov	r1, r3
 80009a6:	4813      	ldr	r0, [pc, #76]	@ (80009f4 <MX_GPIO_Init+0xb0>)
 80009a8:	f001 fa68 	bl	8001e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Test_Pin */
  GPIO_InitStruct.Pin = LED_Test_Pin;
 80009ac:	2304      	movs	r3, #4
 80009ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b0:	2301      	movs	r3, #1
 80009b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2302      	movs	r3, #2
 80009ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_Test_GPIO_Port, &GPIO_InitStruct);
 80009bc:	f107 0308 	add.w	r3, r7, #8
 80009c0:	4619      	mov	r1, r3
 80009c2:	480b      	ldr	r0, [pc, #44]	@ (80009f0 <MX_GPIO_Init+0xac>)
 80009c4:	f001 fa5a 	bl	8001e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : BT11_BACK_Pin BT10_OK_Pin BT9_SELECT_Pin BT8_L_Pin */
  GPIO_InitStruct.Pin = BT11_BACK_Pin|BT10_OK_Pin|BT9_SELECT_Pin|BT8_L_Pin;
 80009c8:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80009cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d6:	f107 0308 	add.w	r3, r7, #8
 80009da:	4619      	mov	r1, r3
 80009dc:	4804      	ldr	r0, [pc, #16]	@ (80009f0 <MX_GPIO_Init+0xac>)
 80009de:	f001 fa4d 	bl	8001e7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009e2:	bf00      	nop
 80009e4:	3718      	adds	r7, #24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40021000 	.word	0x40021000
 80009f0:	40010c00 	.word	0x40010c00
 80009f4:	40010800 	.word	0x40010800

080009f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009fc:	b672      	cpsid	i
}
 80009fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <Error_Handler+0x8>

08000a04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a0a:	4b15      	ldr	r3, [pc, #84]	@ (8000a60 <HAL_MspInit+0x5c>)
 8000a0c:	699b      	ldr	r3, [r3, #24]
 8000a0e:	4a14      	ldr	r2, [pc, #80]	@ (8000a60 <HAL_MspInit+0x5c>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6193      	str	r3, [r2, #24]
 8000a16:	4b12      	ldr	r3, [pc, #72]	@ (8000a60 <HAL_MspInit+0x5c>)
 8000a18:	699b      	ldr	r3, [r3, #24]
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	60bb      	str	r3, [r7, #8]
 8000a20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a22:	4b0f      	ldr	r3, [pc, #60]	@ (8000a60 <HAL_MspInit+0x5c>)
 8000a24:	69db      	ldr	r3, [r3, #28]
 8000a26:	4a0e      	ldr	r2, [pc, #56]	@ (8000a60 <HAL_MspInit+0x5c>)
 8000a28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a2c:	61d3      	str	r3, [r2, #28]
 8000a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a60 <HAL_MspInit+0x5c>)
 8000a30:	69db      	ldr	r3, [r3, #28]
 8000a32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a64 <HAL_MspInit+0x60>)
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	4a04      	ldr	r2, [pc, #16]	@ (8000a64 <HAL_MspInit+0x60>)
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a56:	bf00      	nop
 8000a58:	3714      	adds	r7, #20
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr
 8000a60:	40021000 	.word	0x40021000
 8000a64:	40010000 	.word	0x40010000

08000a68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08a      	sub	sp, #40	@ 0x28
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a70:	f107 0318 	add.w	r3, r7, #24
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a33      	ldr	r2, [pc, #204]	@ (8000b50 <HAL_ADC_MspInit+0xe8>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d15f      	bne.n	8000b48 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a88:	4b32      	ldr	r3, [pc, #200]	@ (8000b54 <HAL_ADC_MspInit+0xec>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	4a31      	ldr	r2, [pc, #196]	@ (8000b54 <HAL_ADC_MspInit+0xec>)
 8000a8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a92:	6193      	str	r3, [r2, #24]
 8000a94:	4b2f      	ldr	r3, [pc, #188]	@ (8000b54 <HAL_ADC_MspInit+0xec>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000a9c:	617b      	str	r3, [r7, #20]
 8000a9e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa0:	4b2c      	ldr	r3, [pc, #176]	@ (8000b54 <HAL_ADC_MspInit+0xec>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	4a2b      	ldr	r2, [pc, #172]	@ (8000b54 <HAL_ADC_MspInit+0xec>)
 8000aa6:	f043 0304 	orr.w	r3, r3, #4
 8000aaa:	6193      	str	r3, [r2, #24]
 8000aac:	4b29      	ldr	r3, [pc, #164]	@ (8000b54 <HAL_ADC_MspInit+0xec>)
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	f003 0304 	and.w	r3, r3, #4
 8000ab4:	613b      	str	r3, [r7, #16]
 8000ab6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab8:	4b26      	ldr	r3, [pc, #152]	@ (8000b54 <HAL_ADC_MspInit+0xec>)
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	4a25      	ldr	r2, [pc, #148]	@ (8000b54 <HAL_ADC_MspInit+0xec>)
 8000abe:	f043 0308 	orr.w	r3, r3, #8
 8000ac2:	6193      	str	r3, [r2, #24]
 8000ac4:	4b23      	ldr	r3, [pc, #140]	@ (8000b54 <HAL_ADC_MspInit+0xec>)
 8000ac6:	699b      	ldr	r3, [r3, #24]
 8000ac8:	f003 0308 	and.w	r3, r3, #8
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = Joystick_Y_L_Pin|Joystick_Y_R_Pin|GPIO_PIN_7;
 8000ad0:	2386      	movs	r3, #134	@ 0x86
 8000ad2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad8:	f107 0318 	add.w	r3, r7, #24
 8000adc:	4619      	mov	r1, r3
 8000ade:	481e      	ldr	r0, [pc, #120]	@ (8000b58 <HAL_ADC_MspInit+0xf0>)
 8000ae0:	f001 f9cc 	bl	8001e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Joystick_X_R_Pin|Joystick_Y_RB1_Pin;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aec:	f107 0318 	add.w	r3, r7, #24
 8000af0:	4619      	mov	r1, r3
 8000af2:	481a      	ldr	r0, [pc, #104]	@ (8000b5c <HAL_ADC_MspInit+0xf4>)
 8000af4:	f001 f9c2 	bl	8001e7c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000af8:	4b19      	ldr	r3, [pc, #100]	@ (8000b60 <HAL_ADC_MspInit+0xf8>)
 8000afa:	4a1a      	ldr	r2, [pc, #104]	@ (8000b64 <HAL_ADC_MspInit+0xfc>)
 8000afc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000afe:	4b18      	ldr	r3, [pc, #96]	@ (8000b60 <HAL_ADC_MspInit+0xf8>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b04:	4b16      	ldr	r3, [pc, #88]	@ (8000b60 <HAL_ADC_MspInit+0xf8>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b0a:	4b15      	ldr	r3, [pc, #84]	@ (8000b60 <HAL_ADC_MspInit+0xf8>)
 8000b0c:	2280      	movs	r2, #128	@ 0x80
 8000b0e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b10:	4b13      	ldr	r3, [pc, #76]	@ (8000b60 <HAL_ADC_MspInit+0xf8>)
 8000b12:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b16:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b18:	4b11      	ldr	r3, [pc, #68]	@ (8000b60 <HAL_ADC_MspInit+0xf8>)
 8000b1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b1e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b20:	4b0f      	ldr	r3, [pc, #60]	@ (8000b60 <HAL_ADC_MspInit+0xf8>)
 8000b22:	2220      	movs	r2, #32
 8000b24:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b26:	4b0e      	ldr	r3, [pc, #56]	@ (8000b60 <HAL_ADC_MspInit+0xf8>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b2c:	480c      	ldr	r0, [pc, #48]	@ (8000b60 <HAL_ADC_MspInit+0xf8>)
 8000b2e:	f001 f845 	bl	8001bbc <HAL_DMA_Init>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8000b38:	f7ff ff5e 	bl	80009f8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4a08      	ldr	r2, [pc, #32]	@ (8000b60 <HAL_ADC_MspInit+0xf8>)
 8000b40:	621a      	str	r2, [r3, #32]
 8000b42:	4a07      	ldr	r2, [pc, #28]	@ (8000b60 <HAL_ADC_MspInit+0xf8>)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b48:	bf00      	nop
 8000b4a:	3728      	adds	r7, #40	@ 0x28
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40012400 	.word	0x40012400
 8000b54:	40021000 	.word	0x40021000
 8000b58:	40010800 	.word	0x40010800
 8000b5c:	40010c00 	.word	0x40010c00
 8000b60:	200000bc 	.word	0x200000bc
 8000b64:	40020008 	.word	0x40020008

08000b68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b088      	sub	sp, #32
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 0310 	add.w	r3, r7, #16
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a15      	ldr	r2, [pc, #84]	@ (8000bd8 <HAL_I2C_MspInit+0x70>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d123      	bne.n	8000bd0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b88:	4b14      	ldr	r3, [pc, #80]	@ (8000bdc <HAL_I2C_MspInit+0x74>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	4a13      	ldr	r2, [pc, #76]	@ (8000bdc <HAL_I2C_MspInit+0x74>)
 8000b8e:	f043 0308 	orr.w	r3, r3, #8
 8000b92:	6193      	str	r3, [r2, #24]
 8000b94:	4b11      	ldr	r3, [pc, #68]	@ (8000bdc <HAL_I2C_MspInit+0x74>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	f003 0308 	and.w	r3, r3, #8
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ba0:	23c0      	movs	r3, #192	@ 0xc0
 8000ba2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ba4:	2312      	movs	r3, #18
 8000ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ba8:	2303      	movs	r3, #3
 8000baa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bac:	f107 0310 	add.w	r3, r7, #16
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	480b      	ldr	r0, [pc, #44]	@ (8000be0 <HAL_I2C_MspInit+0x78>)
 8000bb4:	f001 f962 	bl	8001e7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bb8:	4b08      	ldr	r3, [pc, #32]	@ (8000bdc <HAL_I2C_MspInit+0x74>)
 8000bba:	69db      	ldr	r3, [r3, #28]
 8000bbc:	4a07      	ldr	r2, [pc, #28]	@ (8000bdc <HAL_I2C_MspInit+0x74>)
 8000bbe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bc2:	61d3      	str	r3, [r2, #28]
 8000bc4:	4b05      	ldr	r3, [pc, #20]	@ (8000bdc <HAL_I2C_MspInit+0x74>)
 8000bc6:	69db      	ldr	r3, [r3, #28]
 8000bc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bcc:	60bb      	str	r3, [r7, #8]
 8000bce:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bd0:	bf00      	nop
 8000bd2:	3720      	adds	r7, #32
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40005400 	.word	0x40005400
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	40010c00 	.word	0x40010c00

08000be4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b088      	sub	sp, #32
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0310 	add.w	r3, r7, #16
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a1c      	ldr	r2, [pc, #112]	@ (8000c70 <HAL_UART_MspInit+0x8c>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d131      	bne.n	8000c68 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c04:	4b1b      	ldr	r3, [pc, #108]	@ (8000c74 <HAL_UART_MspInit+0x90>)
 8000c06:	69db      	ldr	r3, [r3, #28]
 8000c08:	4a1a      	ldr	r2, [pc, #104]	@ (8000c74 <HAL_UART_MspInit+0x90>)
 8000c0a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c0e:	61d3      	str	r3, [r2, #28]
 8000c10:	4b18      	ldr	r3, [pc, #96]	@ (8000c74 <HAL_UART_MspInit+0x90>)
 8000c12:	69db      	ldr	r3, [r3, #28]
 8000c14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1c:	4b15      	ldr	r3, [pc, #84]	@ (8000c74 <HAL_UART_MspInit+0x90>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	4a14      	ldr	r2, [pc, #80]	@ (8000c74 <HAL_UART_MspInit+0x90>)
 8000c22:	f043 0308 	orr.w	r3, r3, #8
 8000c26:	6193      	str	r3, [r2, #24]
 8000c28:	4b12      	ldr	r3, [pc, #72]	@ (8000c74 <HAL_UART_MspInit+0x90>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	f003 0308 	and.w	r3, r3, #8
 8000c30:	60bb      	str	r3, [r7, #8]
 8000c32:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = RX_Pin;
 8000c34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RX_GPIO_Port, &GPIO_InitStruct);
 8000c42:	f107 0310 	add.w	r3, r7, #16
 8000c46:	4619      	mov	r1, r3
 8000c48:	480b      	ldr	r0, [pc, #44]	@ (8000c78 <HAL_UART_MspInit+0x94>)
 8000c4a:	f001 f917 	bl	8001e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TX_Pin;
 8000c4e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000c52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 8000c5c:	f107 0310 	add.w	r3, r7, #16
 8000c60:	4619      	mov	r1, r3
 8000c62:	4805      	ldr	r0, [pc, #20]	@ (8000c78 <HAL_UART_MspInit+0x94>)
 8000c64:	f001 f90a 	bl	8001e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c68:	bf00      	nop
 8000c6a:	3720      	adds	r7, #32
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40004800 	.word	0x40004800
 8000c74:	40021000 	.word	0x40021000
 8000c78:	40010c00 	.word	0x40010c00

08000c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <NMI_Handler+0x4>

08000c84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <HardFault_Handler+0x4>

08000c8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <MemManage_Handler+0x4>

08000c94 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <BusFault_Handler+0x4>

08000c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca0:	bf00      	nop
 8000ca2:	e7fd      	b.n	8000ca0 <UsageFault_Handler+0x4>

08000ca4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc80      	pop	{r7}
 8000cae:	4770      	bx	lr

08000cb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bc80      	pop	{r7}
 8000cba:	4770      	bx	lr

08000cbc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr

08000cc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ccc:	f000 fc16 	bl	80014fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000cd8:	4802      	ldr	r0, [pc, #8]	@ (8000ce4 <DMA1_Channel1_IRQHandler+0x10>)
 8000cda:	f000 ffc9 	bl	8001c70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	200000bc 	.word	0x200000bc

08000ce8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  return 1;
 8000cec:	2301      	movs	r3, #1
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bc80      	pop	{r7}
 8000cf4:	4770      	bx	lr

08000cf6 <_kill>:

int _kill(int pid, int sig)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b082      	sub	sp, #8
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
 8000cfe:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000d00:	f002 fe8c 	bl	8003a1c <__errno>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2216      	movs	r2, #22
 8000d08:	601a      	str	r2, [r3, #0]
  return -1;
 8000d0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <_exit>:

void _exit (int status)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b082      	sub	sp, #8
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000d1e:	f04f 31ff 	mov.w	r1, #4294967295
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f7ff ffe7 	bl	8000cf6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000d28:	bf00      	nop
 8000d2a:	e7fd      	b.n	8000d28 <_exit+0x12>

08000d2c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]
 8000d3c:	e00a      	b.n	8000d54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d3e:	f3af 8000 	nop.w
 8000d42:	4601      	mov	r1, r0
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	1c5a      	adds	r2, r3, #1
 8000d48:	60ba      	str	r2, [r7, #8]
 8000d4a:	b2ca      	uxtb	r2, r1
 8000d4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	3301      	adds	r3, #1
 8000d52:	617b      	str	r3, [r7, #20]
 8000d54:	697a      	ldr	r2, [r7, #20]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	dbf0      	blt.n	8000d3e <_read+0x12>
  }

  return len;
 8000d5c:	687b      	ldr	r3, [r7, #4]
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3718      	adds	r7, #24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b086      	sub	sp, #24
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	60f8      	str	r0, [r7, #12]
 8000d6e:	60b9      	str	r1, [r7, #8]
 8000d70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d72:	2300      	movs	r3, #0
 8000d74:	617b      	str	r3, [r7, #20]
 8000d76:	e009      	b.n	8000d8c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	1c5a      	adds	r2, r3, #1
 8000d7c:	60ba      	str	r2, [r7, #8]
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	617b      	str	r3, [r7, #20]
 8000d8c:	697a      	ldr	r2, [r7, #20]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	dbf1      	blt.n	8000d78 <_write+0x12>
  }
  return len;
 8000d94:	687b      	ldr	r3, [r7, #4]
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3718      	adds	r7, #24
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <_close>:

int _close(int file)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	b083      	sub	sp, #12
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000da6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr

08000db4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000dc4:	605a      	str	r2, [r3, #4]
  return 0;
 8000dc6:	2300      	movs	r3, #0
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bc80      	pop	{r7}
 8000dd0:	4770      	bx	lr

08000dd2 <_isatty>:

int _isatty(int file)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	b083      	sub	sp, #12
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dda:	2301      	movs	r3, #1
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bc80      	pop	{r7}
 8000de4:	4770      	bx	lr

08000de6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000de6:	b480      	push	{r7}
 8000de8:	b085      	sub	sp, #20
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	60f8      	str	r0, [r7, #12]
 8000dee:	60b9      	str	r1, [r7, #8]
 8000df0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000df2:	2300      	movs	r3, #0
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3714      	adds	r7, #20
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bc80      	pop	{r7}
 8000dfc:	4770      	bx	lr
	...

08000e00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e08:	4a14      	ldr	r2, [pc, #80]	@ (8000e5c <_sbrk+0x5c>)
 8000e0a:	4b15      	ldr	r3, [pc, #84]	@ (8000e60 <_sbrk+0x60>)
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e14:	4b13      	ldr	r3, [pc, #76]	@ (8000e64 <_sbrk+0x64>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d102      	bne.n	8000e22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e1c:	4b11      	ldr	r3, [pc, #68]	@ (8000e64 <_sbrk+0x64>)
 8000e1e:	4a12      	ldr	r2, [pc, #72]	@ (8000e68 <_sbrk+0x68>)
 8000e20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e22:	4b10      	ldr	r3, [pc, #64]	@ (8000e64 <_sbrk+0x64>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4413      	add	r3, r2
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d207      	bcs.n	8000e40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e30:	f002 fdf4 	bl	8003a1c <__errno>
 8000e34:	4603      	mov	r3, r0
 8000e36:	220c      	movs	r2, #12
 8000e38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3e:	e009      	b.n	8000e54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e40:	4b08      	ldr	r3, [pc, #32]	@ (8000e64 <_sbrk+0x64>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e46:	4b07      	ldr	r3, [pc, #28]	@ (8000e64 <_sbrk+0x64>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	4a05      	ldr	r2, [pc, #20]	@ (8000e64 <_sbrk+0x64>)
 8000e50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e52:	68fb      	ldr	r3, [r7, #12]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3718      	adds	r7, #24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20005000 	.word	0x20005000
 8000e60:	00000400 	.word	0x00000400
 8000e64:	200001b4 	.word	0x200001b4
 8000e68:	20000710 	.word	0x20000710

08000e6c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr

08000e78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e78:	f7ff fff8 	bl	8000e6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e7c:	480b      	ldr	r0, [pc, #44]	@ (8000eac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e7e:	490c      	ldr	r1, [pc, #48]	@ (8000eb0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e80:	4a0c      	ldr	r2, [pc, #48]	@ (8000eb4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e84:	e002      	b.n	8000e8c <LoopCopyDataInit>

08000e86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e8a:	3304      	adds	r3, #4

08000e8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e90:	d3f9      	bcc.n	8000e86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e92:	4a09      	ldr	r2, [pc, #36]	@ (8000eb8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e94:	4c09      	ldr	r4, [pc, #36]	@ (8000ebc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e98:	e001      	b.n	8000e9e <LoopFillZerobss>

08000e9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e9c:	3204      	adds	r2, #4

08000e9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea0:	d3fb      	bcc.n	8000e9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ea2:	f002 fdc1 	bl	8003a28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ea6:	f7ff fbf9 	bl	800069c <main>
  bx lr
 8000eaa:	4770      	bx	lr
  ldr r0, =_sdata
 8000eac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000eb4:	080058e4 	.word	0x080058e4
  ldr r2, =_sbss
 8000eb8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ebc:	20000710 	.word	0x20000710

08000ec0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ec0:	e7fe      	b.n	8000ec0 <ADC1_2_IRQHandler>

08000ec2 <ssd1306_Reset>:
#define SSD1306_SET_VERTICAL_SCROLL_AREA             0xA3 // Set scroll range

#define SSD1306_NORMALDISPLAY       0xA6
#define SSD1306_INVERTDISPLAY       0xA7

void ssd1306_Reset(void) {
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000ec6:	bf00      	nop
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bc80      	pop	{r7}
 8000ecc:	4770      	bx	lr
	...

08000ed0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af04      	add	r7, sp, #16
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000eda:	f04f 33ff 	mov.w	r3, #4294967295
 8000ede:	9302      	str	r3, [sp, #8]
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	9301      	str	r3, [sp, #4]
 8000ee4:	1dfb      	adds	r3, r7, #7
 8000ee6:	9300      	str	r3, [sp, #0]
 8000ee8:	2301      	movs	r3, #1
 8000eea:	2200      	movs	r2, #0
 8000eec:	2178      	movs	r1, #120	@ 0x78
 8000eee:	4803      	ldr	r0, [pc, #12]	@ (8000efc <ssd1306_WriteCommand+0x2c>)
 8000ef0:	f001 fabc 	bl	800246c <HAL_I2C_Mem_Write>
}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000100 	.word	0x20000100

08000f00 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af04      	add	r7, sp, #16
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f12:	9202      	str	r2, [sp, #8]
 8000f14:	9301      	str	r3, [sp, #4]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	2240      	movs	r2, #64	@ 0x40
 8000f1e:	2178      	movs	r1, #120	@ 0x78
 8000f20:	4803      	ldr	r0, [pc, #12]	@ (8000f30 <ssd1306_WriteData+0x30>)
 8000f22:	f001 faa3 	bl	800246c <HAL_I2C_Mem_Write>
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000100 	.word	0x20000100

08000f34 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000f38:	f7ff ffc3 	bl	8000ec2 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000f3c:	2064      	movs	r0, #100	@ 0x64
 8000f3e:	f000 faf9 	bl	8001534 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000f42:	2000      	movs	r0, #0
 8000f44:	f000 fa76 	bl	8001434 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000f48:	2020      	movs	r0, #32
 8000f4a:	f7ff ffc1 	bl	8000ed0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f7ff ffbe 	bl	8000ed0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000f54:	20b0      	movs	r0, #176	@ 0xb0
 8000f56:	f7ff ffbb 	bl	8000ed0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000f5a:	20c8      	movs	r0, #200	@ 0xc8
 8000f5c:	f7ff ffb8 	bl	8000ed0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000f60:	2000      	movs	r0, #0
 8000f62:	f7ff ffb5 	bl	8000ed0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000f66:	2010      	movs	r0, #16
 8000f68:	f7ff ffb2 	bl	8000ed0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000f6c:	2040      	movs	r0, #64	@ 0x40
 8000f6e:	f7ff ffaf 	bl	8000ed0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000f72:	20ff      	movs	r0, #255	@ 0xff
 8000f74:	f000 fa4b 	bl	800140e <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000f78:	20a1      	movs	r0, #161	@ 0xa1
 8000f7a:	f7ff ffa9 	bl	8000ed0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000f7e:	20a6      	movs	r0, #166	@ 0xa6
 8000f80:	f7ff ffa6 	bl	8000ed0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000f84:	20a8      	movs	r0, #168	@ 0xa8
 8000f86:	f7ff ffa3 	bl	8000ed0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000f8a:	203f      	movs	r0, #63	@ 0x3f
 8000f8c:	f7ff ffa0 	bl	8000ed0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000f90:	20a4      	movs	r0, #164	@ 0xa4
 8000f92:	f7ff ff9d 	bl	8000ed0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000f96:	20d3      	movs	r0, #211	@ 0xd3
 8000f98:	f7ff ff9a 	bl	8000ed0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000f9c:	2000      	movs	r0, #0
 8000f9e:	f7ff ff97 	bl	8000ed0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000fa2:	20d5      	movs	r0, #213	@ 0xd5
 8000fa4:	f7ff ff94 	bl	8000ed0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000fa8:	20f0      	movs	r0, #240	@ 0xf0
 8000faa:	f7ff ff91 	bl	8000ed0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000fae:	20d9      	movs	r0, #217	@ 0xd9
 8000fb0:	f7ff ff8e 	bl	8000ed0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000fb4:	2022      	movs	r0, #34	@ 0x22
 8000fb6:	f7ff ff8b 	bl	8000ed0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000fba:	20da      	movs	r0, #218	@ 0xda
 8000fbc:	f7ff ff88 	bl	8000ed0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000fc0:	2012      	movs	r0, #18
 8000fc2:	f7ff ff85 	bl	8000ed0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000fc6:	20db      	movs	r0, #219	@ 0xdb
 8000fc8:	f7ff ff82 	bl	8000ed0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000fcc:	2020      	movs	r0, #32
 8000fce:	f7ff ff7f 	bl	8000ed0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000fd2:	208d      	movs	r0, #141	@ 0x8d
 8000fd4:	f7ff ff7c 	bl	8000ed0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000fd8:	2014      	movs	r0, #20
 8000fda:	f7ff ff79 	bl	8000ed0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000fde:	2001      	movs	r0, #1
 8000fe0:	f000 fa28 	bl	8001434 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	f000 f80f 	bl	8001008 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000fea:	f000 f825 	bl	8001038 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000fee:	4b05      	ldr	r3, [pc, #20]	@ (8001004 <ssd1306_Init+0xd0>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000ff4:	4b03      	ldr	r3, [pc, #12]	@ (8001004 <ssd1306_Init+0xd0>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000ffa:	4b02      	ldr	r3, [pc, #8]	@ (8001004 <ssd1306_Init+0xd0>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	711a      	strb	r2, [r3, #4]
}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}
 8001004:	200005b8 	.word	0x200005b8

08001008 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d101      	bne.n	800101c <ssd1306_Fill+0x14>
 8001018:	2300      	movs	r3, #0
 800101a:	e000      	b.n	800101e <ssd1306_Fill+0x16>
 800101c:	23ff      	movs	r3, #255	@ 0xff
 800101e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001022:	4619      	mov	r1, r3
 8001024:	4803      	ldr	r0, [pc, #12]	@ (8001034 <ssd1306_Fill+0x2c>)
 8001026:	f002 fcaa 	bl	800397e <memset>
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	200001b8 	.word	0x200001b8

08001038 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800103e:	2300      	movs	r3, #0
 8001040:	71fb      	strb	r3, [r7, #7]
 8001042:	e016      	b.n	8001072 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	3b50      	subs	r3, #80	@ 0x50
 8001048:	b2db      	uxtb	r3, r3
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff ff40 	bl	8000ed0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001050:	2000      	movs	r0, #0
 8001052:	f7ff ff3d 	bl	8000ed0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001056:	2010      	movs	r0, #16
 8001058:	f7ff ff3a 	bl	8000ed0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	01db      	lsls	r3, r3, #7
 8001060:	4a08      	ldr	r2, [pc, #32]	@ (8001084 <ssd1306_UpdateScreen+0x4c>)
 8001062:	4413      	add	r3, r2
 8001064:	2180      	movs	r1, #128	@ 0x80
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff ff4a 	bl	8000f00 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	3301      	adds	r3, #1
 8001070:	71fb      	strb	r3, [r7, #7]
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	2b07      	cmp	r3, #7
 8001076:	d9e5      	bls.n	8001044 <ssd1306_UpdateScreen+0xc>
    }
}
 8001078:	bf00      	nop
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	200001b8 	.word	0x200001b8

08001088 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
 8001092:	460b      	mov	r3, r1
 8001094:	71bb      	strb	r3, [r7, #6]
 8001096:	4613      	mov	r3, r2
 8001098:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800109a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	db3d      	blt.n	800111e <ssd1306_DrawPixel+0x96>
 80010a2:	79bb      	ldrb	r3, [r7, #6]
 80010a4:	2b3f      	cmp	r3, #63	@ 0x3f
 80010a6:	d83a      	bhi.n	800111e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80010a8:	797b      	ldrb	r3, [r7, #5]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d11a      	bne.n	80010e4 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80010ae:	79fa      	ldrb	r2, [r7, #7]
 80010b0:	79bb      	ldrb	r3, [r7, #6]
 80010b2:	08db      	lsrs	r3, r3, #3
 80010b4:	b2d8      	uxtb	r0, r3
 80010b6:	4603      	mov	r3, r0
 80010b8:	01db      	lsls	r3, r3, #7
 80010ba:	4413      	add	r3, r2
 80010bc:	4a1a      	ldr	r2, [pc, #104]	@ (8001128 <ssd1306_DrawPixel+0xa0>)
 80010be:	5cd3      	ldrb	r3, [r2, r3]
 80010c0:	b25a      	sxtb	r2, r3
 80010c2:	79bb      	ldrb	r3, [r7, #6]
 80010c4:	f003 0307 	and.w	r3, r3, #7
 80010c8:	2101      	movs	r1, #1
 80010ca:	fa01 f303 	lsl.w	r3, r1, r3
 80010ce:	b25b      	sxtb	r3, r3
 80010d0:	4313      	orrs	r3, r2
 80010d2:	b259      	sxtb	r1, r3
 80010d4:	79fa      	ldrb	r2, [r7, #7]
 80010d6:	4603      	mov	r3, r0
 80010d8:	01db      	lsls	r3, r3, #7
 80010da:	4413      	add	r3, r2
 80010dc:	b2c9      	uxtb	r1, r1
 80010de:	4a12      	ldr	r2, [pc, #72]	@ (8001128 <ssd1306_DrawPixel+0xa0>)
 80010e0:	54d1      	strb	r1, [r2, r3]
 80010e2:	e01d      	b.n	8001120 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80010e4:	79fa      	ldrb	r2, [r7, #7]
 80010e6:	79bb      	ldrb	r3, [r7, #6]
 80010e8:	08db      	lsrs	r3, r3, #3
 80010ea:	b2d8      	uxtb	r0, r3
 80010ec:	4603      	mov	r3, r0
 80010ee:	01db      	lsls	r3, r3, #7
 80010f0:	4413      	add	r3, r2
 80010f2:	4a0d      	ldr	r2, [pc, #52]	@ (8001128 <ssd1306_DrawPixel+0xa0>)
 80010f4:	5cd3      	ldrb	r3, [r2, r3]
 80010f6:	b25a      	sxtb	r2, r3
 80010f8:	79bb      	ldrb	r3, [r7, #6]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	2101      	movs	r1, #1
 8001100:	fa01 f303 	lsl.w	r3, r1, r3
 8001104:	b25b      	sxtb	r3, r3
 8001106:	43db      	mvns	r3, r3
 8001108:	b25b      	sxtb	r3, r3
 800110a:	4013      	ands	r3, r2
 800110c:	b259      	sxtb	r1, r3
 800110e:	79fa      	ldrb	r2, [r7, #7]
 8001110:	4603      	mov	r3, r0
 8001112:	01db      	lsls	r3, r3, #7
 8001114:	4413      	add	r3, r2
 8001116:	b2c9      	uxtb	r1, r1
 8001118:	4a03      	ldr	r2, [pc, #12]	@ (8001128 <ssd1306_DrawPixel+0xa0>)
 800111a:	54d1      	strb	r1, [r2, r3]
 800111c:	e000      	b.n	8001120 <ssd1306_DrawPixel+0x98>
        return;
 800111e:	bf00      	nop
    }
}
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr
 8001128:	200001b8 	.word	0x200001b8

0800112c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800112c:	b590      	push	{r4, r7, lr}
 800112e:	b089      	sub	sp, #36	@ 0x24
 8001130:	af00      	add	r7, sp, #0
 8001132:	4604      	mov	r4, r0
 8001134:	4638      	mov	r0, r7
 8001136:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800113a:	4623      	mov	r3, r4
 800113c:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800113e:	7bfb      	ldrb	r3, [r7, #15]
 8001140:	2b1f      	cmp	r3, #31
 8001142:	d902      	bls.n	800114a <ssd1306_WriteChar+0x1e>
 8001144:	7bfb      	ldrb	r3, [r7, #15]
 8001146:	2b7e      	cmp	r3, #126	@ 0x7e
 8001148:	d901      	bls.n	800114e <ssd1306_WriteChar+0x22>
        return 0;
 800114a:	2300      	movs	r3, #0
 800114c:	e077      	b.n	800123e <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800114e:	4b3e      	ldr	r3, [pc, #248]	@ (8001248 <ssd1306_WriteChar+0x11c>)
 8001150:	881b      	ldrh	r3, [r3, #0]
 8001152:	461a      	mov	r2, r3
 8001154:	783b      	ldrb	r3, [r7, #0]
 8001156:	4413      	add	r3, r2
 8001158:	2b80      	cmp	r3, #128	@ 0x80
 800115a:	dc06      	bgt.n	800116a <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 800115c:	4b3a      	ldr	r3, [pc, #232]	@ (8001248 <ssd1306_WriteChar+0x11c>)
 800115e:	885b      	ldrh	r3, [r3, #2]
 8001160:	461a      	mov	r2, r3
 8001162:	787b      	ldrb	r3, [r7, #1]
 8001164:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001166:	2b40      	cmp	r3, #64	@ 0x40
 8001168:	dd01      	ble.n	800116e <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 800116a:	2300      	movs	r3, #0
 800116c:	e067      	b.n	800123e <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 800116e:	2300      	movs	r3, #0
 8001170:	61fb      	str	r3, [r7, #28]
 8001172:	e04e      	b.n	8001212 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	3b20      	subs	r3, #32
 800117a:	7879      	ldrb	r1, [r7, #1]
 800117c:	fb01 f303 	mul.w	r3, r1, r3
 8001180:	4619      	mov	r1, r3
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	440b      	add	r3, r1
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	4413      	add	r3, r2
 800118a:	881b      	ldrh	r3, [r3, #0]
 800118c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 800118e:	2300      	movs	r3, #0
 8001190:	61bb      	str	r3, [r7, #24]
 8001192:	e036      	b.n	8001202 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8001194:	697a      	ldr	r2, [r7, #20]
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d013      	beq.n	80011cc <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80011a4:	4b28      	ldr	r3, [pc, #160]	@ (8001248 <ssd1306_WriteChar+0x11c>)
 80011a6:	881b      	ldrh	r3, [r3, #0]
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	4413      	add	r3, r2
 80011b0:	b2d8      	uxtb	r0, r3
 80011b2:	4b25      	ldr	r3, [pc, #148]	@ (8001248 <ssd1306_WriteChar+0x11c>)
 80011b4:	885b      	ldrh	r3, [r3, #2]
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	4413      	add	r3, r2
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80011c4:	4619      	mov	r1, r3
 80011c6:	f7ff ff5f 	bl	8001088 <ssd1306_DrawPixel>
 80011ca:	e017      	b.n	80011fc <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80011cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001248 <ssd1306_WriteChar+0x11c>)
 80011ce:	881b      	ldrh	r3, [r3, #0]
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	4413      	add	r3, r2
 80011d8:	b2d8      	uxtb	r0, r3
 80011da:	4b1b      	ldr	r3, [pc, #108]	@ (8001248 <ssd1306_WriteChar+0x11c>)
 80011dc:	885b      	ldrh	r3, [r3, #2]
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	4413      	add	r3, r2
 80011e6:	b2d9      	uxtb	r1, r3
 80011e8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	bf0c      	ite	eq
 80011f0:	2301      	moveq	r3, #1
 80011f2:	2300      	movne	r3, #0
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	461a      	mov	r2, r3
 80011f8:	f7ff ff46 	bl	8001088 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	3301      	adds	r3, #1
 8001200:	61bb      	str	r3, [r7, #24]
 8001202:	783b      	ldrb	r3, [r7, #0]
 8001204:	461a      	mov	r2, r3
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	4293      	cmp	r3, r2
 800120a:	d3c3      	bcc.n	8001194 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	3301      	adds	r3, #1
 8001210:	61fb      	str	r3, [r7, #28]
 8001212:	787b      	ldrb	r3, [r7, #1]
 8001214:	461a      	mov	r2, r3
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	4293      	cmp	r3, r2
 800121a:	d3ab      	bcc.n	8001174 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 800121c:	4b0a      	ldr	r3, [pc, #40]	@ (8001248 <ssd1306_WriteChar+0x11c>)
 800121e:	881b      	ldrh	r3, [r3, #0]
 8001220:	68ba      	ldr	r2, [r7, #8]
 8001222:	2a00      	cmp	r2, #0
 8001224:	d005      	beq.n	8001232 <ssd1306_WriteChar+0x106>
 8001226:	68b9      	ldr	r1, [r7, #8]
 8001228:	7bfa      	ldrb	r2, [r7, #15]
 800122a:	3a20      	subs	r2, #32
 800122c:	440a      	add	r2, r1
 800122e:	7812      	ldrb	r2, [r2, #0]
 8001230:	e000      	b.n	8001234 <ssd1306_WriteChar+0x108>
 8001232:	783a      	ldrb	r2, [r7, #0]
 8001234:	4413      	add	r3, r2
 8001236:	b29a      	uxth	r2, r3
 8001238:	4b03      	ldr	r3, [pc, #12]	@ (8001248 <ssd1306_WriteChar+0x11c>)
 800123a:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800123c:	7bfb      	ldrb	r3, [r7, #15]
}
 800123e:	4618      	mov	r0, r3
 8001240:	3724      	adds	r7, #36	@ 0x24
 8001242:	46bd      	mov	sp, r7
 8001244:	bd90      	pop	{r4, r7, pc}
 8001246:	bf00      	nop
 8001248:	200005b8 	.word	0x200005b8

0800124c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af02      	add	r7, sp, #8
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	4638      	mov	r0, r7
 8001256:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 800125a:	e013      	b.n	8001284 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	7818      	ldrb	r0, [r3, #0]
 8001260:	7e3b      	ldrb	r3, [r7, #24]
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	463b      	mov	r3, r7
 8001266:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001268:	f7ff ff60 	bl	800112c <ssd1306_WriteChar>
 800126c:	4603      	mov	r3, r0
 800126e:	461a      	mov	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	429a      	cmp	r2, r3
 8001276:	d002      	beq.n	800127e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	e008      	b.n	8001290 <ssd1306_WriteString+0x44>
        }
        str++;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	3301      	adds	r3, #1
 8001282:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d1e7      	bne.n	800125c <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	781b      	ldrb	r3, [r3, #0]
}
 8001290:	4618      	mov	r0, r3
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	460a      	mov	r2, r1
 80012a2:	71fb      	strb	r3, [r7, #7]
 80012a4:	4613      	mov	r3, r2
 80012a6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	4b05      	ldr	r3, [pc, #20]	@ (80012c4 <ssd1306_SetCursor+0x2c>)
 80012ae:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80012b0:	79bb      	ldrb	r3, [r7, #6]
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	4b03      	ldr	r3, [pc, #12]	@ (80012c4 <ssd1306_SetCursor+0x2c>)
 80012b6:	805a      	strh	r2, [r3, #2]
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	bc80      	pop	{r7}
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	200005b8 	.word	0x200005b8

080012c8 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80012c8:	b590      	push	{r4, r7, lr}
 80012ca:	b089      	sub	sp, #36	@ 0x24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4604      	mov	r4, r0
 80012d0:	4608      	mov	r0, r1
 80012d2:	4611      	mov	r1, r2
 80012d4:	461a      	mov	r2, r3
 80012d6:	4623      	mov	r3, r4
 80012d8:	71fb      	strb	r3, [r7, #7]
 80012da:	4603      	mov	r3, r0
 80012dc:	71bb      	strb	r3, [r7, #6]
 80012de:	460b      	mov	r3, r1
 80012e0:	717b      	strb	r3, [r7, #5]
 80012e2:	4613      	mov	r3, r2
 80012e4:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 80012e6:	797a      	ldrb	r2, [r7, #5]
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	bfb8      	it	lt
 80012f0:	425b      	neglt	r3, r3
 80012f2:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 80012f4:	793a      	ldrb	r2, [r7, #4]
 80012f6:	79bb      	ldrb	r3, [r7, #6]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	bfb8      	it	lt
 80012fe:	425b      	neglt	r3, r3
 8001300:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8001302:	79fa      	ldrb	r2, [r7, #7]
 8001304:	797b      	ldrb	r3, [r7, #5]
 8001306:	429a      	cmp	r2, r3
 8001308:	d201      	bcs.n	800130e <ssd1306_Line+0x46>
 800130a:	2301      	movs	r3, #1
 800130c:	e001      	b.n	8001312 <ssd1306_Line+0x4a>
 800130e:	f04f 33ff 	mov.w	r3, #4294967295
 8001312:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8001314:	79ba      	ldrb	r2, [r7, #6]
 8001316:	793b      	ldrb	r3, [r7, #4]
 8001318:	429a      	cmp	r2, r3
 800131a:	d201      	bcs.n	8001320 <ssd1306_Line+0x58>
 800131c:	2301      	movs	r3, #1
 800131e:	e001      	b.n	8001324 <ssd1306_Line+0x5c>
 8001320:	f04f 33ff 	mov.w	r3, #4294967295
 8001324:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 800132e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001332:	7939      	ldrb	r1, [r7, #4]
 8001334:	797b      	ldrb	r3, [r7, #5]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff fea6 	bl	8001088 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 800133c:	e024      	b.n	8001388 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 800133e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001342:	79b9      	ldrb	r1, [r7, #6]
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff fe9e 	bl	8001088 <ssd1306_DrawPixel>
        error2 = error * 2;
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	425b      	negs	r3, r3
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	429a      	cmp	r2, r3
 800135a:	dd08      	ble.n	800136e <ssd1306_Line+0xa6>
            error -= deltaY;
 800135c:	69fa      	ldr	r2, [r7, #28]
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	b2da      	uxtb	r2, r3
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	4413      	add	r3, r2
 800136c:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 800136e:	68ba      	ldr	r2, [r7, #8]
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	429a      	cmp	r2, r3
 8001374:	da08      	bge.n	8001388 <ssd1306_Line+0xc0>
            error += deltaX;
 8001376:	69fa      	ldr	r2, [r7, #28]
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	4413      	add	r3, r2
 800137c:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	b2da      	uxtb	r2, r3
 8001382:	79bb      	ldrb	r3, [r7, #6]
 8001384:	4413      	add	r3, r2
 8001386:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8001388:	79fa      	ldrb	r2, [r7, #7]
 800138a:	797b      	ldrb	r3, [r7, #5]
 800138c:	429a      	cmp	r2, r3
 800138e:	d1d6      	bne.n	800133e <ssd1306_Line+0x76>
 8001390:	79ba      	ldrb	r2, [r7, #6]
 8001392:	793b      	ldrb	r3, [r7, #4]
 8001394:	429a      	cmp	r2, r3
 8001396:	d1d2      	bne.n	800133e <ssd1306_Line+0x76>
        }
    }
    return;
 8001398:	bf00      	nop
}
 800139a:	3724      	adds	r7, #36	@ 0x24
 800139c:	46bd      	mov	sp, r7
 800139e:	bd90      	pop	{r4, r7, pc}

080013a0 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80013a0:	b590      	push	{r4, r7, lr}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af02      	add	r7, sp, #8
 80013a6:	4604      	mov	r4, r0
 80013a8:	4608      	mov	r0, r1
 80013aa:	4611      	mov	r1, r2
 80013ac:	461a      	mov	r2, r3
 80013ae:	4623      	mov	r3, r4
 80013b0:	71fb      	strb	r3, [r7, #7]
 80013b2:	4603      	mov	r3, r0
 80013b4:	71bb      	strb	r3, [r7, #6]
 80013b6:	460b      	mov	r3, r1
 80013b8:	717b      	strb	r3, [r7, #5]
 80013ba:	4613      	mov	r3, r2
 80013bc:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 80013be:	79bc      	ldrb	r4, [r7, #6]
 80013c0:	797a      	ldrb	r2, [r7, #5]
 80013c2:	79b9      	ldrb	r1, [r7, #6]
 80013c4:	79f8      	ldrb	r0, [r7, #7]
 80013c6:	7e3b      	ldrb	r3, [r7, #24]
 80013c8:	9300      	str	r3, [sp, #0]
 80013ca:	4623      	mov	r3, r4
 80013cc:	f7ff ff7c 	bl	80012c8 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 80013d0:	793c      	ldrb	r4, [r7, #4]
 80013d2:	797a      	ldrb	r2, [r7, #5]
 80013d4:	79b9      	ldrb	r1, [r7, #6]
 80013d6:	7978      	ldrb	r0, [r7, #5]
 80013d8:	7e3b      	ldrb	r3, [r7, #24]
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	4623      	mov	r3, r4
 80013de:	f7ff ff73 	bl	80012c8 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 80013e2:	793c      	ldrb	r4, [r7, #4]
 80013e4:	79fa      	ldrb	r2, [r7, #7]
 80013e6:	7939      	ldrb	r1, [r7, #4]
 80013e8:	7978      	ldrb	r0, [r7, #5]
 80013ea:	7e3b      	ldrb	r3, [r7, #24]
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	4623      	mov	r3, r4
 80013f0:	f7ff ff6a 	bl	80012c8 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 80013f4:	79bc      	ldrb	r4, [r7, #6]
 80013f6:	79fa      	ldrb	r2, [r7, #7]
 80013f8:	7939      	ldrb	r1, [r7, #4]
 80013fa:	79f8      	ldrb	r0, [r7, #7]
 80013fc:	7e3b      	ldrb	r3, [r7, #24]
 80013fe:	9300      	str	r3, [sp, #0]
 8001400:	4623      	mov	r3, r4
 8001402:	f7ff ff61 	bl	80012c8 <ssd1306_Line>

    return;
 8001406:	bf00      	nop
}
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	bd90      	pop	{r4, r7, pc}

0800140e <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800140e:	b580      	push	{r7, lr}
 8001410:	b084      	sub	sp, #16
 8001412:	af00      	add	r7, sp, #0
 8001414:	4603      	mov	r3, r0
 8001416:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001418:	2381      	movs	r3, #129	@ 0x81
 800141a:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800141c:	7bfb      	ldrb	r3, [r7, #15]
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff fd56 	bl	8000ed0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff fd52 	bl	8000ed0 <ssd1306_WriteCommand>
}
 800142c:	bf00      	nop
 800142e:	3710      	adds	r7, #16
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d005      	beq.n	8001450 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001444:	23af      	movs	r3, #175	@ 0xaf
 8001446:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001448:	4b08      	ldr	r3, [pc, #32]	@ (800146c <ssd1306_SetDisplayOn+0x38>)
 800144a:	2201      	movs	r2, #1
 800144c:	715a      	strb	r2, [r3, #5]
 800144e:	e004      	b.n	800145a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001450:	23ae      	movs	r3, #174	@ 0xae
 8001452:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001454:	4b05      	ldr	r3, [pc, #20]	@ (800146c <ssd1306_SetDisplayOn+0x38>)
 8001456:	2200      	movs	r2, #0
 8001458:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800145a:	7bfb      	ldrb	r3, [r7, #15]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff fd37 	bl	8000ed0 <ssd1306_WriteCommand>
}
 8001462:	bf00      	nop
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	200005b8 	.word	0x200005b8

08001470 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001474:	4b08      	ldr	r3, [pc, #32]	@ (8001498 <HAL_Init+0x28>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a07      	ldr	r2, [pc, #28]	@ (8001498 <HAL_Init+0x28>)
 800147a:	f043 0310 	orr.w	r3, r3, #16
 800147e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001480:	2003      	movs	r0, #3
 8001482:	f000 fb59 	bl	8001b38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001486:	200f      	movs	r0, #15
 8001488:	f000 f808 	bl	800149c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800148c:	f7ff faba 	bl	8000a04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40022000 	.word	0x40022000

0800149c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014a4:	4b12      	ldr	r3, [pc, #72]	@ (80014f0 <HAL_InitTick+0x54>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	4b12      	ldr	r3, [pc, #72]	@ (80014f4 <HAL_InitTick+0x58>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	4619      	mov	r1, r3
 80014ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ba:	4618      	mov	r0, r3
 80014bc:	f000 fb71 	bl	8001ba2 <HAL_SYSTICK_Config>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e00e      	b.n	80014e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2b0f      	cmp	r3, #15
 80014ce:	d80a      	bhi.n	80014e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014d0:	2200      	movs	r2, #0
 80014d2:	6879      	ldr	r1, [r7, #4]
 80014d4:	f04f 30ff 	mov.w	r0, #4294967295
 80014d8:	f000 fb39 	bl	8001b4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014dc:	4a06      	ldr	r2, [pc, #24]	@ (80014f8 <HAL_InitTick+0x5c>)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014e2:	2300      	movs	r3, #0
 80014e4:	e000      	b.n	80014e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000008 	.word	0x20000008
 80014f4:	20000010 	.word	0x20000010
 80014f8:	2000000c 	.word	0x2000000c

080014fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001500:	4b05      	ldr	r3, [pc, #20]	@ (8001518 <HAL_IncTick+0x1c>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	461a      	mov	r2, r3
 8001506:	4b05      	ldr	r3, [pc, #20]	@ (800151c <HAL_IncTick+0x20>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4413      	add	r3, r2
 800150c:	4a03      	ldr	r2, [pc, #12]	@ (800151c <HAL_IncTick+0x20>)
 800150e:	6013      	str	r3, [r2, #0]
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr
 8001518:	20000010 	.word	0x20000010
 800151c:	200005c0 	.word	0x200005c0

08001520 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  return uwTick;
 8001524:	4b02      	ldr	r3, [pc, #8]	@ (8001530 <HAL_GetTick+0x10>)
 8001526:	681b      	ldr	r3, [r3, #0]
}
 8001528:	4618      	mov	r0, r3
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr
 8001530:	200005c0 	.word	0x200005c0

08001534 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800153c:	f7ff fff0 	bl	8001520 <HAL_GetTick>
 8001540:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800154c:	d005      	beq.n	800155a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800154e:	4b0a      	ldr	r3, [pc, #40]	@ (8001578 <HAL_Delay+0x44>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	461a      	mov	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4413      	add	r3, r2
 8001558:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800155a:	bf00      	nop
 800155c:	f7ff ffe0 	bl	8001520 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	429a      	cmp	r2, r3
 800156a:	d8f7      	bhi.n	800155c <HAL_Delay+0x28>
  {
  }
}
 800156c:	bf00      	nop
 800156e:	bf00      	nop
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000010 	.word	0x20000010

0800157c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001584:	2300      	movs	r3, #0
 8001586:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001588:	2300      	movs	r3, #0
 800158a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800158c:	2300      	movs	r3, #0
 800158e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001590:	2300      	movs	r3, #0
 8001592:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d101      	bne.n	800159e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e0be      	b.n	800171c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d109      	bne.n	80015c0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7ff fa54 	bl	8000a68 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f000 f9ab 	bl	800191c <ADC_ConversionStop_Disable>
 80015c6:	4603      	mov	r3, r0
 80015c8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ce:	f003 0310 	and.w	r3, r3, #16
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f040 8099 	bne.w	800170a <HAL_ADC_Init+0x18e>
 80015d8:	7dfb      	ldrb	r3, [r7, #23]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f040 8095 	bne.w	800170a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015e4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80015e8:	f023 0302 	bic.w	r3, r3, #2
 80015ec:	f043 0202 	orr.w	r2, r3, #2
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80015fc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	7b1b      	ldrb	r3, [r3, #12]
 8001602:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001604:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001606:	68ba      	ldr	r2, [r7, #8]
 8001608:	4313      	orrs	r3, r2
 800160a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001614:	d003      	beq.n	800161e <HAL_ADC_Init+0xa2>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d102      	bne.n	8001624 <HAL_ADC_Init+0xa8>
 800161e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001622:	e000      	b.n	8001626 <HAL_ADC_Init+0xaa>
 8001624:	2300      	movs	r3, #0
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	4313      	orrs	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	7d1b      	ldrb	r3, [r3, #20]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d119      	bne.n	8001668 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	7b1b      	ldrb	r3, [r3, #12]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d109      	bne.n	8001650 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	3b01      	subs	r3, #1
 8001642:	035a      	lsls	r2, r3, #13
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	4313      	orrs	r3, r2
 8001648:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800164c:	613b      	str	r3, [r7, #16]
 800164e:	e00b      	b.n	8001668 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001654:	f043 0220 	orr.w	r2, r3, #32
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001660:	f043 0201 	orr.w	r2, r3, #1
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	430a      	orrs	r2, r1
 800167a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	689a      	ldr	r2, [r3, #8]
 8001682:	4b28      	ldr	r3, [pc, #160]	@ (8001724 <HAL_ADC_Init+0x1a8>)
 8001684:	4013      	ands	r3, r2
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	6812      	ldr	r2, [r2, #0]
 800168a:	68b9      	ldr	r1, [r7, #8]
 800168c:	430b      	orrs	r3, r1
 800168e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001698:	d003      	beq.n	80016a2 <HAL_ADC_Init+0x126>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d104      	bne.n	80016ac <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	691b      	ldr	r3, [r3, #16]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	051b      	lsls	r3, r3, #20
 80016aa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016b2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	430a      	orrs	r2, r1
 80016be:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	689a      	ldr	r2, [r3, #8]
 80016c6:	4b18      	ldr	r3, [pc, #96]	@ (8001728 <HAL_ADC_Init+0x1ac>)
 80016c8:	4013      	ands	r3, r2
 80016ca:	68ba      	ldr	r2, [r7, #8]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d10b      	bne.n	80016e8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016da:	f023 0303 	bic.w	r3, r3, #3
 80016de:	f043 0201 	orr.w	r2, r3, #1
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016e6:	e018      	b.n	800171a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ec:	f023 0312 	bic.w	r3, r3, #18
 80016f0:	f043 0210 	orr.w	r2, r3, #16
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016fc:	f043 0201 	orr.w	r2, r3, #1
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001708:	e007      	b.n	800171a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800170e:	f043 0210 	orr.w	r2, r3, #16
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800171a:	7dfb      	ldrb	r3, [r7, #23]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3718      	adds	r7, #24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	ffe1f7fd 	.word	0xffe1f7fd
 8001728:	ff1f0efe 	.word	0xff1f0efe

0800172c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001736:	2300      	movs	r3, #0
 8001738:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800173a:	2300      	movs	r3, #0
 800173c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001744:	2b01      	cmp	r3, #1
 8001746:	d101      	bne.n	800174c <HAL_ADC_ConfigChannel+0x20>
 8001748:	2302      	movs	r3, #2
 800174a:	e0dc      	b.n	8001906 <HAL_ADC_ConfigChannel+0x1da>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2201      	movs	r2, #1
 8001750:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b06      	cmp	r3, #6
 800175a:	d81c      	bhi.n	8001796 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685a      	ldr	r2, [r3, #4]
 8001766:	4613      	mov	r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	4413      	add	r3, r2
 800176c:	3b05      	subs	r3, #5
 800176e:	221f      	movs	r2, #31
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	43db      	mvns	r3, r3
 8001776:	4019      	ands	r1, r3
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	6818      	ldr	r0, [r3, #0]
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	4613      	mov	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	3b05      	subs	r3, #5
 8001788:	fa00 f203 	lsl.w	r2, r0, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	430a      	orrs	r2, r1
 8001792:	635a      	str	r2, [r3, #52]	@ 0x34
 8001794:	e03c      	b.n	8001810 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2b0c      	cmp	r3, #12
 800179c:	d81c      	bhi.n	80017d8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685a      	ldr	r2, [r3, #4]
 80017a8:	4613      	mov	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	4413      	add	r3, r2
 80017ae:	3b23      	subs	r3, #35	@ 0x23
 80017b0:	221f      	movs	r2, #31
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43db      	mvns	r3, r3
 80017b8:	4019      	ands	r1, r3
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	6818      	ldr	r0, [r3, #0]
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685a      	ldr	r2, [r3, #4]
 80017c2:	4613      	mov	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	3b23      	subs	r3, #35	@ 0x23
 80017ca:	fa00 f203 	lsl.w	r2, r0, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	430a      	orrs	r2, r1
 80017d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80017d6:	e01b      	b.n	8001810 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685a      	ldr	r2, [r3, #4]
 80017e2:	4613      	mov	r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	4413      	add	r3, r2
 80017e8:	3b41      	subs	r3, #65	@ 0x41
 80017ea:	221f      	movs	r2, #31
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	4019      	ands	r1, r3
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	6818      	ldr	r0, [r3, #0]
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685a      	ldr	r2, [r3, #4]
 80017fc:	4613      	mov	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	3b41      	subs	r3, #65	@ 0x41
 8001804:	fa00 f203 	lsl.w	r2, r0, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	430a      	orrs	r2, r1
 800180e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b09      	cmp	r3, #9
 8001816:	d91c      	bls.n	8001852 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	68d9      	ldr	r1, [r3, #12]
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	4613      	mov	r3, r2
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	4413      	add	r3, r2
 8001828:	3b1e      	subs	r3, #30
 800182a:	2207      	movs	r2, #7
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43db      	mvns	r3, r3
 8001832:	4019      	ands	r1, r3
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	6898      	ldr	r0, [r3, #8]
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	4613      	mov	r3, r2
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	4413      	add	r3, r2
 8001842:	3b1e      	subs	r3, #30
 8001844:	fa00 f203 	lsl.w	r2, r0, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	430a      	orrs	r2, r1
 800184e:	60da      	str	r2, [r3, #12]
 8001850:	e019      	b.n	8001886 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	6919      	ldr	r1, [r3, #16]
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	4613      	mov	r3, r2
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	4413      	add	r3, r2
 8001862:	2207      	movs	r2, #7
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	4019      	ands	r1, r3
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	6898      	ldr	r0, [r3, #8]
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	4613      	mov	r3, r2
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	4413      	add	r3, r2
 800187a:	fa00 f203 	lsl.w	r2, r0, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	430a      	orrs	r2, r1
 8001884:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2b10      	cmp	r3, #16
 800188c:	d003      	beq.n	8001896 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001892:	2b11      	cmp	r3, #17
 8001894:	d132      	bne.n	80018fc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a1d      	ldr	r2, [pc, #116]	@ (8001910 <HAL_ADC_ConfigChannel+0x1e4>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d125      	bne.n	80018ec <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d126      	bne.n	80018fc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80018bc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2b10      	cmp	r3, #16
 80018c4:	d11a      	bne.n	80018fc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018c6:	4b13      	ldr	r3, [pc, #76]	@ (8001914 <HAL_ADC_ConfigChannel+0x1e8>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a13      	ldr	r2, [pc, #76]	@ (8001918 <HAL_ADC_ConfigChannel+0x1ec>)
 80018cc:	fba2 2303 	umull	r2, r3, r2, r3
 80018d0:	0c9a      	lsrs	r2, r3, #18
 80018d2:	4613      	mov	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4413      	add	r3, r2
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018dc:	e002      	b.n	80018e4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	3b01      	subs	r3, #1
 80018e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f9      	bne.n	80018de <HAL_ADC_ConfigChannel+0x1b2>
 80018ea:	e007      	b.n	80018fc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018f0:	f043 0220 	orr.w	r2, r3, #32
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001904:	7bfb      	ldrb	r3, [r7, #15]
}
 8001906:	4618      	mov	r0, r3
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr
 8001910:	40012400 	.word	0x40012400
 8001914:	20000008 	.word	0x20000008
 8001918:	431bde83 	.word	0x431bde83

0800191c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001924:	2300      	movs	r3, #0
 8001926:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	2b01      	cmp	r3, #1
 8001934:	d12e      	bne.n	8001994 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	689a      	ldr	r2, [r3, #8]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f022 0201 	bic.w	r2, r2, #1
 8001944:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001946:	f7ff fdeb 	bl	8001520 <HAL_GetTick>
 800194a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800194c:	e01b      	b.n	8001986 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800194e:	f7ff fde7 	bl	8001520 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d914      	bls.n	8001986 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b01      	cmp	r3, #1
 8001968:	d10d      	bne.n	8001986 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800196e:	f043 0210 	orr.w	r2, r3, #16
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800197a:	f043 0201 	orr.w	r2, r3, #1
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e007      	b.n	8001996 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	2b01      	cmp	r3, #1
 8001992:	d0dc      	beq.n	800194e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
	...

080019a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019b0:	4b0c      	ldr	r3, [pc, #48]	@ (80019e4 <__NVIC_SetPriorityGrouping+0x44>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019b6:	68ba      	ldr	r2, [r7, #8]
 80019b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019bc:	4013      	ands	r3, r2
 80019be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019d2:	4a04      	ldr	r2, [pc, #16]	@ (80019e4 <__NVIC_SetPriorityGrouping+0x44>)
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	60d3      	str	r3, [r2, #12]
}
 80019d8:	bf00      	nop
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	bc80      	pop	{r7}
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019ec:	4b04      	ldr	r3, [pc, #16]	@ (8001a00 <__NVIC_GetPriorityGrouping+0x18>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	0a1b      	lsrs	r3, r3, #8
 80019f2:	f003 0307 	and.w	r3, r3, #7
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bc80      	pop	{r7}
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	e000ed00 	.word	0xe000ed00

08001a04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	db0b      	blt.n	8001a2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	f003 021f 	and.w	r2, r3, #31
 8001a1c:	4906      	ldr	r1, [pc, #24]	@ (8001a38 <__NVIC_EnableIRQ+0x34>)
 8001a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a22:	095b      	lsrs	r3, r3, #5
 8001a24:	2001      	movs	r0, #1
 8001a26:	fa00 f202 	lsl.w	r2, r0, r2
 8001a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr
 8001a38:	e000e100 	.word	0xe000e100

08001a3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	6039      	str	r1, [r7, #0]
 8001a46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	db0a      	blt.n	8001a66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	b2da      	uxtb	r2, r3
 8001a54:	490c      	ldr	r1, [pc, #48]	@ (8001a88 <__NVIC_SetPriority+0x4c>)
 8001a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5a:	0112      	lsls	r2, r2, #4
 8001a5c:	b2d2      	uxtb	r2, r2
 8001a5e:	440b      	add	r3, r1
 8001a60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a64:	e00a      	b.n	8001a7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	b2da      	uxtb	r2, r3
 8001a6a:	4908      	ldr	r1, [pc, #32]	@ (8001a8c <__NVIC_SetPriority+0x50>)
 8001a6c:	79fb      	ldrb	r3, [r7, #7]
 8001a6e:	f003 030f 	and.w	r3, r3, #15
 8001a72:	3b04      	subs	r3, #4
 8001a74:	0112      	lsls	r2, r2, #4
 8001a76:	b2d2      	uxtb	r2, r2
 8001a78:	440b      	add	r3, r1
 8001a7a:	761a      	strb	r2, [r3, #24]
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bc80      	pop	{r7}
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	e000e100 	.word	0xe000e100
 8001a8c:	e000ed00 	.word	0xe000ed00

08001a90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b089      	sub	sp, #36	@ 0x24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	f1c3 0307 	rsb	r3, r3, #7
 8001aaa:	2b04      	cmp	r3, #4
 8001aac:	bf28      	it	cs
 8001aae:	2304      	movcs	r3, #4
 8001ab0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	3304      	adds	r3, #4
 8001ab6:	2b06      	cmp	r3, #6
 8001ab8:	d902      	bls.n	8001ac0 <NVIC_EncodePriority+0x30>
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	3b03      	subs	r3, #3
 8001abe:	e000      	b.n	8001ac2 <NVIC_EncodePriority+0x32>
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	43da      	mvns	r2, r3
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	401a      	ands	r2, r3
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae2:	43d9      	mvns	r1, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae8:	4313      	orrs	r3, r2
         );
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3724      	adds	r7, #36	@ 0x24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr

08001af4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b04:	d301      	bcc.n	8001b0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b06:	2301      	movs	r3, #1
 8001b08:	e00f      	b.n	8001b2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b34 <SysTick_Config+0x40>)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b12:	210f      	movs	r1, #15
 8001b14:	f04f 30ff 	mov.w	r0, #4294967295
 8001b18:	f7ff ff90 	bl	8001a3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b1c:	4b05      	ldr	r3, [pc, #20]	@ (8001b34 <SysTick_Config+0x40>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b22:	4b04      	ldr	r3, [pc, #16]	@ (8001b34 <SysTick_Config+0x40>)
 8001b24:	2207      	movs	r2, #7
 8001b26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	e000e010 	.word	0xe000e010

08001b38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f7ff ff2d 	bl	80019a0 <__NVIC_SetPriorityGrouping>
}
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b086      	sub	sp, #24
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	4603      	mov	r3, r0
 8001b56:	60b9      	str	r1, [r7, #8]
 8001b58:	607a      	str	r2, [r7, #4]
 8001b5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b60:	f7ff ff42 	bl	80019e8 <__NVIC_GetPriorityGrouping>
 8001b64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	68b9      	ldr	r1, [r7, #8]
 8001b6a:	6978      	ldr	r0, [r7, #20]
 8001b6c:	f7ff ff90 	bl	8001a90 <NVIC_EncodePriority>
 8001b70:	4602      	mov	r2, r0
 8001b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b76:	4611      	mov	r1, r2
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff ff5f 	bl	8001a3c <__NVIC_SetPriority>
}
 8001b7e:	bf00      	nop
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff ff35 	bl	8001a04 <__NVIC_EnableIRQ>
}
 8001b9a:	bf00      	nop
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff ffa2 	bl	8001af4 <SysTick_Config>
 8001bb0:	4603      	mov	r3, r0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
	...

08001bbc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e043      	b.n	8001c5a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	4b22      	ldr	r3, [pc, #136]	@ (8001c64 <HAL_DMA_Init+0xa8>)
 8001bda:	4413      	add	r3, r2
 8001bdc:	4a22      	ldr	r2, [pc, #136]	@ (8001c68 <HAL_DMA_Init+0xac>)
 8001bde:	fba2 2303 	umull	r2, r3, r2, r3
 8001be2:	091b      	lsrs	r3, r3, #4
 8001be4:	009a      	lsls	r2, r3, #2
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a1f      	ldr	r2, [pc, #124]	@ (8001c6c <HAL_DMA_Init+0xb0>)
 8001bee:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001c06:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001c0a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001c14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3714      	adds	r7, #20
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr
 8001c64:	bffdfff8 	.word	0xbffdfff8
 8001c68:	cccccccd 	.word	0xcccccccd
 8001c6c:	40020000 	.word	0x40020000

08001c70 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8c:	2204      	movs	r2, #4
 8001c8e:	409a      	lsls	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	4013      	ands	r3, r2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d04f      	beq.n	8001d38 <HAL_DMA_IRQHandler+0xc8>
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	f003 0304 	and.w	r3, r3, #4
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d04a      	beq.n	8001d38 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0320 	and.w	r3, r3, #32
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d107      	bne.n	8001cc0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 0204 	bic.w	r2, r2, #4
 8001cbe:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a66      	ldr	r2, [pc, #408]	@ (8001e60 <HAL_DMA_IRQHandler+0x1f0>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d029      	beq.n	8001d1e <HAL_DMA_IRQHandler+0xae>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a65      	ldr	r2, [pc, #404]	@ (8001e64 <HAL_DMA_IRQHandler+0x1f4>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d022      	beq.n	8001d1a <HAL_DMA_IRQHandler+0xaa>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a63      	ldr	r2, [pc, #396]	@ (8001e68 <HAL_DMA_IRQHandler+0x1f8>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d01a      	beq.n	8001d14 <HAL_DMA_IRQHandler+0xa4>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a62      	ldr	r2, [pc, #392]	@ (8001e6c <HAL_DMA_IRQHandler+0x1fc>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d012      	beq.n	8001d0e <HAL_DMA_IRQHandler+0x9e>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a60      	ldr	r2, [pc, #384]	@ (8001e70 <HAL_DMA_IRQHandler+0x200>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d00a      	beq.n	8001d08 <HAL_DMA_IRQHandler+0x98>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a5f      	ldr	r2, [pc, #380]	@ (8001e74 <HAL_DMA_IRQHandler+0x204>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d102      	bne.n	8001d02 <HAL_DMA_IRQHandler+0x92>
 8001cfc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001d00:	e00e      	b.n	8001d20 <HAL_DMA_IRQHandler+0xb0>
 8001d02:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001d06:	e00b      	b.n	8001d20 <HAL_DMA_IRQHandler+0xb0>
 8001d08:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001d0c:	e008      	b.n	8001d20 <HAL_DMA_IRQHandler+0xb0>
 8001d0e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001d12:	e005      	b.n	8001d20 <HAL_DMA_IRQHandler+0xb0>
 8001d14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d18:	e002      	b.n	8001d20 <HAL_DMA_IRQHandler+0xb0>
 8001d1a:	2340      	movs	r3, #64	@ 0x40
 8001d1c:	e000      	b.n	8001d20 <HAL_DMA_IRQHandler+0xb0>
 8001d1e:	2304      	movs	r3, #4
 8001d20:	4a55      	ldr	r2, [pc, #340]	@ (8001e78 <HAL_DMA_IRQHandler+0x208>)
 8001d22:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f000 8094 	beq.w	8001e56 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001d36:	e08e      	b.n	8001e56 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3c:	2202      	movs	r2, #2
 8001d3e:	409a      	lsls	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	4013      	ands	r3, r2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d056      	beq.n	8001df6 <HAL_DMA_IRQHandler+0x186>
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d051      	beq.n	8001df6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0320 	and.w	r3, r3, #32
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d10b      	bne.n	8001d78 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f022 020a 	bic.w	r2, r2, #10
 8001d6e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a38      	ldr	r2, [pc, #224]	@ (8001e60 <HAL_DMA_IRQHandler+0x1f0>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d029      	beq.n	8001dd6 <HAL_DMA_IRQHandler+0x166>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a37      	ldr	r2, [pc, #220]	@ (8001e64 <HAL_DMA_IRQHandler+0x1f4>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d022      	beq.n	8001dd2 <HAL_DMA_IRQHandler+0x162>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a35      	ldr	r2, [pc, #212]	@ (8001e68 <HAL_DMA_IRQHandler+0x1f8>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d01a      	beq.n	8001dcc <HAL_DMA_IRQHandler+0x15c>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a34      	ldr	r2, [pc, #208]	@ (8001e6c <HAL_DMA_IRQHandler+0x1fc>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d012      	beq.n	8001dc6 <HAL_DMA_IRQHandler+0x156>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a32      	ldr	r2, [pc, #200]	@ (8001e70 <HAL_DMA_IRQHandler+0x200>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d00a      	beq.n	8001dc0 <HAL_DMA_IRQHandler+0x150>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a31      	ldr	r2, [pc, #196]	@ (8001e74 <HAL_DMA_IRQHandler+0x204>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d102      	bne.n	8001dba <HAL_DMA_IRQHandler+0x14a>
 8001db4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001db8:	e00e      	b.n	8001dd8 <HAL_DMA_IRQHandler+0x168>
 8001dba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001dbe:	e00b      	b.n	8001dd8 <HAL_DMA_IRQHandler+0x168>
 8001dc0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001dc4:	e008      	b.n	8001dd8 <HAL_DMA_IRQHandler+0x168>
 8001dc6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001dca:	e005      	b.n	8001dd8 <HAL_DMA_IRQHandler+0x168>
 8001dcc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001dd0:	e002      	b.n	8001dd8 <HAL_DMA_IRQHandler+0x168>
 8001dd2:	2320      	movs	r3, #32
 8001dd4:	e000      	b.n	8001dd8 <HAL_DMA_IRQHandler+0x168>
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	4a27      	ldr	r2, [pc, #156]	@ (8001e78 <HAL_DMA_IRQHandler+0x208>)
 8001dda:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d034      	beq.n	8001e56 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001df4:	e02f      	b.n	8001e56 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfa:	2208      	movs	r2, #8
 8001dfc:	409a      	lsls	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	4013      	ands	r3, r2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d028      	beq.n	8001e58 <HAL_DMA_IRQHandler+0x1e8>
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	f003 0308 	and.w	r3, r3, #8
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d023      	beq.n	8001e58 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f022 020e 	bic.w	r2, r2, #14
 8001e1e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e28:	2101      	movs	r1, #1
 8001e2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e2e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d004      	beq.n	8001e58 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	4798      	blx	r3
    }
  }
  return;
 8001e56:	bf00      	nop
 8001e58:	bf00      	nop
}
 8001e5a:	3710      	adds	r7, #16
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40020008 	.word	0x40020008
 8001e64:	4002001c 	.word	0x4002001c
 8001e68:	40020030 	.word	0x40020030
 8001e6c:	40020044 	.word	0x40020044
 8001e70:	40020058 	.word	0x40020058
 8001e74:	4002006c 	.word	0x4002006c
 8001e78:	40020000 	.word	0x40020000

08001e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b08b      	sub	sp, #44	@ 0x2c
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e86:	2300      	movs	r3, #0
 8001e88:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e8e:	e169      	b.n	8002164 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e90:	2201      	movs	r2, #1
 8001e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	69fa      	ldr	r2, [r7, #28]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	f040 8158 	bne.w	800215e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	4a9a      	ldr	r2, [pc, #616]	@ (800211c <HAL_GPIO_Init+0x2a0>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d05e      	beq.n	8001f76 <HAL_GPIO_Init+0xfa>
 8001eb8:	4a98      	ldr	r2, [pc, #608]	@ (800211c <HAL_GPIO_Init+0x2a0>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d875      	bhi.n	8001faa <HAL_GPIO_Init+0x12e>
 8001ebe:	4a98      	ldr	r2, [pc, #608]	@ (8002120 <HAL_GPIO_Init+0x2a4>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d058      	beq.n	8001f76 <HAL_GPIO_Init+0xfa>
 8001ec4:	4a96      	ldr	r2, [pc, #600]	@ (8002120 <HAL_GPIO_Init+0x2a4>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d86f      	bhi.n	8001faa <HAL_GPIO_Init+0x12e>
 8001eca:	4a96      	ldr	r2, [pc, #600]	@ (8002124 <HAL_GPIO_Init+0x2a8>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d052      	beq.n	8001f76 <HAL_GPIO_Init+0xfa>
 8001ed0:	4a94      	ldr	r2, [pc, #592]	@ (8002124 <HAL_GPIO_Init+0x2a8>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d869      	bhi.n	8001faa <HAL_GPIO_Init+0x12e>
 8001ed6:	4a94      	ldr	r2, [pc, #592]	@ (8002128 <HAL_GPIO_Init+0x2ac>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d04c      	beq.n	8001f76 <HAL_GPIO_Init+0xfa>
 8001edc:	4a92      	ldr	r2, [pc, #584]	@ (8002128 <HAL_GPIO_Init+0x2ac>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d863      	bhi.n	8001faa <HAL_GPIO_Init+0x12e>
 8001ee2:	4a92      	ldr	r2, [pc, #584]	@ (800212c <HAL_GPIO_Init+0x2b0>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d046      	beq.n	8001f76 <HAL_GPIO_Init+0xfa>
 8001ee8:	4a90      	ldr	r2, [pc, #576]	@ (800212c <HAL_GPIO_Init+0x2b0>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d85d      	bhi.n	8001faa <HAL_GPIO_Init+0x12e>
 8001eee:	2b12      	cmp	r3, #18
 8001ef0:	d82a      	bhi.n	8001f48 <HAL_GPIO_Init+0xcc>
 8001ef2:	2b12      	cmp	r3, #18
 8001ef4:	d859      	bhi.n	8001faa <HAL_GPIO_Init+0x12e>
 8001ef6:	a201      	add	r2, pc, #4	@ (adr r2, 8001efc <HAL_GPIO_Init+0x80>)
 8001ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001efc:	08001f77 	.word	0x08001f77
 8001f00:	08001f51 	.word	0x08001f51
 8001f04:	08001f63 	.word	0x08001f63
 8001f08:	08001fa5 	.word	0x08001fa5
 8001f0c:	08001fab 	.word	0x08001fab
 8001f10:	08001fab 	.word	0x08001fab
 8001f14:	08001fab 	.word	0x08001fab
 8001f18:	08001fab 	.word	0x08001fab
 8001f1c:	08001fab 	.word	0x08001fab
 8001f20:	08001fab 	.word	0x08001fab
 8001f24:	08001fab 	.word	0x08001fab
 8001f28:	08001fab 	.word	0x08001fab
 8001f2c:	08001fab 	.word	0x08001fab
 8001f30:	08001fab 	.word	0x08001fab
 8001f34:	08001fab 	.word	0x08001fab
 8001f38:	08001fab 	.word	0x08001fab
 8001f3c:	08001fab 	.word	0x08001fab
 8001f40:	08001f59 	.word	0x08001f59
 8001f44:	08001f6d 	.word	0x08001f6d
 8001f48:	4a79      	ldr	r2, [pc, #484]	@ (8002130 <HAL_GPIO_Init+0x2b4>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d013      	beq.n	8001f76 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f4e:	e02c      	b.n	8001faa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	623b      	str	r3, [r7, #32]
          break;
 8001f56:	e029      	b.n	8001fac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	623b      	str	r3, [r7, #32]
          break;
 8001f60:	e024      	b.n	8001fac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	3308      	adds	r3, #8
 8001f68:	623b      	str	r3, [r7, #32]
          break;
 8001f6a:	e01f      	b.n	8001fac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	330c      	adds	r3, #12
 8001f72:	623b      	str	r3, [r7, #32]
          break;
 8001f74:	e01a      	b.n	8001fac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d102      	bne.n	8001f84 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f7e:	2304      	movs	r3, #4
 8001f80:	623b      	str	r3, [r7, #32]
          break;
 8001f82:	e013      	b.n	8001fac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d105      	bne.n	8001f98 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f8c:	2308      	movs	r3, #8
 8001f8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	69fa      	ldr	r2, [r7, #28]
 8001f94:	611a      	str	r2, [r3, #16]
          break;
 8001f96:	e009      	b.n	8001fac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f98:	2308      	movs	r3, #8
 8001f9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	69fa      	ldr	r2, [r7, #28]
 8001fa0:	615a      	str	r2, [r3, #20]
          break;
 8001fa2:	e003      	b.n	8001fac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	623b      	str	r3, [r7, #32]
          break;
 8001fa8:	e000      	b.n	8001fac <HAL_GPIO_Init+0x130>
          break;
 8001faa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	2bff      	cmp	r3, #255	@ 0xff
 8001fb0:	d801      	bhi.n	8001fb6 <HAL_GPIO_Init+0x13a>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	e001      	b.n	8001fba <HAL_GPIO_Init+0x13e>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	3304      	adds	r3, #4
 8001fba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	2bff      	cmp	r3, #255	@ 0xff
 8001fc0:	d802      	bhi.n	8001fc8 <HAL_GPIO_Init+0x14c>
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	e002      	b.n	8001fce <HAL_GPIO_Init+0x152>
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fca:	3b08      	subs	r3, #8
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	210f      	movs	r1, #15
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	401a      	ands	r2, r3
 8001fe0:	6a39      	ldr	r1, [r7, #32]
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f000 80b1 	beq.w	800215e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ffc:	4b4d      	ldr	r3, [pc, #308]	@ (8002134 <HAL_GPIO_Init+0x2b8>)
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	4a4c      	ldr	r2, [pc, #304]	@ (8002134 <HAL_GPIO_Init+0x2b8>)
 8002002:	f043 0301 	orr.w	r3, r3, #1
 8002006:	6193      	str	r3, [r2, #24]
 8002008:	4b4a      	ldr	r3, [pc, #296]	@ (8002134 <HAL_GPIO_Init+0x2b8>)
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	60bb      	str	r3, [r7, #8]
 8002012:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002014:	4a48      	ldr	r2, [pc, #288]	@ (8002138 <HAL_GPIO_Init+0x2bc>)
 8002016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002018:	089b      	lsrs	r3, r3, #2
 800201a:	3302      	adds	r3, #2
 800201c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002020:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002024:	f003 0303 	and.w	r3, r3, #3
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	220f      	movs	r2, #15
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	43db      	mvns	r3, r3
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	4013      	ands	r3, r2
 8002036:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a40      	ldr	r2, [pc, #256]	@ (800213c <HAL_GPIO_Init+0x2c0>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d013      	beq.n	8002068 <HAL_GPIO_Init+0x1ec>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a3f      	ldr	r2, [pc, #252]	@ (8002140 <HAL_GPIO_Init+0x2c4>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d00d      	beq.n	8002064 <HAL_GPIO_Init+0x1e8>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a3e      	ldr	r2, [pc, #248]	@ (8002144 <HAL_GPIO_Init+0x2c8>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d007      	beq.n	8002060 <HAL_GPIO_Init+0x1e4>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a3d      	ldr	r2, [pc, #244]	@ (8002148 <HAL_GPIO_Init+0x2cc>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d101      	bne.n	800205c <HAL_GPIO_Init+0x1e0>
 8002058:	2303      	movs	r3, #3
 800205a:	e006      	b.n	800206a <HAL_GPIO_Init+0x1ee>
 800205c:	2304      	movs	r3, #4
 800205e:	e004      	b.n	800206a <HAL_GPIO_Init+0x1ee>
 8002060:	2302      	movs	r3, #2
 8002062:	e002      	b.n	800206a <HAL_GPIO_Init+0x1ee>
 8002064:	2301      	movs	r3, #1
 8002066:	e000      	b.n	800206a <HAL_GPIO_Init+0x1ee>
 8002068:	2300      	movs	r3, #0
 800206a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800206c:	f002 0203 	and.w	r2, r2, #3
 8002070:	0092      	lsls	r2, r2, #2
 8002072:	4093      	lsls	r3, r2
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	4313      	orrs	r3, r2
 8002078:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800207a:	492f      	ldr	r1, [pc, #188]	@ (8002138 <HAL_GPIO_Init+0x2bc>)
 800207c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207e:	089b      	lsrs	r3, r3, #2
 8002080:	3302      	adds	r3, #2
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d006      	beq.n	80020a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002094:	4b2d      	ldr	r3, [pc, #180]	@ (800214c <HAL_GPIO_Init+0x2d0>)
 8002096:	689a      	ldr	r2, [r3, #8]
 8002098:	492c      	ldr	r1, [pc, #176]	@ (800214c <HAL_GPIO_Init+0x2d0>)
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	4313      	orrs	r3, r2
 800209e:	608b      	str	r3, [r1, #8]
 80020a0:	e006      	b.n	80020b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020a2:	4b2a      	ldr	r3, [pc, #168]	@ (800214c <HAL_GPIO_Init+0x2d0>)
 80020a4:	689a      	ldr	r2, [r3, #8]
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	43db      	mvns	r3, r3
 80020aa:	4928      	ldr	r1, [pc, #160]	@ (800214c <HAL_GPIO_Init+0x2d0>)
 80020ac:	4013      	ands	r3, r2
 80020ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d006      	beq.n	80020ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020bc:	4b23      	ldr	r3, [pc, #140]	@ (800214c <HAL_GPIO_Init+0x2d0>)
 80020be:	68da      	ldr	r2, [r3, #12]
 80020c0:	4922      	ldr	r1, [pc, #136]	@ (800214c <HAL_GPIO_Init+0x2d0>)
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	60cb      	str	r3, [r1, #12]
 80020c8:	e006      	b.n	80020d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020ca:	4b20      	ldr	r3, [pc, #128]	@ (800214c <HAL_GPIO_Init+0x2d0>)
 80020cc:	68da      	ldr	r2, [r3, #12]
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	43db      	mvns	r3, r3
 80020d2:	491e      	ldr	r1, [pc, #120]	@ (800214c <HAL_GPIO_Init+0x2d0>)
 80020d4:	4013      	ands	r3, r2
 80020d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d006      	beq.n	80020f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020e4:	4b19      	ldr	r3, [pc, #100]	@ (800214c <HAL_GPIO_Init+0x2d0>)
 80020e6:	685a      	ldr	r2, [r3, #4]
 80020e8:	4918      	ldr	r1, [pc, #96]	@ (800214c <HAL_GPIO_Init+0x2d0>)
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	604b      	str	r3, [r1, #4]
 80020f0:	e006      	b.n	8002100 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020f2:	4b16      	ldr	r3, [pc, #88]	@ (800214c <HAL_GPIO_Init+0x2d0>)
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	43db      	mvns	r3, r3
 80020fa:	4914      	ldr	r1, [pc, #80]	@ (800214c <HAL_GPIO_Init+0x2d0>)
 80020fc:	4013      	ands	r3, r2
 80020fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d021      	beq.n	8002150 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800210c:	4b0f      	ldr	r3, [pc, #60]	@ (800214c <HAL_GPIO_Init+0x2d0>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	490e      	ldr	r1, [pc, #56]	@ (800214c <HAL_GPIO_Init+0x2d0>)
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	4313      	orrs	r3, r2
 8002116:	600b      	str	r3, [r1, #0]
 8002118:	e021      	b.n	800215e <HAL_GPIO_Init+0x2e2>
 800211a:	bf00      	nop
 800211c:	10320000 	.word	0x10320000
 8002120:	10310000 	.word	0x10310000
 8002124:	10220000 	.word	0x10220000
 8002128:	10210000 	.word	0x10210000
 800212c:	10120000 	.word	0x10120000
 8002130:	10110000 	.word	0x10110000
 8002134:	40021000 	.word	0x40021000
 8002138:	40010000 	.word	0x40010000
 800213c:	40010800 	.word	0x40010800
 8002140:	40010c00 	.word	0x40010c00
 8002144:	40011000 	.word	0x40011000
 8002148:	40011400 	.word	0x40011400
 800214c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002150:	4b0b      	ldr	r3, [pc, #44]	@ (8002180 <HAL_GPIO_Init+0x304>)
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	43db      	mvns	r3, r3
 8002158:	4909      	ldr	r1, [pc, #36]	@ (8002180 <HAL_GPIO_Init+0x304>)
 800215a:	4013      	ands	r3, r2
 800215c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800215e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002160:	3301      	adds	r3, #1
 8002162:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800216a:	fa22 f303 	lsr.w	r3, r2, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	f47f ae8e 	bne.w	8001e90 <HAL_GPIO_Init+0x14>
  }
}
 8002174:	bf00      	nop
 8002176:	bf00      	nop
 8002178:	372c      	adds	r7, #44	@ 0x2c
 800217a:	46bd      	mov	sp, r7
 800217c:	bc80      	pop	{r7}
 800217e:	4770      	bx	lr
 8002180:	40010400 	.word	0x40010400

08002184 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	460b      	mov	r3, r1
 800218e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	887b      	ldrh	r3, [r7, #2]
 8002196:	4013      	ands	r3, r2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d002      	beq.n	80021a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800219c:	2301      	movs	r3, #1
 800219e:	73fb      	strb	r3, [r7, #15]
 80021a0:	e001      	b.n	80021a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021a2:	2300      	movs	r3, #0
 80021a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3714      	adds	r7, #20
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bc80      	pop	{r7}
 80021b0:	4770      	bx	lr

080021b2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b083      	sub	sp, #12
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
 80021ba:	460b      	mov	r3, r1
 80021bc:	807b      	strh	r3, [r7, #2]
 80021be:	4613      	mov	r3, r2
 80021c0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021c2:	787b      	ldrb	r3, [r7, #1]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d003      	beq.n	80021d0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021c8:	887a      	ldrh	r2, [r7, #2]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021ce:	e003      	b.n	80021d8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021d0:	887b      	ldrh	r3, [r7, #2]
 80021d2:	041a      	lsls	r2, r3, #16
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	611a      	str	r2, [r3, #16]
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	bc80      	pop	{r7}
 80021e0:	4770      	bx	lr
	...

080021e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e12b      	b.n	800244e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d106      	bne.n	8002210 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7fe fcac 	bl	8000b68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2224      	movs	r2, #36	@ 0x24
 8002214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 0201 	bic.w	r2, r2, #1
 8002226:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002236:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002246:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002248:	f001 f842 	bl	80032d0 <HAL_RCC_GetPCLK1Freq>
 800224c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	4a81      	ldr	r2, [pc, #516]	@ (8002458 <HAL_I2C_Init+0x274>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d807      	bhi.n	8002268 <HAL_I2C_Init+0x84>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	4a80      	ldr	r2, [pc, #512]	@ (800245c <HAL_I2C_Init+0x278>)
 800225c:	4293      	cmp	r3, r2
 800225e:	bf94      	ite	ls
 8002260:	2301      	movls	r3, #1
 8002262:	2300      	movhi	r3, #0
 8002264:	b2db      	uxtb	r3, r3
 8002266:	e006      	b.n	8002276 <HAL_I2C_Init+0x92>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	4a7d      	ldr	r2, [pc, #500]	@ (8002460 <HAL_I2C_Init+0x27c>)
 800226c:	4293      	cmp	r3, r2
 800226e:	bf94      	ite	ls
 8002270:	2301      	movls	r3, #1
 8002272:	2300      	movhi	r3, #0
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e0e7      	b.n	800244e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	4a78      	ldr	r2, [pc, #480]	@ (8002464 <HAL_I2C_Init+0x280>)
 8002282:	fba2 2303 	umull	r2, r3, r2, r3
 8002286:	0c9b      	lsrs	r3, r3, #18
 8002288:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68ba      	ldr	r2, [r7, #8]
 800229a:	430a      	orrs	r2, r1
 800229c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6a1b      	ldr	r3, [r3, #32]
 80022a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	4a6a      	ldr	r2, [pc, #424]	@ (8002458 <HAL_I2C_Init+0x274>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d802      	bhi.n	80022b8 <HAL_I2C_Init+0xd4>
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	3301      	adds	r3, #1
 80022b6:	e009      	b.n	80022cc <HAL_I2C_Init+0xe8>
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80022be:	fb02 f303 	mul.w	r3, r2, r3
 80022c2:	4a69      	ldr	r2, [pc, #420]	@ (8002468 <HAL_I2C_Init+0x284>)
 80022c4:	fba2 2303 	umull	r2, r3, r2, r3
 80022c8:	099b      	lsrs	r3, r3, #6
 80022ca:	3301      	adds	r3, #1
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	6812      	ldr	r2, [r2, #0]
 80022d0:	430b      	orrs	r3, r1
 80022d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80022de:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	495c      	ldr	r1, [pc, #368]	@ (8002458 <HAL_I2C_Init+0x274>)
 80022e8:	428b      	cmp	r3, r1
 80022ea:	d819      	bhi.n	8002320 <HAL_I2C_Init+0x13c>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	1e59      	subs	r1, r3, #1
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80022fa:	1c59      	adds	r1, r3, #1
 80022fc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002300:	400b      	ands	r3, r1
 8002302:	2b00      	cmp	r3, #0
 8002304:	d00a      	beq.n	800231c <HAL_I2C_Init+0x138>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	1e59      	subs	r1, r3, #1
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	fbb1 f3f3 	udiv	r3, r1, r3
 8002314:	3301      	adds	r3, #1
 8002316:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800231a:	e051      	b.n	80023c0 <HAL_I2C_Init+0x1dc>
 800231c:	2304      	movs	r3, #4
 800231e:	e04f      	b.n	80023c0 <HAL_I2C_Init+0x1dc>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d111      	bne.n	800234c <HAL_I2C_Init+0x168>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	1e58      	subs	r0, r3, #1
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6859      	ldr	r1, [r3, #4]
 8002330:	460b      	mov	r3, r1
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	440b      	add	r3, r1
 8002336:	fbb0 f3f3 	udiv	r3, r0, r3
 800233a:	3301      	adds	r3, #1
 800233c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002340:	2b00      	cmp	r3, #0
 8002342:	bf0c      	ite	eq
 8002344:	2301      	moveq	r3, #1
 8002346:	2300      	movne	r3, #0
 8002348:	b2db      	uxtb	r3, r3
 800234a:	e012      	b.n	8002372 <HAL_I2C_Init+0x18e>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	1e58      	subs	r0, r3, #1
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6859      	ldr	r1, [r3, #4]
 8002354:	460b      	mov	r3, r1
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	440b      	add	r3, r1
 800235a:	0099      	lsls	r1, r3, #2
 800235c:	440b      	add	r3, r1
 800235e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002362:	3301      	adds	r3, #1
 8002364:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002368:	2b00      	cmp	r3, #0
 800236a:	bf0c      	ite	eq
 800236c:	2301      	moveq	r3, #1
 800236e:	2300      	movne	r3, #0
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <HAL_I2C_Init+0x196>
 8002376:	2301      	movs	r3, #1
 8002378:	e022      	b.n	80023c0 <HAL_I2C_Init+0x1dc>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d10e      	bne.n	80023a0 <HAL_I2C_Init+0x1bc>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	1e58      	subs	r0, r3, #1
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6859      	ldr	r1, [r3, #4]
 800238a:	460b      	mov	r3, r1
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	440b      	add	r3, r1
 8002390:	fbb0 f3f3 	udiv	r3, r0, r3
 8002394:	3301      	adds	r3, #1
 8002396:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800239a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800239e:	e00f      	b.n	80023c0 <HAL_I2C_Init+0x1dc>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	1e58      	subs	r0, r3, #1
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6859      	ldr	r1, [r3, #4]
 80023a8:	460b      	mov	r3, r1
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	440b      	add	r3, r1
 80023ae:	0099      	lsls	r1, r3, #2
 80023b0:	440b      	add	r3, r1
 80023b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80023b6:	3301      	adds	r3, #1
 80023b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	6809      	ldr	r1, [r1, #0]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	69da      	ldr	r2, [r3, #28]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	431a      	orrs	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	430a      	orrs	r2, r1
 80023e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80023ee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	6911      	ldr	r1, [r2, #16]
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	68d2      	ldr	r2, [r2, #12]
 80023fa:	4311      	orrs	r1, r2
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	6812      	ldr	r2, [r2, #0]
 8002400:	430b      	orrs	r3, r1
 8002402:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	695a      	ldr	r2, [r3, #20]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	431a      	orrs	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	430a      	orrs	r2, r1
 800241e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f042 0201 	orr.w	r2, r2, #1
 800242e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2220      	movs	r2, #32
 800243a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	000186a0 	.word	0x000186a0
 800245c:	001e847f 	.word	0x001e847f
 8002460:	003d08ff 	.word	0x003d08ff
 8002464:	431bde83 	.word	0x431bde83
 8002468:	10624dd3 	.word	0x10624dd3

0800246c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b088      	sub	sp, #32
 8002470:	af02      	add	r7, sp, #8
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	4608      	mov	r0, r1
 8002476:	4611      	mov	r1, r2
 8002478:	461a      	mov	r2, r3
 800247a:	4603      	mov	r3, r0
 800247c:	817b      	strh	r3, [r7, #10]
 800247e:	460b      	mov	r3, r1
 8002480:	813b      	strh	r3, [r7, #8]
 8002482:	4613      	mov	r3, r2
 8002484:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002486:	f7ff f84b 	bl	8001520 <HAL_GetTick>
 800248a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2b20      	cmp	r3, #32
 8002496:	f040 80d9 	bne.w	800264c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	2319      	movs	r3, #25
 80024a0:	2201      	movs	r2, #1
 80024a2:	496d      	ldr	r1, [pc, #436]	@ (8002658 <HAL_I2C_Mem_Write+0x1ec>)
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f000 f971 	bl	800278c <I2C_WaitOnFlagUntilTimeout>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80024b0:	2302      	movs	r3, #2
 80024b2:	e0cc      	b.n	800264e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d101      	bne.n	80024c2 <HAL_I2C_Mem_Write+0x56>
 80024be:	2302      	movs	r3, #2
 80024c0:	e0c5      	b.n	800264e <HAL_I2C_Mem_Write+0x1e2>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d007      	beq.n	80024e8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f042 0201 	orr.w	r2, r2, #1
 80024e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2221      	movs	r2, #33	@ 0x21
 80024fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2240      	movs	r2, #64	@ 0x40
 8002504:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2200      	movs	r2, #0
 800250c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6a3a      	ldr	r2, [r7, #32]
 8002512:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002518:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800251e:	b29a      	uxth	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	4a4d      	ldr	r2, [pc, #308]	@ (800265c <HAL_I2C_Mem_Write+0x1f0>)
 8002528:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800252a:	88f8      	ldrh	r0, [r7, #6]
 800252c:	893a      	ldrh	r2, [r7, #8]
 800252e:	8979      	ldrh	r1, [r7, #10]
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	9301      	str	r3, [sp, #4]
 8002534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	4603      	mov	r3, r0
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f000 f890 	bl	8002660 <I2C_RequestMemoryWrite>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d052      	beq.n	80025ec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e081      	b.n	800264e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800254e:	68f8      	ldr	r0, [r7, #12]
 8002550:	f000 fa36 	bl	80029c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00d      	beq.n	8002576 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255e:	2b04      	cmp	r3, #4
 8002560:	d107      	bne.n	8002572 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002570:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e06b      	b.n	800264e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800257a:	781a      	ldrb	r2, [r3, #0]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002586:	1c5a      	adds	r2, r3, #1
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002590:	3b01      	subs	r3, #1
 8002592:	b29a      	uxth	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800259c:	b29b      	uxth	r3, r3
 800259e:	3b01      	subs	r3, #1
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	695b      	ldr	r3, [r3, #20]
 80025ac:	f003 0304 	and.w	r3, r3, #4
 80025b0:	2b04      	cmp	r3, #4
 80025b2:	d11b      	bne.n	80025ec <HAL_I2C_Mem_Write+0x180>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d017      	beq.n	80025ec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c0:	781a      	ldrb	r2, [r3, #0]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025cc:	1c5a      	adds	r2, r3, #1
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025d6:	3b01      	subs	r3, #1
 80025d8:	b29a      	uxth	r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	3b01      	subs	r3, #1
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1aa      	bne.n	800254a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	f000 fa29 	bl	8002a50 <I2C_WaitOnBTFFlagUntilTimeout>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d00d      	beq.n	8002620 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002608:	2b04      	cmp	r3, #4
 800260a:	d107      	bne.n	800261c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800261a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e016      	b.n	800264e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800262e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2220      	movs	r2, #32
 8002634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002648:	2300      	movs	r3, #0
 800264a:	e000      	b.n	800264e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800264c:	2302      	movs	r3, #2
  }
}
 800264e:	4618      	mov	r0, r3
 8002650:	3718      	adds	r7, #24
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	00100002 	.word	0x00100002
 800265c:	ffff0000 	.word	0xffff0000

08002660 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b088      	sub	sp, #32
 8002664:	af02      	add	r7, sp, #8
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	4608      	mov	r0, r1
 800266a:	4611      	mov	r1, r2
 800266c:	461a      	mov	r2, r3
 800266e:	4603      	mov	r3, r0
 8002670:	817b      	strh	r3, [r7, #10]
 8002672:	460b      	mov	r3, r1
 8002674:	813b      	strh	r3, [r7, #8]
 8002676:	4613      	mov	r3, r2
 8002678:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002688:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800268a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	6a3b      	ldr	r3, [r7, #32]
 8002690:	2200      	movs	r2, #0
 8002692:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f000 f878 	bl	800278c <I2C_WaitOnFlagUntilTimeout>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00d      	beq.n	80026be <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026b0:	d103      	bne.n	80026ba <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026b8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e05f      	b.n	800277e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026be:	897b      	ldrh	r3, [r7, #10]
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	461a      	mov	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80026cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d0:	6a3a      	ldr	r2, [r7, #32]
 80026d2:	492d      	ldr	r1, [pc, #180]	@ (8002788 <I2C_RequestMemoryWrite+0x128>)
 80026d4:	68f8      	ldr	r0, [r7, #12]
 80026d6:	f000 f8d3 	bl	8002880 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e04c      	b.n	800277e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026e4:	2300      	movs	r3, #0
 80026e6:	617b      	str	r3, [r7, #20]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	617b      	str	r3, [r7, #20]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	617b      	str	r3, [r7, #20]
 80026f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026fc:	6a39      	ldr	r1, [r7, #32]
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f000 f95e 	bl	80029c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00d      	beq.n	8002726 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270e:	2b04      	cmp	r3, #4
 8002710:	d107      	bne.n	8002722 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002720:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e02b      	b.n	800277e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002726:	88fb      	ldrh	r3, [r7, #6]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d105      	bne.n	8002738 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800272c:	893b      	ldrh	r3, [r7, #8]
 800272e:	b2da      	uxtb	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	611a      	str	r2, [r3, #16]
 8002736:	e021      	b.n	800277c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002738:	893b      	ldrh	r3, [r7, #8]
 800273a:	0a1b      	lsrs	r3, r3, #8
 800273c:	b29b      	uxth	r3, r3
 800273e:	b2da      	uxtb	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002746:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002748:	6a39      	ldr	r1, [r7, #32]
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f000 f938 	bl	80029c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00d      	beq.n	8002772 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275a:	2b04      	cmp	r3, #4
 800275c:	d107      	bne.n	800276e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800276c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e005      	b.n	800277e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002772:	893b      	ldrh	r3, [r7, #8]
 8002774:	b2da      	uxtb	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3718      	adds	r7, #24
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	00010002 	.word	0x00010002

0800278c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	603b      	str	r3, [r7, #0]
 8002798:	4613      	mov	r3, r2
 800279a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800279c:	e048      	b.n	8002830 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a4:	d044      	beq.n	8002830 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027a6:	f7fe febb 	bl	8001520 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d302      	bcc.n	80027bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d139      	bne.n	8002830 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	0c1b      	lsrs	r3, r3, #16
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d10d      	bne.n	80027e2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	43da      	mvns	r2, r3
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	4013      	ands	r3, r2
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	bf0c      	ite	eq
 80027d8:	2301      	moveq	r3, #1
 80027da:	2300      	movne	r3, #0
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	461a      	mov	r2, r3
 80027e0:	e00c      	b.n	80027fc <I2C_WaitOnFlagUntilTimeout+0x70>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	43da      	mvns	r2, r3
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	4013      	ands	r3, r2
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	bf0c      	ite	eq
 80027f4:	2301      	moveq	r3, #1
 80027f6:	2300      	movne	r3, #0
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	461a      	mov	r2, r3
 80027fc:	79fb      	ldrb	r3, [r7, #7]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d116      	bne.n	8002830 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2220      	movs	r2, #32
 800280c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281c:	f043 0220 	orr.w	r2, r3, #32
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e023      	b.n	8002878 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	0c1b      	lsrs	r3, r3, #16
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b01      	cmp	r3, #1
 8002838:	d10d      	bne.n	8002856 <I2C_WaitOnFlagUntilTimeout+0xca>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	43da      	mvns	r2, r3
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	4013      	ands	r3, r2
 8002846:	b29b      	uxth	r3, r3
 8002848:	2b00      	cmp	r3, #0
 800284a:	bf0c      	ite	eq
 800284c:	2301      	moveq	r3, #1
 800284e:	2300      	movne	r3, #0
 8002850:	b2db      	uxtb	r3, r3
 8002852:	461a      	mov	r2, r3
 8002854:	e00c      	b.n	8002870 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	43da      	mvns	r2, r3
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	4013      	ands	r3, r2
 8002862:	b29b      	uxth	r3, r3
 8002864:	2b00      	cmp	r3, #0
 8002866:	bf0c      	ite	eq
 8002868:	2301      	moveq	r3, #1
 800286a:	2300      	movne	r3, #0
 800286c:	b2db      	uxtb	r3, r3
 800286e:	461a      	mov	r2, r3
 8002870:	79fb      	ldrb	r3, [r7, #7]
 8002872:	429a      	cmp	r2, r3
 8002874:	d093      	beq.n	800279e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
 800288c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800288e:	e071      	b.n	8002974 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800289a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800289e:	d123      	bne.n	80028e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028ae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80028b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2220      	movs	r2, #32
 80028c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d4:	f043 0204 	orr.w	r2, r3, #4
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e067      	b.n	80029b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ee:	d041      	beq.n	8002974 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028f0:	f7fe fe16 	bl	8001520 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d302      	bcc.n	8002906 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d136      	bne.n	8002974 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	0c1b      	lsrs	r3, r3, #16
 800290a:	b2db      	uxtb	r3, r3
 800290c:	2b01      	cmp	r3, #1
 800290e:	d10c      	bne.n	800292a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	43da      	mvns	r2, r3
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	4013      	ands	r3, r2
 800291c:	b29b      	uxth	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	bf14      	ite	ne
 8002922:	2301      	movne	r3, #1
 8002924:	2300      	moveq	r3, #0
 8002926:	b2db      	uxtb	r3, r3
 8002928:	e00b      	b.n	8002942 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	43da      	mvns	r2, r3
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	4013      	ands	r3, r2
 8002936:	b29b      	uxth	r3, r3
 8002938:	2b00      	cmp	r3, #0
 800293a:	bf14      	ite	ne
 800293c:	2301      	movne	r3, #1
 800293e:	2300      	moveq	r3, #0
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d016      	beq.n	8002974 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2220      	movs	r2, #32
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002960:	f043 0220 	orr.w	r2, r3, #32
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e021      	b.n	80029b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	0c1b      	lsrs	r3, r3, #16
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b01      	cmp	r3, #1
 800297c:	d10c      	bne.n	8002998 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	695b      	ldr	r3, [r3, #20]
 8002984:	43da      	mvns	r2, r3
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	4013      	ands	r3, r2
 800298a:	b29b      	uxth	r3, r3
 800298c:	2b00      	cmp	r3, #0
 800298e:	bf14      	ite	ne
 8002990:	2301      	movne	r3, #1
 8002992:	2300      	moveq	r3, #0
 8002994:	b2db      	uxtb	r3, r3
 8002996:	e00b      	b.n	80029b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	43da      	mvns	r2, r3
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	4013      	ands	r3, r2
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	bf14      	ite	ne
 80029aa:	2301      	movne	r3, #1
 80029ac:	2300      	moveq	r3, #0
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f47f af6d 	bne.w	8002890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029cc:	e034      	b.n	8002a38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 f886 	bl	8002ae0 <I2C_IsAcknowledgeFailed>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e034      	b.n	8002a48 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e4:	d028      	beq.n	8002a38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029e6:	f7fe fd9b 	bl	8001520 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	68ba      	ldr	r2, [r7, #8]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d302      	bcc.n	80029fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d11d      	bne.n	8002a38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a06:	2b80      	cmp	r3, #128	@ 0x80
 8002a08:	d016      	beq.n	8002a38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2220      	movs	r2, #32
 8002a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a24:	f043 0220 	orr.w	r2, r3, #32
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e007      	b.n	8002a48 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a42:	2b80      	cmp	r3, #128	@ 0x80
 8002a44:	d1c3      	bne.n	80029ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a5c:	e034      	b.n	8002ac8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f000 f83e 	bl	8002ae0 <I2C_IsAcknowledgeFailed>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e034      	b.n	8002ad8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a74:	d028      	beq.n	8002ac8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a76:	f7fe fd53 	bl	8001520 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	68ba      	ldr	r2, [r7, #8]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d302      	bcc.n	8002a8c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d11d      	bne.n	8002ac8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	f003 0304 	and.w	r3, r3, #4
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	d016      	beq.n	8002ac8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab4:	f043 0220 	orr.w	r2, r3, #32
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e007      	b.n	8002ad8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	f003 0304 	and.w	r3, r3, #4
 8002ad2:	2b04      	cmp	r3, #4
 8002ad4:	d1c3      	bne.n	8002a5e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3710      	adds	r7, #16
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002af2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002af6:	d11b      	bne.n	8002b30 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b00:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1c:	f043 0204 	orr.w	r2, r3, #4
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e000      	b.n	8002b32 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bc80      	pop	{r7}
 8002b3a:	4770      	bx	lr

08002b3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e272      	b.n	8003034 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f000 8087 	beq.w	8002c6a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b5c:	4b92      	ldr	r3, [pc, #584]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f003 030c 	and.w	r3, r3, #12
 8002b64:	2b04      	cmp	r3, #4
 8002b66:	d00c      	beq.n	8002b82 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b68:	4b8f      	ldr	r3, [pc, #572]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f003 030c 	and.w	r3, r3, #12
 8002b70:	2b08      	cmp	r3, #8
 8002b72:	d112      	bne.n	8002b9a <HAL_RCC_OscConfig+0x5e>
 8002b74:	4b8c      	ldr	r3, [pc, #560]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b80:	d10b      	bne.n	8002b9a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b82:	4b89      	ldr	r3, [pc, #548]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d06c      	beq.n	8002c68 <HAL_RCC_OscConfig+0x12c>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d168      	bne.n	8002c68 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e24c      	b.n	8003034 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ba2:	d106      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x76>
 8002ba4:	4b80      	ldr	r3, [pc, #512]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a7f      	ldr	r2, [pc, #508]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002baa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bae:	6013      	str	r3, [r2, #0]
 8002bb0:	e02e      	b.n	8002c10 <HAL_RCC_OscConfig+0xd4>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10c      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x98>
 8002bba:	4b7b      	ldr	r3, [pc, #492]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a7a      	ldr	r2, [pc, #488]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002bc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bc4:	6013      	str	r3, [r2, #0]
 8002bc6:	4b78      	ldr	r3, [pc, #480]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a77      	ldr	r2, [pc, #476]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002bcc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bd0:	6013      	str	r3, [r2, #0]
 8002bd2:	e01d      	b.n	8002c10 <HAL_RCC_OscConfig+0xd4>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002bdc:	d10c      	bne.n	8002bf8 <HAL_RCC_OscConfig+0xbc>
 8002bde:	4b72      	ldr	r3, [pc, #456]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a71      	ldr	r2, [pc, #452]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002be4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	4b6f      	ldr	r3, [pc, #444]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a6e      	ldr	r2, [pc, #440]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002bf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bf4:	6013      	str	r3, [r2, #0]
 8002bf6:	e00b      	b.n	8002c10 <HAL_RCC_OscConfig+0xd4>
 8002bf8:	4b6b      	ldr	r3, [pc, #428]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a6a      	ldr	r2, [pc, #424]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002bfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c02:	6013      	str	r3, [r2, #0]
 8002c04:	4b68      	ldr	r3, [pc, #416]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a67      	ldr	r2, [pc, #412]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002c0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c0e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d013      	beq.n	8002c40 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c18:	f7fe fc82 	bl	8001520 <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c20:	f7fe fc7e 	bl	8001520 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b64      	cmp	r3, #100	@ 0x64
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e200      	b.n	8003034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c32:	4b5d      	ldr	r3, [pc, #372]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d0f0      	beq.n	8002c20 <HAL_RCC_OscConfig+0xe4>
 8002c3e:	e014      	b.n	8002c6a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c40:	f7fe fc6e 	bl	8001520 <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c48:	f7fe fc6a 	bl	8001520 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b64      	cmp	r3, #100	@ 0x64
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e1ec      	b.n	8003034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c5a:	4b53      	ldr	r3, [pc, #332]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1f0      	bne.n	8002c48 <HAL_RCC_OscConfig+0x10c>
 8002c66:	e000      	b.n	8002c6a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d063      	beq.n	8002d3e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c76:	4b4c      	ldr	r3, [pc, #304]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f003 030c 	and.w	r3, r3, #12
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00b      	beq.n	8002c9a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c82:	4b49      	ldr	r3, [pc, #292]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f003 030c 	and.w	r3, r3, #12
 8002c8a:	2b08      	cmp	r3, #8
 8002c8c:	d11c      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x18c>
 8002c8e:	4b46      	ldr	r3, [pc, #280]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d116      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c9a:	4b43      	ldr	r3, [pc, #268]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d005      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x176>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d001      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e1c0      	b.n	8003034 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb2:	4b3d      	ldr	r3, [pc, #244]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	4939      	ldr	r1, [pc, #228]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cc6:	e03a      	b.n	8002d3e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d020      	beq.n	8002d12 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cd0:	4b36      	ldr	r3, [pc, #216]	@ (8002dac <HAL_RCC_OscConfig+0x270>)
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd6:	f7fe fc23 	bl	8001520 <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cdc:	e008      	b.n	8002cf0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cde:	f7fe fc1f 	bl	8001520 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e1a1      	b.n	8003034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf0:	4b2d      	ldr	r3, [pc, #180]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d0f0      	beq.n	8002cde <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cfc:	4b2a      	ldr	r3, [pc, #168]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	4927      	ldr	r1, [pc, #156]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	600b      	str	r3, [r1, #0]
 8002d10:	e015      	b.n	8002d3e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d12:	4b26      	ldr	r3, [pc, #152]	@ (8002dac <HAL_RCC_OscConfig+0x270>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d18:	f7fe fc02 	bl	8001520 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d20:	f7fe fbfe 	bl	8001520 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e180      	b.n	8003034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d32:	4b1d      	ldr	r3, [pc, #116]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1f0      	bne.n	8002d20 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0308 	and.w	r3, r3, #8
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d03a      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d019      	beq.n	8002d86 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d52:	4b17      	ldr	r3, [pc, #92]	@ (8002db0 <HAL_RCC_OscConfig+0x274>)
 8002d54:	2201      	movs	r2, #1
 8002d56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d58:	f7fe fbe2 	bl	8001520 <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d60:	f7fe fbde 	bl	8001520 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e160      	b.n	8003034 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d72:	4b0d      	ldr	r3, [pc, #52]	@ (8002da8 <HAL_RCC_OscConfig+0x26c>)
 8002d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d0f0      	beq.n	8002d60 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d7e:	2001      	movs	r0, #1
 8002d80:	f000 face 	bl	8003320 <RCC_Delay>
 8002d84:	e01c      	b.n	8002dc0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d86:	4b0a      	ldr	r3, [pc, #40]	@ (8002db0 <HAL_RCC_OscConfig+0x274>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d8c:	f7fe fbc8 	bl	8001520 <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d92:	e00f      	b.n	8002db4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d94:	f7fe fbc4 	bl	8001520 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d908      	bls.n	8002db4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e146      	b.n	8003034 <HAL_RCC_OscConfig+0x4f8>
 8002da6:	bf00      	nop
 8002da8:	40021000 	.word	0x40021000
 8002dac:	42420000 	.word	0x42420000
 8002db0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db4:	4b92      	ldr	r3, [pc, #584]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1e9      	bne.n	8002d94 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0304 	and.w	r3, r3, #4
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 80a6 	beq.w	8002f1a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dd2:	4b8b      	ldr	r3, [pc, #556]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10d      	bne.n	8002dfa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dde:	4b88      	ldr	r3, [pc, #544]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	4a87      	ldr	r2, [pc, #540]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002de4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002de8:	61d3      	str	r3, [r2, #28]
 8002dea:	4b85      	ldr	r3, [pc, #532]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002df2:	60bb      	str	r3, [r7, #8]
 8002df4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002df6:	2301      	movs	r3, #1
 8002df8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dfa:	4b82      	ldr	r3, [pc, #520]	@ (8003004 <HAL_RCC_OscConfig+0x4c8>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d118      	bne.n	8002e38 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e06:	4b7f      	ldr	r3, [pc, #508]	@ (8003004 <HAL_RCC_OscConfig+0x4c8>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a7e      	ldr	r2, [pc, #504]	@ (8003004 <HAL_RCC_OscConfig+0x4c8>)
 8002e0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e12:	f7fe fb85 	bl	8001520 <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e1a:	f7fe fb81 	bl	8001520 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b64      	cmp	r3, #100	@ 0x64
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e103      	b.n	8003034 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e2c:	4b75      	ldr	r3, [pc, #468]	@ (8003004 <HAL_RCC_OscConfig+0x4c8>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0f0      	beq.n	8002e1a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d106      	bne.n	8002e4e <HAL_RCC_OscConfig+0x312>
 8002e40:	4b6f      	ldr	r3, [pc, #444]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	4a6e      	ldr	r2, [pc, #440]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002e46:	f043 0301 	orr.w	r3, r3, #1
 8002e4a:	6213      	str	r3, [r2, #32]
 8002e4c:	e02d      	b.n	8002eaa <HAL_RCC_OscConfig+0x36e>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10c      	bne.n	8002e70 <HAL_RCC_OscConfig+0x334>
 8002e56:	4b6a      	ldr	r3, [pc, #424]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	4a69      	ldr	r2, [pc, #420]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002e5c:	f023 0301 	bic.w	r3, r3, #1
 8002e60:	6213      	str	r3, [r2, #32]
 8002e62:	4b67      	ldr	r3, [pc, #412]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	4a66      	ldr	r2, [pc, #408]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002e68:	f023 0304 	bic.w	r3, r3, #4
 8002e6c:	6213      	str	r3, [r2, #32]
 8002e6e:	e01c      	b.n	8002eaa <HAL_RCC_OscConfig+0x36e>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	2b05      	cmp	r3, #5
 8002e76:	d10c      	bne.n	8002e92 <HAL_RCC_OscConfig+0x356>
 8002e78:	4b61      	ldr	r3, [pc, #388]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	4a60      	ldr	r2, [pc, #384]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002e7e:	f043 0304 	orr.w	r3, r3, #4
 8002e82:	6213      	str	r3, [r2, #32]
 8002e84:	4b5e      	ldr	r3, [pc, #376]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002e86:	6a1b      	ldr	r3, [r3, #32]
 8002e88:	4a5d      	ldr	r2, [pc, #372]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002e8a:	f043 0301 	orr.w	r3, r3, #1
 8002e8e:	6213      	str	r3, [r2, #32]
 8002e90:	e00b      	b.n	8002eaa <HAL_RCC_OscConfig+0x36e>
 8002e92:	4b5b      	ldr	r3, [pc, #364]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	4a5a      	ldr	r2, [pc, #360]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002e98:	f023 0301 	bic.w	r3, r3, #1
 8002e9c:	6213      	str	r3, [r2, #32]
 8002e9e:	4b58      	ldr	r3, [pc, #352]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	4a57      	ldr	r2, [pc, #348]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002ea4:	f023 0304 	bic.w	r3, r3, #4
 8002ea8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d015      	beq.n	8002ede <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eb2:	f7fe fb35 	bl	8001520 <HAL_GetTick>
 8002eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb8:	e00a      	b.n	8002ed0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eba:	f7fe fb31 	bl	8001520 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e0b1      	b.n	8003034 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed0:	4b4b      	ldr	r3, [pc, #300]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d0ee      	beq.n	8002eba <HAL_RCC_OscConfig+0x37e>
 8002edc:	e014      	b.n	8002f08 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ede:	f7fe fb1f 	bl	8001520 <HAL_GetTick>
 8002ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ee4:	e00a      	b.n	8002efc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ee6:	f7fe fb1b 	bl	8001520 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e09b      	b.n	8003034 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002efc:	4b40      	ldr	r3, [pc, #256]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1ee      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f08:	7dfb      	ldrb	r3, [r7, #23]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d105      	bne.n	8002f1a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f0e:	4b3c      	ldr	r3, [pc, #240]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002f10:	69db      	ldr	r3, [r3, #28]
 8002f12:	4a3b      	ldr	r2, [pc, #236]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002f14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f18:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	69db      	ldr	r3, [r3, #28]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f000 8087 	beq.w	8003032 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f24:	4b36      	ldr	r3, [pc, #216]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f003 030c 	and.w	r3, r3, #12
 8002f2c:	2b08      	cmp	r3, #8
 8002f2e:	d061      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	69db      	ldr	r3, [r3, #28]
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d146      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f38:	4b33      	ldr	r3, [pc, #204]	@ (8003008 <HAL_RCC_OscConfig+0x4cc>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3e:	f7fe faef 	bl	8001520 <HAL_GetTick>
 8002f42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f44:	e008      	b.n	8002f58 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f46:	f7fe faeb 	bl	8001520 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e06d      	b.n	8003034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f58:	4b29      	ldr	r3, [pc, #164]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1f0      	bne.n	8002f46 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f6c:	d108      	bne.n	8002f80 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f6e:	4b24      	ldr	r3, [pc, #144]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	4921      	ldr	r1, [pc, #132]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f80:	4b1f      	ldr	r3, [pc, #124]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a19      	ldr	r1, [r3, #32]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f90:	430b      	orrs	r3, r1
 8002f92:	491b      	ldr	r1, [pc, #108]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f98:	4b1b      	ldr	r3, [pc, #108]	@ (8003008 <HAL_RCC_OscConfig+0x4cc>)
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9e:	f7fe fabf 	bl	8001520 <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa6:	f7fe fabb 	bl	8001520 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e03d      	b.n	8003034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fb8:	4b11      	ldr	r3, [pc, #68]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0f0      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x46a>
 8002fc4:	e035      	b.n	8003032 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fc6:	4b10      	ldr	r3, [pc, #64]	@ (8003008 <HAL_RCC_OscConfig+0x4cc>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fcc:	f7fe faa8 	bl	8001520 <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd4:	f7fe faa4 	bl	8001520 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e026      	b.n	8003034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fe6:	4b06      	ldr	r3, [pc, #24]	@ (8003000 <HAL_RCC_OscConfig+0x4c4>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1f0      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x498>
 8002ff2:	e01e      	b.n	8003032 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	69db      	ldr	r3, [r3, #28]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d107      	bne.n	800300c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e019      	b.n	8003034 <HAL_RCC_OscConfig+0x4f8>
 8003000:	40021000 	.word	0x40021000
 8003004:	40007000 	.word	0x40007000
 8003008:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800300c:	4b0b      	ldr	r3, [pc, #44]	@ (800303c <HAL_RCC_OscConfig+0x500>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	429a      	cmp	r2, r3
 800301e:	d106      	bne.n	800302e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800302a:	429a      	cmp	r2, r3
 800302c:	d001      	beq.n	8003032 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e000      	b.n	8003034 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3718      	adds	r7, #24
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40021000 	.word	0x40021000

08003040 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e0d0      	b.n	80031f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003054:	4b6a      	ldr	r3, [pc, #424]	@ (8003200 <HAL_RCC_ClockConfig+0x1c0>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0307 	and.w	r3, r3, #7
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	429a      	cmp	r2, r3
 8003060:	d910      	bls.n	8003084 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003062:	4b67      	ldr	r3, [pc, #412]	@ (8003200 <HAL_RCC_ClockConfig+0x1c0>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f023 0207 	bic.w	r2, r3, #7
 800306a:	4965      	ldr	r1, [pc, #404]	@ (8003200 <HAL_RCC_ClockConfig+0x1c0>)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	4313      	orrs	r3, r2
 8003070:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003072:	4b63      	ldr	r3, [pc, #396]	@ (8003200 <HAL_RCC_ClockConfig+0x1c0>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	429a      	cmp	r2, r3
 800307e:	d001      	beq.n	8003084 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e0b8      	b.n	80031f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0302 	and.w	r3, r3, #2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d020      	beq.n	80030d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0304 	and.w	r3, r3, #4
 8003098:	2b00      	cmp	r3, #0
 800309a:	d005      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800309c:	4b59      	ldr	r3, [pc, #356]	@ (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	4a58      	ldr	r2, [pc, #352]	@ (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 80030a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80030a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0308 	and.w	r3, r3, #8
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d005      	beq.n	80030c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030b4:	4b53      	ldr	r3, [pc, #332]	@ (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	4a52      	ldr	r2, [pc, #328]	@ (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 80030ba:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80030be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030c0:	4b50      	ldr	r3, [pc, #320]	@ (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	494d      	ldr	r1, [pc, #308]	@ (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d040      	beq.n	8003160 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d107      	bne.n	80030f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030e6:	4b47      	ldr	r3, [pc, #284]	@ (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d115      	bne.n	800311e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e07f      	b.n	80031f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d107      	bne.n	800310e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030fe:	4b41      	ldr	r3, [pc, #260]	@ (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d109      	bne.n	800311e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e073      	b.n	80031f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800310e:	4b3d      	ldr	r3, [pc, #244]	@ (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e06b      	b.n	80031f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800311e:	4b39      	ldr	r3, [pc, #228]	@ (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f023 0203 	bic.w	r2, r3, #3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	4936      	ldr	r1, [pc, #216]	@ (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 800312c:	4313      	orrs	r3, r2
 800312e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003130:	f7fe f9f6 	bl	8001520 <HAL_GetTick>
 8003134:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003136:	e00a      	b.n	800314e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003138:	f7fe f9f2 	bl	8001520 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003146:	4293      	cmp	r3, r2
 8003148:	d901      	bls.n	800314e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e053      	b.n	80031f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800314e:	4b2d      	ldr	r3, [pc, #180]	@ (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f003 020c 	and.w	r2, r3, #12
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	429a      	cmp	r2, r3
 800315e:	d1eb      	bne.n	8003138 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003160:	4b27      	ldr	r3, [pc, #156]	@ (8003200 <HAL_RCC_ClockConfig+0x1c0>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	429a      	cmp	r2, r3
 800316c:	d210      	bcs.n	8003190 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800316e:	4b24      	ldr	r3, [pc, #144]	@ (8003200 <HAL_RCC_ClockConfig+0x1c0>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f023 0207 	bic.w	r2, r3, #7
 8003176:	4922      	ldr	r1, [pc, #136]	@ (8003200 <HAL_RCC_ClockConfig+0x1c0>)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	4313      	orrs	r3, r2
 800317c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800317e:	4b20      	ldr	r3, [pc, #128]	@ (8003200 <HAL_RCC_ClockConfig+0x1c0>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0307 	and.w	r3, r3, #7
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	429a      	cmp	r2, r3
 800318a:	d001      	beq.n	8003190 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e032      	b.n	80031f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0304 	and.w	r3, r3, #4
 8003198:	2b00      	cmp	r3, #0
 800319a:	d008      	beq.n	80031ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800319c:	4b19      	ldr	r3, [pc, #100]	@ (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	4916      	ldr	r1, [pc, #88]	@ (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0308 	and.w	r3, r3, #8
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d009      	beq.n	80031ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031ba:	4b12      	ldr	r3, [pc, #72]	@ (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	490e      	ldr	r1, [pc, #56]	@ (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031ce:	f000 f821 	bl	8003214 <HAL_RCC_GetSysClockFreq>
 80031d2:	4602      	mov	r2, r0
 80031d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	091b      	lsrs	r3, r3, #4
 80031da:	f003 030f 	and.w	r3, r3, #15
 80031de:	490a      	ldr	r1, [pc, #40]	@ (8003208 <HAL_RCC_ClockConfig+0x1c8>)
 80031e0:	5ccb      	ldrb	r3, [r1, r3]
 80031e2:	fa22 f303 	lsr.w	r3, r2, r3
 80031e6:	4a09      	ldr	r2, [pc, #36]	@ (800320c <HAL_RCC_ClockConfig+0x1cc>)
 80031e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031ea:	4b09      	ldr	r3, [pc, #36]	@ (8003210 <HAL_RCC_ClockConfig+0x1d0>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7fe f954 	bl	800149c <HAL_InitTick>

  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	40022000 	.word	0x40022000
 8003204:	40021000 	.word	0x40021000
 8003208:	08004a60 	.word	0x08004a60
 800320c:	20000008 	.word	0x20000008
 8003210:	2000000c 	.word	0x2000000c

08003214 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003214:	b480      	push	{r7}
 8003216:	b087      	sub	sp, #28
 8003218:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800321a:	2300      	movs	r3, #0
 800321c:	60fb      	str	r3, [r7, #12]
 800321e:	2300      	movs	r3, #0
 8003220:	60bb      	str	r3, [r7, #8]
 8003222:	2300      	movs	r3, #0
 8003224:	617b      	str	r3, [r7, #20]
 8003226:	2300      	movs	r3, #0
 8003228:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800322a:	2300      	movs	r3, #0
 800322c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800322e:	4b1e      	ldr	r3, [pc, #120]	@ (80032a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f003 030c 	and.w	r3, r3, #12
 800323a:	2b04      	cmp	r3, #4
 800323c:	d002      	beq.n	8003244 <HAL_RCC_GetSysClockFreq+0x30>
 800323e:	2b08      	cmp	r3, #8
 8003240:	d003      	beq.n	800324a <HAL_RCC_GetSysClockFreq+0x36>
 8003242:	e027      	b.n	8003294 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003244:	4b19      	ldr	r3, [pc, #100]	@ (80032ac <HAL_RCC_GetSysClockFreq+0x98>)
 8003246:	613b      	str	r3, [r7, #16]
      break;
 8003248:	e027      	b.n	800329a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	0c9b      	lsrs	r3, r3, #18
 800324e:	f003 030f 	and.w	r3, r3, #15
 8003252:	4a17      	ldr	r2, [pc, #92]	@ (80032b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003254:	5cd3      	ldrb	r3, [r2, r3]
 8003256:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d010      	beq.n	8003284 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003262:	4b11      	ldr	r3, [pc, #68]	@ (80032a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	0c5b      	lsrs	r3, r3, #17
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	4a11      	ldr	r2, [pc, #68]	@ (80032b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800326e:	5cd3      	ldrb	r3, [r2, r3]
 8003270:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a0d      	ldr	r2, [pc, #52]	@ (80032ac <HAL_RCC_GetSysClockFreq+0x98>)
 8003276:	fb03 f202 	mul.w	r2, r3, r2
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003280:	617b      	str	r3, [r7, #20]
 8003282:	e004      	b.n	800328e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a0c      	ldr	r2, [pc, #48]	@ (80032b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003288:	fb02 f303 	mul.w	r3, r2, r3
 800328c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	613b      	str	r3, [r7, #16]
      break;
 8003292:	e002      	b.n	800329a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003294:	4b05      	ldr	r3, [pc, #20]	@ (80032ac <HAL_RCC_GetSysClockFreq+0x98>)
 8003296:	613b      	str	r3, [r7, #16]
      break;
 8003298:	bf00      	nop
    }
  }
  return sysclockfreq;
 800329a:	693b      	ldr	r3, [r7, #16]
}
 800329c:	4618      	mov	r0, r3
 800329e:	371c      	adds	r7, #28
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bc80      	pop	{r7}
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	40021000 	.word	0x40021000
 80032ac:	007a1200 	.word	0x007a1200
 80032b0:	080057ec 	.word	0x080057ec
 80032b4:	080057fc 	.word	0x080057fc
 80032b8:	003d0900 	.word	0x003d0900

080032bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032c0:	4b02      	ldr	r3, [pc, #8]	@ (80032cc <HAL_RCC_GetHCLKFreq+0x10>)
 80032c2:	681b      	ldr	r3, [r3, #0]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bc80      	pop	{r7}
 80032ca:	4770      	bx	lr
 80032cc:	20000008 	.word	0x20000008

080032d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032d4:	f7ff fff2 	bl	80032bc <HAL_RCC_GetHCLKFreq>
 80032d8:	4602      	mov	r2, r0
 80032da:	4b05      	ldr	r3, [pc, #20]	@ (80032f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	0a1b      	lsrs	r3, r3, #8
 80032e0:	f003 0307 	and.w	r3, r3, #7
 80032e4:	4903      	ldr	r1, [pc, #12]	@ (80032f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032e6:	5ccb      	ldrb	r3, [r1, r3]
 80032e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	40021000 	.word	0x40021000
 80032f4:	08004a70 	.word	0x08004a70

080032f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032fc:	f7ff ffde 	bl	80032bc <HAL_RCC_GetHCLKFreq>
 8003300:	4602      	mov	r2, r0
 8003302:	4b05      	ldr	r3, [pc, #20]	@ (8003318 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	0adb      	lsrs	r3, r3, #11
 8003308:	f003 0307 	and.w	r3, r3, #7
 800330c:	4903      	ldr	r1, [pc, #12]	@ (800331c <HAL_RCC_GetPCLK2Freq+0x24>)
 800330e:	5ccb      	ldrb	r3, [r1, r3]
 8003310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003314:	4618      	mov	r0, r3
 8003316:	bd80      	pop	{r7, pc}
 8003318:	40021000 	.word	0x40021000
 800331c:	08004a70 	.word	0x08004a70

08003320 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003328:	4b0a      	ldr	r3, [pc, #40]	@ (8003354 <RCC_Delay+0x34>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a0a      	ldr	r2, [pc, #40]	@ (8003358 <RCC_Delay+0x38>)
 800332e:	fba2 2303 	umull	r2, r3, r2, r3
 8003332:	0a5b      	lsrs	r3, r3, #9
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	fb02 f303 	mul.w	r3, r2, r3
 800333a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800333c:	bf00      	nop
  }
  while (Delay --);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	1e5a      	subs	r2, r3, #1
 8003342:	60fa      	str	r2, [r7, #12]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1f9      	bne.n	800333c <RCC_Delay+0x1c>
}
 8003348:	bf00      	nop
 800334a:	bf00      	nop
 800334c:	3714      	adds	r7, #20
 800334e:	46bd      	mov	sp, r7
 8003350:	bc80      	pop	{r7}
 8003352:	4770      	bx	lr
 8003354:	20000008 	.word	0x20000008
 8003358:	10624dd3 	.word	0x10624dd3

0800335c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003364:	2300      	movs	r3, #0
 8003366:	613b      	str	r3, [r7, #16]
 8003368:	2300      	movs	r3, #0
 800336a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	2b00      	cmp	r3, #0
 8003376:	d07d      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003378:	2300      	movs	r3, #0
 800337a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800337c:	4b4f      	ldr	r3, [pc, #316]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800337e:	69db      	ldr	r3, [r3, #28]
 8003380:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10d      	bne.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003388:	4b4c      	ldr	r3, [pc, #304]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800338a:	69db      	ldr	r3, [r3, #28]
 800338c:	4a4b      	ldr	r2, [pc, #300]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800338e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003392:	61d3      	str	r3, [r2, #28]
 8003394:	4b49      	ldr	r3, [pc, #292]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003396:	69db      	ldr	r3, [r3, #28]
 8003398:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800339c:	60bb      	str	r3, [r7, #8]
 800339e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033a0:	2301      	movs	r3, #1
 80033a2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a4:	4b46      	ldr	r3, [pc, #280]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d118      	bne.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033b0:	4b43      	ldr	r3, [pc, #268]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a42      	ldr	r2, [pc, #264]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033bc:	f7fe f8b0 	bl	8001520 <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c2:	e008      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033c4:	f7fe f8ac 	bl	8001520 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b64      	cmp	r3, #100	@ 0x64
 80033d0:	d901      	bls.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e06d      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d6:	4b3a      	ldr	r3, [pc, #232]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d0f0      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033e2:	4b36      	ldr	r3, [pc, #216]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033ea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d02e      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d027      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003400:	4b2e      	ldr	r3, [pc, #184]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003408:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800340a:	4b2e      	ldr	r3, [pc, #184]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800340c:	2201      	movs	r2, #1
 800340e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003410:	4b2c      	ldr	r3, [pc, #176]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003412:	2200      	movs	r2, #0
 8003414:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003416:	4a29      	ldr	r2, [pc, #164]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b00      	cmp	r3, #0
 8003424:	d014      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003426:	f7fe f87b 	bl	8001520 <HAL_GetTick>
 800342a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800342c:	e00a      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800342e:	f7fe f877 	bl	8001520 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	f241 3288 	movw	r2, #5000	@ 0x1388
 800343c:	4293      	cmp	r3, r2
 800343e:	d901      	bls.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e036      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003444:	4b1d      	ldr	r3, [pc, #116]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d0ee      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003450:	4b1a      	ldr	r3, [pc, #104]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	4917      	ldr	r1, [pc, #92]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800345e:	4313      	orrs	r3, r2
 8003460:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003462:	7dfb      	ldrb	r3, [r7, #23]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d105      	bne.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003468:	4b14      	ldr	r3, [pc, #80]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800346a:	69db      	ldr	r3, [r3, #28]
 800346c:	4a13      	ldr	r2, [pc, #76]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800346e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003472:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d008      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003480:	4b0e      	ldr	r3, [pc, #56]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	490b      	ldr	r1, [pc, #44]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800348e:	4313      	orrs	r3, r2
 8003490:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0310 	and.w	r3, r3, #16
 800349a:	2b00      	cmp	r3, #0
 800349c:	d008      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800349e:	4b07      	ldr	r3, [pc, #28]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	4904      	ldr	r1, [pc, #16]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3718      	adds	r7, #24
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	40021000 	.word	0x40021000
 80034c0:	40007000 	.word	0x40007000
 80034c4:	42420440 	.word	0x42420440

080034c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e042      	b.n	8003560 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d106      	bne.n	80034f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f7fd fb78 	bl	8000be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2224      	movs	r2, #36	@ 0x24
 80034f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68da      	ldr	r2, [r3, #12]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800350a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 f82b 	bl	8003568 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	691a      	ldr	r2, [r3, #16]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003520:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	695a      	ldr	r2, [r3, #20]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003530:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68da      	ldr	r2, [r3, #12]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003540:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2220      	movs	r2, #32
 800354c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2220      	movs	r2, #32
 8003554:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3708      	adds	r7, #8
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68da      	ldr	r2, [r3, #12]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689a      	ldr	r2, [r3, #8]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	4313      	orrs	r3, r2
 8003596:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80035a2:	f023 030c 	bic.w	r3, r3, #12
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	6812      	ldr	r2, [r2, #0]
 80035aa:	68b9      	ldr	r1, [r7, #8]
 80035ac:	430b      	orrs	r3, r1
 80035ae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	699a      	ldr	r2, [r3, #24]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	430a      	orrs	r2, r1
 80035c4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a2c      	ldr	r2, [pc, #176]	@ (800367c <UART_SetConfig+0x114>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d103      	bne.n	80035d8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80035d0:	f7ff fe92 	bl	80032f8 <HAL_RCC_GetPCLK2Freq>
 80035d4:	60f8      	str	r0, [r7, #12]
 80035d6:	e002      	b.n	80035de <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80035d8:	f7ff fe7a 	bl	80032d0 <HAL_RCC_GetPCLK1Freq>
 80035dc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	4613      	mov	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4413      	add	r3, r2
 80035e6:	009a      	lsls	r2, r3, #2
 80035e8:	441a      	add	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f4:	4a22      	ldr	r2, [pc, #136]	@ (8003680 <UART_SetConfig+0x118>)
 80035f6:	fba2 2303 	umull	r2, r3, r2, r3
 80035fa:	095b      	lsrs	r3, r3, #5
 80035fc:	0119      	lsls	r1, r3, #4
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	4613      	mov	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	009a      	lsls	r2, r3, #2
 8003608:	441a      	add	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	fbb2 f2f3 	udiv	r2, r2, r3
 8003614:	4b1a      	ldr	r3, [pc, #104]	@ (8003680 <UART_SetConfig+0x118>)
 8003616:	fba3 0302 	umull	r0, r3, r3, r2
 800361a:	095b      	lsrs	r3, r3, #5
 800361c:	2064      	movs	r0, #100	@ 0x64
 800361e:	fb00 f303 	mul.w	r3, r0, r3
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	011b      	lsls	r3, r3, #4
 8003626:	3332      	adds	r3, #50	@ 0x32
 8003628:	4a15      	ldr	r2, [pc, #84]	@ (8003680 <UART_SetConfig+0x118>)
 800362a:	fba2 2303 	umull	r2, r3, r2, r3
 800362e:	095b      	lsrs	r3, r3, #5
 8003630:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003634:	4419      	add	r1, r3
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	4613      	mov	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4413      	add	r3, r2
 800363e:	009a      	lsls	r2, r3, #2
 8003640:	441a      	add	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	fbb2 f2f3 	udiv	r2, r2, r3
 800364c:	4b0c      	ldr	r3, [pc, #48]	@ (8003680 <UART_SetConfig+0x118>)
 800364e:	fba3 0302 	umull	r0, r3, r3, r2
 8003652:	095b      	lsrs	r3, r3, #5
 8003654:	2064      	movs	r0, #100	@ 0x64
 8003656:	fb00 f303 	mul.w	r3, r0, r3
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	011b      	lsls	r3, r3, #4
 800365e:	3332      	adds	r3, #50	@ 0x32
 8003660:	4a07      	ldr	r2, [pc, #28]	@ (8003680 <UART_SetConfig+0x118>)
 8003662:	fba2 2303 	umull	r2, r3, r2, r3
 8003666:	095b      	lsrs	r3, r3, #5
 8003668:	f003 020f 	and.w	r2, r3, #15
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	440a      	add	r2, r1
 8003672:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003674:	bf00      	nop
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	40013800 	.word	0x40013800
 8003680:	51eb851f 	.word	0x51eb851f

08003684 <rand>:
 8003684:	4b16      	ldr	r3, [pc, #88]	@ (80036e0 <rand+0x5c>)
 8003686:	b510      	push	{r4, lr}
 8003688:	681c      	ldr	r4, [r3, #0]
 800368a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800368c:	b9b3      	cbnz	r3, 80036bc <rand+0x38>
 800368e:	2018      	movs	r0, #24
 8003690:	f000 fa66 	bl	8003b60 <malloc>
 8003694:	4602      	mov	r2, r0
 8003696:	6320      	str	r0, [r4, #48]	@ 0x30
 8003698:	b920      	cbnz	r0, 80036a4 <rand+0x20>
 800369a:	2152      	movs	r1, #82	@ 0x52
 800369c:	4b11      	ldr	r3, [pc, #68]	@ (80036e4 <rand+0x60>)
 800369e:	4812      	ldr	r0, [pc, #72]	@ (80036e8 <rand+0x64>)
 80036a0:	f000 f9f8 	bl	8003a94 <__assert_func>
 80036a4:	4911      	ldr	r1, [pc, #68]	@ (80036ec <rand+0x68>)
 80036a6:	4b12      	ldr	r3, [pc, #72]	@ (80036f0 <rand+0x6c>)
 80036a8:	e9c0 1300 	strd	r1, r3, [r0]
 80036ac:	4b11      	ldr	r3, [pc, #68]	@ (80036f4 <rand+0x70>)
 80036ae:	2100      	movs	r1, #0
 80036b0:	6083      	str	r3, [r0, #8]
 80036b2:	230b      	movs	r3, #11
 80036b4:	8183      	strh	r3, [r0, #12]
 80036b6:	2001      	movs	r0, #1
 80036b8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80036bc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80036be:	480e      	ldr	r0, [pc, #56]	@ (80036f8 <rand+0x74>)
 80036c0:	690b      	ldr	r3, [r1, #16]
 80036c2:	694c      	ldr	r4, [r1, #20]
 80036c4:	4358      	muls	r0, r3
 80036c6:	4a0d      	ldr	r2, [pc, #52]	@ (80036fc <rand+0x78>)
 80036c8:	fb02 0004 	mla	r0, r2, r4, r0
 80036cc:	fba3 3202 	umull	r3, r2, r3, r2
 80036d0:	3301      	adds	r3, #1
 80036d2:	eb40 0002 	adc.w	r0, r0, r2
 80036d6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80036da:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80036de:	bd10      	pop	{r4, pc}
 80036e0:	20000020 	.word	0x20000020
 80036e4:	080057fe 	.word	0x080057fe
 80036e8:	08005815 	.word	0x08005815
 80036ec:	abcd330e 	.word	0xabcd330e
 80036f0:	e66d1234 	.word	0xe66d1234
 80036f4:	0005deec 	.word	0x0005deec
 80036f8:	5851f42d 	.word	0x5851f42d
 80036fc:	4c957f2d 	.word	0x4c957f2d

08003700 <std>:
 8003700:	2300      	movs	r3, #0
 8003702:	b510      	push	{r4, lr}
 8003704:	4604      	mov	r4, r0
 8003706:	e9c0 3300 	strd	r3, r3, [r0]
 800370a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800370e:	6083      	str	r3, [r0, #8]
 8003710:	8181      	strh	r1, [r0, #12]
 8003712:	6643      	str	r3, [r0, #100]	@ 0x64
 8003714:	81c2      	strh	r2, [r0, #14]
 8003716:	6183      	str	r3, [r0, #24]
 8003718:	4619      	mov	r1, r3
 800371a:	2208      	movs	r2, #8
 800371c:	305c      	adds	r0, #92	@ 0x5c
 800371e:	f000 f92e 	bl	800397e <memset>
 8003722:	4b0d      	ldr	r3, [pc, #52]	@ (8003758 <std+0x58>)
 8003724:	6224      	str	r4, [r4, #32]
 8003726:	6263      	str	r3, [r4, #36]	@ 0x24
 8003728:	4b0c      	ldr	r3, [pc, #48]	@ (800375c <std+0x5c>)
 800372a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800372c:	4b0c      	ldr	r3, [pc, #48]	@ (8003760 <std+0x60>)
 800372e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003730:	4b0c      	ldr	r3, [pc, #48]	@ (8003764 <std+0x64>)
 8003732:	6323      	str	r3, [r4, #48]	@ 0x30
 8003734:	4b0c      	ldr	r3, [pc, #48]	@ (8003768 <std+0x68>)
 8003736:	429c      	cmp	r4, r3
 8003738:	d006      	beq.n	8003748 <std+0x48>
 800373a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800373e:	4294      	cmp	r4, r2
 8003740:	d002      	beq.n	8003748 <std+0x48>
 8003742:	33d0      	adds	r3, #208	@ 0xd0
 8003744:	429c      	cmp	r4, r3
 8003746:	d105      	bne.n	8003754 <std+0x54>
 8003748:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800374c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003750:	f000 b98e 	b.w	8003a70 <__retarget_lock_init_recursive>
 8003754:	bd10      	pop	{r4, pc}
 8003756:	bf00      	nop
 8003758:	080038c5 	.word	0x080038c5
 800375c:	080038e7 	.word	0x080038e7
 8003760:	0800391f 	.word	0x0800391f
 8003764:	08003943 	.word	0x08003943
 8003768:	200005c4 	.word	0x200005c4

0800376c <stdio_exit_handler>:
 800376c:	4a02      	ldr	r2, [pc, #8]	@ (8003778 <stdio_exit_handler+0xc>)
 800376e:	4903      	ldr	r1, [pc, #12]	@ (800377c <stdio_exit_handler+0x10>)
 8003770:	4803      	ldr	r0, [pc, #12]	@ (8003780 <stdio_exit_handler+0x14>)
 8003772:	f000 b869 	b.w	8003848 <_fwalk_sglue>
 8003776:	bf00      	nop
 8003778:	20000014 	.word	0x20000014
 800377c:	080043a1 	.word	0x080043a1
 8003780:	20000024 	.word	0x20000024

08003784 <cleanup_stdio>:
 8003784:	6841      	ldr	r1, [r0, #4]
 8003786:	4b0c      	ldr	r3, [pc, #48]	@ (80037b8 <cleanup_stdio+0x34>)
 8003788:	b510      	push	{r4, lr}
 800378a:	4299      	cmp	r1, r3
 800378c:	4604      	mov	r4, r0
 800378e:	d001      	beq.n	8003794 <cleanup_stdio+0x10>
 8003790:	f000 fe06 	bl	80043a0 <_fflush_r>
 8003794:	68a1      	ldr	r1, [r4, #8]
 8003796:	4b09      	ldr	r3, [pc, #36]	@ (80037bc <cleanup_stdio+0x38>)
 8003798:	4299      	cmp	r1, r3
 800379a:	d002      	beq.n	80037a2 <cleanup_stdio+0x1e>
 800379c:	4620      	mov	r0, r4
 800379e:	f000 fdff 	bl	80043a0 <_fflush_r>
 80037a2:	68e1      	ldr	r1, [r4, #12]
 80037a4:	4b06      	ldr	r3, [pc, #24]	@ (80037c0 <cleanup_stdio+0x3c>)
 80037a6:	4299      	cmp	r1, r3
 80037a8:	d004      	beq.n	80037b4 <cleanup_stdio+0x30>
 80037aa:	4620      	mov	r0, r4
 80037ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037b0:	f000 bdf6 	b.w	80043a0 <_fflush_r>
 80037b4:	bd10      	pop	{r4, pc}
 80037b6:	bf00      	nop
 80037b8:	200005c4 	.word	0x200005c4
 80037bc:	2000062c 	.word	0x2000062c
 80037c0:	20000694 	.word	0x20000694

080037c4 <global_stdio_init.part.0>:
 80037c4:	b510      	push	{r4, lr}
 80037c6:	4b0b      	ldr	r3, [pc, #44]	@ (80037f4 <global_stdio_init.part.0+0x30>)
 80037c8:	4c0b      	ldr	r4, [pc, #44]	@ (80037f8 <global_stdio_init.part.0+0x34>)
 80037ca:	4a0c      	ldr	r2, [pc, #48]	@ (80037fc <global_stdio_init.part.0+0x38>)
 80037cc:	4620      	mov	r0, r4
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	2104      	movs	r1, #4
 80037d2:	2200      	movs	r2, #0
 80037d4:	f7ff ff94 	bl	8003700 <std>
 80037d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80037dc:	2201      	movs	r2, #1
 80037de:	2109      	movs	r1, #9
 80037e0:	f7ff ff8e 	bl	8003700 <std>
 80037e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80037e8:	2202      	movs	r2, #2
 80037ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037ee:	2112      	movs	r1, #18
 80037f0:	f7ff bf86 	b.w	8003700 <std>
 80037f4:	200006fc 	.word	0x200006fc
 80037f8:	200005c4 	.word	0x200005c4
 80037fc:	0800376d 	.word	0x0800376d

08003800 <__sfp_lock_acquire>:
 8003800:	4801      	ldr	r0, [pc, #4]	@ (8003808 <__sfp_lock_acquire+0x8>)
 8003802:	f000 b936 	b.w	8003a72 <__retarget_lock_acquire_recursive>
 8003806:	bf00      	nop
 8003808:	20000705 	.word	0x20000705

0800380c <__sfp_lock_release>:
 800380c:	4801      	ldr	r0, [pc, #4]	@ (8003814 <__sfp_lock_release+0x8>)
 800380e:	f000 b931 	b.w	8003a74 <__retarget_lock_release_recursive>
 8003812:	bf00      	nop
 8003814:	20000705 	.word	0x20000705

08003818 <__sinit>:
 8003818:	b510      	push	{r4, lr}
 800381a:	4604      	mov	r4, r0
 800381c:	f7ff fff0 	bl	8003800 <__sfp_lock_acquire>
 8003820:	6a23      	ldr	r3, [r4, #32]
 8003822:	b11b      	cbz	r3, 800382c <__sinit+0x14>
 8003824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003828:	f7ff bff0 	b.w	800380c <__sfp_lock_release>
 800382c:	4b04      	ldr	r3, [pc, #16]	@ (8003840 <__sinit+0x28>)
 800382e:	6223      	str	r3, [r4, #32]
 8003830:	4b04      	ldr	r3, [pc, #16]	@ (8003844 <__sinit+0x2c>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1f5      	bne.n	8003824 <__sinit+0xc>
 8003838:	f7ff ffc4 	bl	80037c4 <global_stdio_init.part.0>
 800383c:	e7f2      	b.n	8003824 <__sinit+0xc>
 800383e:	bf00      	nop
 8003840:	08003785 	.word	0x08003785
 8003844:	200006fc 	.word	0x200006fc

08003848 <_fwalk_sglue>:
 8003848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800384c:	4607      	mov	r7, r0
 800384e:	4688      	mov	r8, r1
 8003850:	4614      	mov	r4, r2
 8003852:	2600      	movs	r6, #0
 8003854:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003858:	f1b9 0901 	subs.w	r9, r9, #1
 800385c:	d505      	bpl.n	800386a <_fwalk_sglue+0x22>
 800385e:	6824      	ldr	r4, [r4, #0]
 8003860:	2c00      	cmp	r4, #0
 8003862:	d1f7      	bne.n	8003854 <_fwalk_sglue+0xc>
 8003864:	4630      	mov	r0, r6
 8003866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800386a:	89ab      	ldrh	r3, [r5, #12]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d907      	bls.n	8003880 <_fwalk_sglue+0x38>
 8003870:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003874:	3301      	adds	r3, #1
 8003876:	d003      	beq.n	8003880 <_fwalk_sglue+0x38>
 8003878:	4629      	mov	r1, r5
 800387a:	4638      	mov	r0, r7
 800387c:	47c0      	blx	r8
 800387e:	4306      	orrs	r6, r0
 8003880:	3568      	adds	r5, #104	@ 0x68
 8003882:	e7e9      	b.n	8003858 <_fwalk_sglue+0x10>

08003884 <siprintf>:
 8003884:	b40e      	push	{r1, r2, r3}
 8003886:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800388a:	b500      	push	{lr}
 800388c:	b09c      	sub	sp, #112	@ 0x70
 800388e:	ab1d      	add	r3, sp, #116	@ 0x74
 8003890:	9002      	str	r0, [sp, #8]
 8003892:	9006      	str	r0, [sp, #24]
 8003894:	9107      	str	r1, [sp, #28]
 8003896:	9104      	str	r1, [sp, #16]
 8003898:	4808      	ldr	r0, [pc, #32]	@ (80038bc <siprintf+0x38>)
 800389a:	4909      	ldr	r1, [pc, #36]	@ (80038c0 <siprintf+0x3c>)
 800389c:	f853 2b04 	ldr.w	r2, [r3], #4
 80038a0:	9105      	str	r1, [sp, #20]
 80038a2:	6800      	ldr	r0, [r0, #0]
 80038a4:	a902      	add	r1, sp, #8
 80038a6:	9301      	str	r3, [sp, #4]
 80038a8:	f000 fa6c 	bl	8003d84 <_svfiprintf_r>
 80038ac:	2200      	movs	r2, #0
 80038ae:	9b02      	ldr	r3, [sp, #8]
 80038b0:	701a      	strb	r2, [r3, #0]
 80038b2:	b01c      	add	sp, #112	@ 0x70
 80038b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80038b8:	b003      	add	sp, #12
 80038ba:	4770      	bx	lr
 80038bc:	20000020 	.word	0x20000020
 80038c0:	ffff0208 	.word	0xffff0208

080038c4 <__sread>:
 80038c4:	b510      	push	{r4, lr}
 80038c6:	460c      	mov	r4, r1
 80038c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038cc:	f000 f882 	bl	80039d4 <_read_r>
 80038d0:	2800      	cmp	r0, #0
 80038d2:	bfab      	itete	ge
 80038d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80038d6:	89a3      	ldrhlt	r3, [r4, #12]
 80038d8:	181b      	addge	r3, r3, r0
 80038da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80038de:	bfac      	ite	ge
 80038e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80038e2:	81a3      	strhlt	r3, [r4, #12]
 80038e4:	bd10      	pop	{r4, pc}

080038e6 <__swrite>:
 80038e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038ea:	461f      	mov	r7, r3
 80038ec:	898b      	ldrh	r3, [r1, #12]
 80038ee:	4605      	mov	r5, r0
 80038f0:	05db      	lsls	r3, r3, #23
 80038f2:	460c      	mov	r4, r1
 80038f4:	4616      	mov	r6, r2
 80038f6:	d505      	bpl.n	8003904 <__swrite+0x1e>
 80038f8:	2302      	movs	r3, #2
 80038fa:	2200      	movs	r2, #0
 80038fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003900:	f000 f856 	bl	80039b0 <_lseek_r>
 8003904:	89a3      	ldrh	r3, [r4, #12]
 8003906:	4632      	mov	r2, r6
 8003908:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800390c:	81a3      	strh	r3, [r4, #12]
 800390e:	4628      	mov	r0, r5
 8003910:	463b      	mov	r3, r7
 8003912:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003916:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800391a:	f000 b86d 	b.w	80039f8 <_write_r>

0800391e <__sseek>:
 800391e:	b510      	push	{r4, lr}
 8003920:	460c      	mov	r4, r1
 8003922:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003926:	f000 f843 	bl	80039b0 <_lseek_r>
 800392a:	1c43      	adds	r3, r0, #1
 800392c:	89a3      	ldrh	r3, [r4, #12]
 800392e:	bf15      	itete	ne
 8003930:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003932:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003936:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800393a:	81a3      	strheq	r3, [r4, #12]
 800393c:	bf18      	it	ne
 800393e:	81a3      	strhne	r3, [r4, #12]
 8003940:	bd10      	pop	{r4, pc}

08003942 <__sclose>:
 8003942:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003946:	f000 b823 	b.w	8003990 <_close_r>

0800394a <memmove>:
 800394a:	4288      	cmp	r0, r1
 800394c:	b510      	push	{r4, lr}
 800394e:	eb01 0402 	add.w	r4, r1, r2
 8003952:	d902      	bls.n	800395a <memmove+0x10>
 8003954:	4284      	cmp	r4, r0
 8003956:	4623      	mov	r3, r4
 8003958:	d807      	bhi.n	800396a <memmove+0x20>
 800395a:	1e43      	subs	r3, r0, #1
 800395c:	42a1      	cmp	r1, r4
 800395e:	d008      	beq.n	8003972 <memmove+0x28>
 8003960:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003964:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003968:	e7f8      	b.n	800395c <memmove+0x12>
 800396a:	4601      	mov	r1, r0
 800396c:	4402      	add	r2, r0
 800396e:	428a      	cmp	r2, r1
 8003970:	d100      	bne.n	8003974 <memmove+0x2a>
 8003972:	bd10      	pop	{r4, pc}
 8003974:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003978:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800397c:	e7f7      	b.n	800396e <memmove+0x24>

0800397e <memset>:
 800397e:	4603      	mov	r3, r0
 8003980:	4402      	add	r2, r0
 8003982:	4293      	cmp	r3, r2
 8003984:	d100      	bne.n	8003988 <memset+0xa>
 8003986:	4770      	bx	lr
 8003988:	f803 1b01 	strb.w	r1, [r3], #1
 800398c:	e7f9      	b.n	8003982 <memset+0x4>
	...

08003990 <_close_r>:
 8003990:	b538      	push	{r3, r4, r5, lr}
 8003992:	2300      	movs	r3, #0
 8003994:	4d05      	ldr	r5, [pc, #20]	@ (80039ac <_close_r+0x1c>)
 8003996:	4604      	mov	r4, r0
 8003998:	4608      	mov	r0, r1
 800399a:	602b      	str	r3, [r5, #0]
 800399c:	f7fd f9ff 	bl	8000d9e <_close>
 80039a0:	1c43      	adds	r3, r0, #1
 80039a2:	d102      	bne.n	80039aa <_close_r+0x1a>
 80039a4:	682b      	ldr	r3, [r5, #0]
 80039a6:	b103      	cbz	r3, 80039aa <_close_r+0x1a>
 80039a8:	6023      	str	r3, [r4, #0]
 80039aa:	bd38      	pop	{r3, r4, r5, pc}
 80039ac:	20000700 	.word	0x20000700

080039b0 <_lseek_r>:
 80039b0:	b538      	push	{r3, r4, r5, lr}
 80039b2:	4604      	mov	r4, r0
 80039b4:	4608      	mov	r0, r1
 80039b6:	4611      	mov	r1, r2
 80039b8:	2200      	movs	r2, #0
 80039ba:	4d05      	ldr	r5, [pc, #20]	@ (80039d0 <_lseek_r+0x20>)
 80039bc:	602a      	str	r2, [r5, #0]
 80039be:	461a      	mov	r2, r3
 80039c0:	f7fd fa11 	bl	8000de6 <_lseek>
 80039c4:	1c43      	adds	r3, r0, #1
 80039c6:	d102      	bne.n	80039ce <_lseek_r+0x1e>
 80039c8:	682b      	ldr	r3, [r5, #0]
 80039ca:	b103      	cbz	r3, 80039ce <_lseek_r+0x1e>
 80039cc:	6023      	str	r3, [r4, #0]
 80039ce:	bd38      	pop	{r3, r4, r5, pc}
 80039d0:	20000700 	.word	0x20000700

080039d4 <_read_r>:
 80039d4:	b538      	push	{r3, r4, r5, lr}
 80039d6:	4604      	mov	r4, r0
 80039d8:	4608      	mov	r0, r1
 80039da:	4611      	mov	r1, r2
 80039dc:	2200      	movs	r2, #0
 80039de:	4d05      	ldr	r5, [pc, #20]	@ (80039f4 <_read_r+0x20>)
 80039e0:	602a      	str	r2, [r5, #0]
 80039e2:	461a      	mov	r2, r3
 80039e4:	f7fd f9a2 	bl	8000d2c <_read>
 80039e8:	1c43      	adds	r3, r0, #1
 80039ea:	d102      	bne.n	80039f2 <_read_r+0x1e>
 80039ec:	682b      	ldr	r3, [r5, #0]
 80039ee:	b103      	cbz	r3, 80039f2 <_read_r+0x1e>
 80039f0:	6023      	str	r3, [r4, #0]
 80039f2:	bd38      	pop	{r3, r4, r5, pc}
 80039f4:	20000700 	.word	0x20000700

080039f8 <_write_r>:
 80039f8:	b538      	push	{r3, r4, r5, lr}
 80039fa:	4604      	mov	r4, r0
 80039fc:	4608      	mov	r0, r1
 80039fe:	4611      	mov	r1, r2
 8003a00:	2200      	movs	r2, #0
 8003a02:	4d05      	ldr	r5, [pc, #20]	@ (8003a18 <_write_r+0x20>)
 8003a04:	602a      	str	r2, [r5, #0]
 8003a06:	461a      	mov	r2, r3
 8003a08:	f7fd f9ad 	bl	8000d66 <_write>
 8003a0c:	1c43      	adds	r3, r0, #1
 8003a0e:	d102      	bne.n	8003a16 <_write_r+0x1e>
 8003a10:	682b      	ldr	r3, [r5, #0]
 8003a12:	b103      	cbz	r3, 8003a16 <_write_r+0x1e>
 8003a14:	6023      	str	r3, [r4, #0]
 8003a16:	bd38      	pop	{r3, r4, r5, pc}
 8003a18:	20000700 	.word	0x20000700

08003a1c <__errno>:
 8003a1c:	4b01      	ldr	r3, [pc, #4]	@ (8003a24 <__errno+0x8>)
 8003a1e:	6818      	ldr	r0, [r3, #0]
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	20000020 	.word	0x20000020

08003a28 <__libc_init_array>:
 8003a28:	b570      	push	{r4, r5, r6, lr}
 8003a2a:	2600      	movs	r6, #0
 8003a2c:	4d0c      	ldr	r5, [pc, #48]	@ (8003a60 <__libc_init_array+0x38>)
 8003a2e:	4c0d      	ldr	r4, [pc, #52]	@ (8003a64 <__libc_init_array+0x3c>)
 8003a30:	1b64      	subs	r4, r4, r5
 8003a32:	10a4      	asrs	r4, r4, #2
 8003a34:	42a6      	cmp	r6, r4
 8003a36:	d109      	bne.n	8003a4c <__libc_init_array+0x24>
 8003a38:	f000 ffe2 	bl	8004a00 <_init>
 8003a3c:	2600      	movs	r6, #0
 8003a3e:	4d0a      	ldr	r5, [pc, #40]	@ (8003a68 <__libc_init_array+0x40>)
 8003a40:	4c0a      	ldr	r4, [pc, #40]	@ (8003a6c <__libc_init_array+0x44>)
 8003a42:	1b64      	subs	r4, r4, r5
 8003a44:	10a4      	asrs	r4, r4, #2
 8003a46:	42a6      	cmp	r6, r4
 8003a48:	d105      	bne.n	8003a56 <__libc_init_array+0x2e>
 8003a4a:	bd70      	pop	{r4, r5, r6, pc}
 8003a4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a50:	4798      	blx	r3
 8003a52:	3601      	adds	r6, #1
 8003a54:	e7ee      	b.n	8003a34 <__libc_init_array+0xc>
 8003a56:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a5a:	4798      	blx	r3
 8003a5c:	3601      	adds	r6, #1
 8003a5e:	e7f2      	b.n	8003a46 <__libc_init_array+0x1e>
 8003a60:	080058dc 	.word	0x080058dc
 8003a64:	080058dc 	.word	0x080058dc
 8003a68:	080058dc 	.word	0x080058dc
 8003a6c:	080058e0 	.word	0x080058e0

08003a70 <__retarget_lock_init_recursive>:
 8003a70:	4770      	bx	lr

08003a72 <__retarget_lock_acquire_recursive>:
 8003a72:	4770      	bx	lr

08003a74 <__retarget_lock_release_recursive>:
 8003a74:	4770      	bx	lr

08003a76 <memcpy>:
 8003a76:	440a      	add	r2, r1
 8003a78:	4291      	cmp	r1, r2
 8003a7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8003a7e:	d100      	bne.n	8003a82 <memcpy+0xc>
 8003a80:	4770      	bx	lr
 8003a82:	b510      	push	{r4, lr}
 8003a84:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a88:	4291      	cmp	r1, r2
 8003a8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a8e:	d1f9      	bne.n	8003a84 <memcpy+0xe>
 8003a90:	bd10      	pop	{r4, pc}
	...

08003a94 <__assert_func>:
 8003a94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003a96:	4614      	mov	r4, r2
 8003a98:	461a      	mov	r2, r3
 8003a9a:	4b09      	ldr	r3, [pc, #36]	@ (8003ac0 <__assert_func+0x2c>)
 8003a9c:	4605      	mov	r5, r0
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68d8      	ldr	r0, [r3, #12]
 8003aa2:	b954      	cbnz	r4, 8003aba <__assert_func+0x26>
 8003aa4:	4b07      	ldr	r3, [pc, #28]	@ (8003ac4 <__assert_func+0x30>)
 8003aa6:	461c      	mov	r4, r3
 8003aa8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003aac:	9100      	str	r1, [sp, #0]
 8003aae:	462b      	mov	r3, r5
 8003ab0:	4905      	ldr	r1, [pc, #20]	@ (8003ac8 <__assert_func+0x34>)
 8003ab2:	f000 fc9d 	bl	80043f0 <fiprintf>
 8003ab6:	f000 fccb 	bl	8004450 <abort>
 8003aba:	4b04      	ldr	r3, [pc, #16]	@ (8003acc <__assert_func+0x38>)
 8003abc:	e7f4      	b.n	8003aa8 <__assert_func+0x14>
 8003abe:	bf00      	nop
 8003ac0:	20000020 	.word	0x20000020
 8003ac4:	080058a8 	.word	0x080058a8
 8003ac8:	0800587a 	.word	0x0800587a
 8003acc:	0800586d 	.word	0x0800586d

08003ad0 <_free_r>:
 8003ad0:	b538      	push	{r3, r4, r5, lr}
 8003ad2:	4605      	mov	r5, r0
 8003ad4:	2900      	cmp	r1, #0
 8003ad6:	d040      	beq.n	8003b5a <_free_r+0x8a>
 8003ad8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003adc:	1f0c      	subs	r4, r1, #4
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	bfb8      	it	lt
 8003ae2:	18e4      	addlt	r4, r4, r3
 8003ae4:	f000 f8e6 	bl	8003cb4 <__malloc_lock>
 8003ae8:	4a1c      	ldr	r2, [pc, #112]	@ (8003b5c <_free_r+0x8c>)
 8003aea:	6813      	ldr	r3, [r2, #0]
 8003aec:	b933      	cbnz	r3, 8003afc <_free_r+0x2c>
 8003aee:	6063      	str	r3, [r4, #4]
 8003af0:	6014      	str	r4, [r2, #0]
 8003af2:	4628      	mov	r0, r5
 8003af4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003af8:	f000 b8e2 	b.w	8003cc0 <__malloc_unlock>
 8003afc:	42a3      	cmp	r3, r4
 8003afe:	d908      	bls.n	8003b12 <_free_r+0x42>
 8003b00:	6820      	ldr	r0, [r4, #0]
 8003b02:	1821      	adds	r1, r4, r0
 8003b04:	428b      	cmp	r3, r1
 8003b06:	bf01      	itttt	eq
 8003b08:	6819      	ldreq	r1, [r3, #0]
 8003b0a:	685b      	ldreq	r3, [r3, #4]
 8003b0c:	1809      	addeq	r1, r1, r0
 8003b0e:	6021      	streq	r1, [r4, #0]
 8003b10:	e7ed      	b.n	8003aee <_free_r+0x1e>
 8003b12:	461a      	mov	r2, r3
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	b10b      	cbz	r3, 8003b1c <_free_r+0x4c>
 8003b18:	42a3      	cmp	r3, r4
 8003b1a:	d9fa      	bls.n	8003b12 <_free_r+0x42>
 8003b1c:	6811      	ldr	r1, [r2, #0]
 8003b1e:	1850      	adds	r0, r2, r1
 8003b20:	42a0      	cmp	r0, r4
 8003b22:	d10b      	bne.n	8003b3c <_free_r+0x6c>
 8003b24:	6820      	ldr	r0, [r4, #0]
 8003b26:	4401      	add	r1, r0
 8003b28:	1850      	adds	r0, r2, r1
 8003b2a:	4283      	cmp	r3, r0
 8003b2c:	6011      	str	r1, [r2, #0]
 8003b2e:	d1e0      	bne.n	8003af2 <_free_r+0x22>
 8003b30:	6818      	ldr	r0, [r3, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	4408      	add	r0, r1
 8003b36:	6010      	str	r0, [r2, #0]
 8003b38:	6053      	str	r3, [r2, #4]
 8003b3a:	e7da      	b.n	8003af2 <_free_r+0x22>
 8003b3c:	d902      	bls.n	8003b44 <_free_r+0x74>
 8003b3e:	230c      	movs	r3, #12
 8003b40:	602b      	str	r3, [r5, #0]
 8003b42:	e7d6      	b.n	8003af2 <_free_r+0x22>
 8003b44:	6820      	ldr	r0, [r4, #0]
 8003b46:	1821      	adds	r1, r4, r0
 8003b48:	428b      	cmp	r3, r1
 8003b4a:	bf01      	itttt	eq
 8003b4c:	6819      	ldreq	r1, [r3, #0]
 8003b4e:	685b      	ldreq	r3, [r3, #4]
 8003b50:	1809      	addeq	r1, r1, r0
 8003b52:	6021      	streq	r1, [r4, #0]
 8003b54:	6063      	str	r3, [r4, #4]
 8003b56:	6054      	str	r4, [r2, #4]
 8003b58:	e7cb      	b.n	8003af2 <_free_r+0x22>
 8003b5a:	bd38      	pop	{r3, r4, r5, pc}
 8003b5c:	2000070c 	.word	0x2000070c

08003b60 <malloc>:
 8003b60:	4b02      	ldr	r3, [pc, #8]	@ (8003b6c <malloc+0xc>)
 8003b62:	4601      	mov	r1, r0
 8003b64:	6818      	ldr	r0, [r3, #0]
 8003b66:	f000 b825 	b.w	8003bb4 <_malloc_r>
 8003b6a:	bf00      	nop
 8003b6c:	20000020 	.word	0x20000020

08003b70 <sbrk_aligned>:
 8003b70:	b570      	push	{r4, r5, r6, lr}
 8003b72:	4e0f      	ldr	r6, [pc, #60]	@ (8003bb0 <sbrk_aligned+0x40>)
 8003b74:	460c      	mov	r4, r1
 8003b76:	6831      	ldr	r1, [r6, #0]
 8003b78:	4605      	mov	r5, r0
 8003b7a:	b911      	cbnz	r1, 8003b82 <sbrk_aligned+0x12>
 8003b7c:	f000 fc4a 	bl	8004414 <_sbrk_r>
 8003b80:	6030      	str	r0, [r6, #0]
 8003b82:	4621      	mov	r1, r4
 8003b84:	4628      	mov	r0, r5
 8003b86:	f000 fc45 	bl	8004414 <_sbrk_r>
 8003b8a:	1c43      	adds	r3, r0, #1
 8003b8c:	d103      	bne.n	8003b96 <sbrk_aligned+0x26>
 8003b8e:	f04f 34ff 	mov.w	r4, #4294967295
 8003b92:	4620      	mov	r0, r4
 8003b94:	bd70      	pop	{r4, r5, r6, pc}
 8003b96:	1cc4      	adds	r4, r0, #3
 8003b98:	f024 0403 	bic.w	r4, r4, #3
 8003b9c:	42a0      	cmp	r0, r4
 8003b9e:	d0f8      	beq.n	8003b92 <sbrk_aligned+0x22>
 8003ba0:	1a21      	subs	r1, r4, r0
 8003ba2:	4628      	mov	r0, r5
 8003ba4:	f000 fc36 	bl	8004414 <_sbrk_r>
 8003ba8:	3001      	adds	r0, #1
 8003baa:	d1f2      	bne.n	8003b92 <sbrk_aligned+0x22>
 8003bac:	e7ef      	b.n	8003b8e <sbrk_aligned+0x1e>
 8003bae:	bf00      	nop
 8003bb0:	20000708 	.word	0x20000708

08003bb4 <_malloc_r>:
 8003bb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003bb8:	1ccd      	adds	r5, r1, #3
 8003bba:	f025 0503 	bic.w	r5, r5, #3
 8003bbe:	3508      	adds	r5, #8
 8003bc0:	2d0c      	cmp	r5, #12
 8003bc2:	bf38      	it	cc
 8003bc4:	250c      	movcc	r5, #12
 8003bc6:	2d00      	cmp	r5, #0
 8003bc8:	4606      	mov	r6, r0
 8003bca:	db01      	blt.n	8003bd0 <_malloc_r+0x1c>
 8003bcc:	42a9      	cmp	r1, r5
 8003bce:	d904      	bls.n	8003bda <_malloc_r+0x26>
 8003bd0:	230c      	movs	r3, #12
 8003bd2:	6033      	str	r3, [r6, #0]
 8003bd4:	2000      	movs	r0, #0
 8003bd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003bda:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003cb0 <_malloc_r+0xfc>
 8003bde:	f000 f869 	bl	8003cb4 <__malloc_lock>
 8003be2:	f8d8 3000 	ldr.w	r3, [r8]
 8003be6:	461c      	mov	r4, r3
 8003be8:	bb44      	cbnz	r4, 8003c3c <_malloc_r+0x88>
 8003bea:	4629      	mov	r1, r5
 8003bec:	4630      	mov	r0, r6
 8003bee:	f7ff ffbf 	bl	8003b70 <sbrk_aligned>
 8003bf2:	1c43      	adds	r3, r0, #1
 8003bf4:	4604      	mov	r4, r0
 8003bf6:	d158      	bne.n	8003caa <_malloc_r+0xf6>
 8003bf8:	f8d8 4000 	ldr.w	r4, [r8]
 8003bfc:	4627      	mov	r7, r4
 8003bfe:	2f00      	cmp	r7, #0
 8003c00:	d143      	bne.n	8003c8a <_malloc_r+0xd6>
 8003c02:	2c00      	cmp	r4, #0
 8003c04:	d04b      	beq.n	8003c9e <_malloc_r+0xea>
 8003c06:	6823      	ldr	r3, [r4, #0]
 8003c08:	4639      	mov	r1, r7
 8003c0a:	4630      	mov	r0, r6
 8003c0c:	eb04 0903 	add.w	r9, r4, r3
 8003c10:	f000 fc00 	bl	8004414 <_sbrk_r>
 8003c14:	4581      	cmp	r9, r0
 8003c16:	d142      	bne.n	8003c9e <_malloc_r+0xea>
 8003c18:	6821      	ldr	r1, [r4, #0]
 8003c1a:	4630      	mov	r0, r6
 8003c1c:	1a6d      	subs	r5, r5, r1
 8003c1e:	4629      	mov	r1, r5
 8003c20:	f7ff ffa6 	bl	8003b70 <sbrk_aligned>
 8003c24:	3001      	adds	r0, #1
 8003c26:	d03a      	beq.n	8003c9e <_malloc_r+0xea>
 8003c28:	6823      	ldr	r3, [r4, #0]
 8003c2a:	442b      	add	r3, r5
 8003c2c:	6023      	str	r3, [r4, #0]
 8003c2e:	f8d8 3000 	ldr.w	r3, [r8]
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	bb62      	cbnz	r2, 8003c90 <_malloc_r+0xdc>
 8003c36:	f8c8 7000 	str.w	r7, [r8]
 8003c3a:	e00f      	b.n	8003c5c <_malloc_r+0xa8>
 8003c3c:	6822      	ldr	r2, [r4, #0]
 8003c3e:	1b52      	subs	r2, r2, r5
 8003c40:	d420      	bmi.n	8003c84 <_malloc_r+0xd0>
 8003c42:	2a0b      	cmp	r2, #11
 8003c44:	d917      	bls.n	8003c76 <_malloc_r+0xc2>
 8003c46:	1961      	adds	r1, r4, r5
 8003c48:	42a3      	cmp	r3, r4
 8003c4a:	6025      	str	r5, [r4, #0]
 8003c4c:	bf18      	it	ne
 8003c4e:	6059      	strne	r1, [r3, #4]
 8003c50:	6863      	ldr	r3, [r4, #4]
 8003c52:	bf08      	it	eq
 8003c54:	f8c8 1000 	streq.w	r1, [r8]
 8003c58:	5162      	str	r2, [r4, r5]
 8003c5a:	604b      	str	r3, [r1, #4]
 8003c5c:	4630      	mov	r0, r6
 8003c5e:	f000 f82f 	bl	8003cc0 <__malloc_unlock>
 8003c62:	f104 000b 	add.w	r0, r4, #11
 8003c66:	1d23      	adds	r3, r4, #4
 8003c68:	f020 0007 	bic.w	r0, r0, #7
 8003c6c:	1ac2      	subs	r2, r0, r3
 8003c6e:	bf1c      	itt	ne
 8003c70:	1a1b      	subne	r3, r3, r0
 8003c72:	50a3      	strne	r3, [r4, r2]
 8003c74:	e7af      	b.n	8003bd6 <_malloc_r+0x22>
 8003c76:	6862      	ldr	r2, [r4, #4]
 8003c78:	42a3      	cmp	r3, r4
 8003c7a:	bf0c      	ite	eq
 8003c7c:	f8c8 2000 	streq.w	r2, [r8]
 8003c80:	605a      	strne	r2, [r3, #4]
 8003c82:	e7eb      	b.n	8003c5c <_malloc_r+0xa8>
 8003c84:	4623      	mov	r3, r4
 8003c86:	6864      	ldr	r4, [r4, #4]
 8003c88:	e7ae      	b.n	8003be8 <_malloc_r+0x34>
 8003c8a:	463c      	mov	r4, r7
 8003c8c:	687f      	ldr	r7, [r7, #4]
 8003c8e:	e7b6      	b.n	8003bfe <_malloc_r+0x4a>
 8003c90:	461a      	mov	r2, r3
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	42a3      	cmp	r3, r4
 8003c96:	d1fb      	bne.n	8003c90 <_malloc_r+0xdc>
 8003c98:	2300      	movs	r3, #0
 8003c9a:	6053      	str	r3, [r2, #4]
 8003c9c:	e7de      	b.n	8003c5c <_malloc_r+0xa8>
 8003c9e:	230c      	movs	r3, #12
 8003ca0:	4630      	mov	r0, r6
 8003ca2:	6033      	str	r3, [r6, #0]
 8003ca4:	f000 f80c 	bl	8003cc0 <__malloc_unlock>
 8003ca8:	e794      	b.n	8003bd4 <_malloc_r+0x20>
 8003caa:	6005      	str	r5, [r0, #0]
 8003cac:	e7d6      	b.n	8003c5c <_malloc_r+0xa8>
 8003cae:	bf00      	nop
 8003cb0:	2000070c 	.word	0x2000070c

08003cb4 <__malloc_lock>:
 8003cb4:	4801      	ldr	r0, [pc, #4]	@ (8003cbc <__malloc_lock+0x8>)
 8003cb6:	f7ff bedc 	b.w	8003a72 <__retarget_lock_acquire_recursive>
 8003cba:	bf00      	nop
 8003cbc:	20000704 	.word	0x20000704

08003cc0 <__malloc_unlock>:
 8003cc0:	4801      	ldr	r0, [pc, #4]	@ (8003cc8 <__malloc_unlock+0x8>)
 8003cc2:	f7ff bed7 	b.w	8003a74 <__retarget_lock_release_recursive>
 8003cc6:	bf00      	nop
 8003cc8:	20000704 	.word	0x20000704

08003ccc <__ssputs_r>:
 8003ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cd0:	461f      	mov	r7, r3
 8003cd2:	688e      	ldr	r6, [r1, #8]
 8003cd4:	4682      	mov	sl, r0
 8003cd6:	42be      	cmp	r6, r7
 8003cd8:	460c      	mov	r4, r1
 8003cda:	4690      	mov	r8, r2
 8003cdc:	680b      	ldr	r3, [r1, #0]
 8003cde:	d82d      	bhi.n	8003d3c <__ssputs_r+0x70>
 8003ce0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003ce4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003ce8:	d026      	beq.n	8003d38 <__ssputs_r+0x6c>
 8003cea:	6965      	ldr	r5, [r4, #20]
 8003cec:	6909      	ldr	r1, [r1, #16]
 8003cee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003cf2:	eba3 0901 	sub.w	r9, r3, r1
 8003cf6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003cfa:	1c7b      	adds	r3, r7, #1
 8003cfc:	444b      	add	r3, r9
 8003cfe:	106d      	asrs	r5, r5, #1
 8003d00:	429d      	cmp	r5, r3
 8003d02:	bf38      	it	cc
 8003d04:	461d      	movcc	r5, r3
 8003d06:	0553      	lsls	r3, r2, #21
 8003d08:	d527      	bpl.n	8003d5a <__ssputs_r+0x8e>
 8003d0a:	4629      	mov	r1, r5
 8003d0c:	f7ff ff52 	bl	8003bb4 <_malloc_r>
 8003d10:	4606      	mov	r6, r0
 8003d12:	b360      	cbz	r0, 8003d6e <__ssputs_r+0xa2>
 8003d14:	464a      	mov	r2, r9
 8003d16:	6921      	ldr	r1, [r4, #16]
 8003d18:	f7ff fead 	bl	8003a76 <memcpy>
 8003d1c:	89a3      	ldrh	r3, [r4, #12]
 8003d1e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003d22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d26:	81a3      	strh	r3, [r4, #12]
 8003d28:	6126      	str	r6, [r4, #16]
 8003d2a:	444e      	add	r6, r9
 8003d2c:	6026      	str	r6, [r4, #0]
 8003d2e:	463e      	mov	r6, r7
 8003d30:	6165      	str	r5, [r4, #20]
 8003d32:	eba5 0509 	sub.w	r5, r5, r9
 8003d36:	60a5      	str	r5, [r4, #8]
 8003d38:	42be      	cmp	r6, r7
 8003d3a:	d900      	bls.n	8003d3e <__ssputs_r+0x72>
 8003d3c:	463e      	mov	r6, r7
 8003d3e:	4632      	mov	r2, r6
 8003d40:	4641      	mov	r1, r8
 8003d42:	6820      	ldr	r0, [r4, #0]
 8003d44:	f7ff fe01 	bl	800394a <memmove>
 8003d48:	2000      	movs	r0, #0
 8003d4a:	68a3      	ldr	r3, [r4, #8]
 8003d4c:	1b9b      	subs	r3, r3, r6
 8003d4e:	60a3      	str	r3, [r4, #8]
 8003d50:	6823      	ldr	r3, [r4, #0]
 8003d52:	4433      	add	r3, r6
 8003d54:	6023      	str	r3, [r4, #0]
 8003d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d5a:	462a      	mov	r2, r5
 8003d5c:	f000 fb7f 	bl	800445e <_realloc_r>
 8003d60:	4606      	mov	r6, r0
 8003d62:	2800      	cmp	r0, #0
 8003d64:	d1e0      	bne.n	8003d28 <__ssputs_r+0x5c>
 8003d66:	4650      	mov	r0, sl
 8003d68:	6921      	ldr	r1, [r4, #16]
 8003d6a:	f7ff feb1 	bl	8003ad0 <_free_r>
 8003d6e:	230c      	movs	r3, #12
 8003d70:	f8ca 3000 	str.w	r3, [sl]
 8003d74:	89a3      	ldrh	r3, [r4, #12]
 8003d76:	f04f 30ff 	mov.w	r0, #4294967295
 8003d7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d7e:	81a3      	strh	r3, [r4, #12]
 8003d80:	e7e9      	b.n	8003d56 <__ssputs_r+0x8a>
	...

08003d84 <_svfiprintf_r>:
 8003d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d88:	4698      	mov	r8, r3
 8003d8a:	898b      	ldrh	r3, [r1, #12]
 8003d8c:	4607      	mov	r7, r0
 8003d8e:	061b      	lsls	r3, r3, #24
 8003d90:	460d      	mov	r5, r1
 8003d92:	4614      	mov	r4, r2
 8003d94:	b09d      	sub	sp, #116	@ 0x74
 8003d96:	d510      	bpl.n	8003dba <_svfiprintf_r+0x36>
 8003d98:	690b      	ldr	r3, [r1, #16]
 8003d9a:	b973      	cbnz	r3, 8003dba <_svfiprintf_r+0x36>
 8003d9c:	2140      	movs	r1, #64	@ 0x40
 8003d9e:	f7ff ff09 	bl	8003bb4 <_malloc_r>
 8003da2:	6028      	str	r0, [r5, #0]
 8003da4:	6128      	str	r0, [r5, #16]
 8003da6:	b930      	cbnz	r0, 8003db6 <_svfiprintf_r+0x32>
 8003da8:	230c      	movs	r3, #12
 8003daa:	603b      	str	r3, [r7, #0]
 8003dac:	f04f 30ff 	mov.w	r0, #4294967295
 8003db0:	b01d      	add	sp, #116	@ 0x74
 8003db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003db6:	2340      	movs	r3, #64	@ 0x40
 8003db8:	616b      	str	r3, [r5, #20]
 8003dba:	2300      	movs	r3, #0
 8003dbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8003dbe:	2320      	movs	r3, #32
 8003dc0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003dc4:	2330      	movs	r3, #48	@ 0x30
 8003dc6:	f04f 0901 	mov.w	r9, #1
 8003dca:	f8cd 800c 	str.w	r8, [sp, #12]
 8003dce:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003f68 <_svfiprintf_r+0x1e4>
 8003dd2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003dd6:	4623      	mov	r3, r4
 8003dd8:	469a      	mov	sl, r3
 8003dda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003dde:	b10a      	cbz	r2, 8003de4 <_svfiprintf_r+0x60>
 8003de0:	2a25      	cmp	r2, #37	@ 0x25
 8003de2:	d1f9      	bne.n	8003dd8 <_svfiprintf_r+0x54>
 8003de4:	ebba 0b04 	subs.w	fp, sl, r4
 8003de8:	d00b      	beq.n	8003e02 <_svfiprintf_r+0x7e>
 8003dea:	465b      	mov	r3, fp
 8003dec:	4622      	mov	r2, r4
 8003dee:	4629      	mov	r1, r5
 8003df0:	4638      	mov	r0, r7
 8003df2:	f7ff ff6b 	bl	8003ccc <__ssputs_r>
 8003df6:	3001      	adds	r0, #1
 8003df8:	f000 80a7 	beq.w	8003f4a <_svfiprintf_r+0x1c6>
 8003dfc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003dfe:	445a      	add	r2, fp
 8003e00:	9209      	str	r2, [sp, #36]	@ 0x24
 8003e02:	f89a 3000 	ldrb.w	r3, [sl]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f000 809f 	beq.w	8003f4a <_svfiprintf_r+0x1c6>
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e16:	f10a 0a01 	add.w	sl, sl, #1
 8003e1a:	9304      	str	r3, [sp, #16]
 8003e1c:	9307      	str	r3, [sp, #28]
 8003e1e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003e22:	931a      	str	r3, [sp, #104]	@ 0x68
 8003e24:	4654      	mov	r4, sl
 8003e26:	2205      	movs	r2, #5
 8003e28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e2c:	484e      	ldr	r0, [pc, #312]	@ (8003f68 <_svfiprintf_r+0x1e4>)
 8003e2e:	f000 fb01 	bl	8004434 <memchr>
 8003e32:	9a04      	ldr	r2, [sp, #16]
 8003e34:	b9d8      	cbnz	r0, 8003e6e <_svfiprintf_r+0xea>
 8003e36:	06d0      	lsls	r0, r2, #27
 8003e38:	bf44      	itt	mi
 8003e3a:	2320      	movmi	r3, #32
 8003e3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e40:	0711      	lsls	r1, r2, #28
 8003e42:	bf44      	itt	mi
 8003e44:	232b      	movmi	r3, #43	@ 0x2b
 8003e46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e4a:	f89a 3000 	ldrb.w	r3, [sl]
 8003e4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e50:	d015      	beq.n	8003e7e <_svfiprintf_r+0xfa>
 8003e52:	4654      	mov	r4, sl
 8003e54:	2000      	movs	r0, #0
 8003e56:	f04f 0c0a 	mov.w	ip, #10
 8003e5a:	9a07      	ldr	r2, [sp, #28]
 8003e5c:	4621      	mov	r1, r4
 8003e5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e62:	3b30      	subs	r3, #48	@ 0x30
 8003e64:	2b09      	cmp	r3, #9
 8003e66:	d94b      	bls.n	8003f00 <_svfiprintf_r+0x17c>
 8003e68:	b1b0      	cbz	r0, 8003e98 <_svfiprintf_r+0x114>
 8003e6a:	9207      	str	r2, [sp, #28]
 8003e6c:	e014      	b.n	8003e98 <_svfiprintf_r+0x114>
 8003e6e:	eba0 0308 	sub.w	r3, r0, r8
 8003e72:	fa09 f303 	lsl.w	r3, r9, r3
 8003e76:	4313      	orrs	r3, r2
 8003e78:	46a2      	mov	sl, r4
 8003e7a:	9304      	str	r3, [sp, #16]
 8003e7c:	e7d2      	b.n	8003e24 <_svfiprintf_r+0xa0>
 8003e7e:	9b03      	ldr	r3, [sp, #12]
 8003e80:	1d19      	adds	r1, r3, #4
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	9103      	str	r1, [sp, #12]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	bfbb      	ittet	lt
 8003e8a:	425b      	neglt	r3, r3
 8003e8c:	f042 0202 	orrlt.w	r2, r2, #2
 8003e90:	9307      	strge	r3, [sp, #28]
 8003e92:	9307      	strlt	r3, [sp, #28]
 8003e94:	bfb8      	it	lt
 8003e96:	9204      	strlt	r2, [sp, #16]
 8003e98:	7823      	ldrb	r3, [r4, #0]
 8003e9a:	2b2e      	cmp	r3, #46	@ 0x2e
 8003e9c:	d10a      	bne.n	8003eb4 <_svfiprintf_r+0x130>
 8003e9e:	7863      	ldrb	r3, [r4, #1]
 8003ea0:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ea2:	d132      	bne.n	8003f0a <_svfiprintf_r+0x186>
 8003ea4:	9b03      	ldr	r3, [sp, #12]
 8003ea6:	3402      	adds	r4, #2
 8003ea8:	1d1a      	adds	r2, r3, #4
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	9203      	str	r2, [sp, #12]
 8003eae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003eb2:	9305      	str	r3, [sp, #20]
 8003eb4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003f6c <_svfiprintf_r+0x1e8>
 8003eb8:	2203      	movs	r2, #3
 8003eba:	4650      	mov	r0, sl
 8003ebc:	7821      	ldrb	r1, [r4, #0]
 8003ebe:	f000 fab9 	bl	8004434 <memchr>
 8003ec2:	b138      	cbz	r0, 8003ed4 <_svfiprintf_r+0x150>
 8003ec4:	2240      	movs	r2, #64	@ 0x40
 8003ec6:	9b04      	ldr	r3, [sp, #16]
 8003ec8:	eba0 000a 	sub.w	r0, r0, sl
 8003ecc:	4082      	lsls	r2, r0
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	3401      	adds	r4, #1
 8003ed2:	9304      	str	r3, [sp, #16]
 8003ed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ed8:	2206      	movs	r2, #6
 8003eda:	4825      	ldr	r0, [pc, #148]	@ (8003f70 <_svfiprintf_r+0x1ec>)
 8003edc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003ee0:	f000 faa8 	bl	8004434 <memchr>
 8003ee4:	2800      	cmp	r0, #0
 8003ee6:	d036      	beq.n	8003f56 <_svfiprintf_r+0x1d2>
 8003ee8:	4b22      	ldr	r3, [pc, #136]	@ (8003f74 <_svfiprintf_r+0x1f0>)
 8003eea:	bb1b      	cbnz	r3, 8003f34 <_svfiprintf_r+0x1b0>
 8003eec:	9b03      	ldr	r3, [sp, #12]
 8003eee:	3307      	adds	r3, #7
 8003ef0:	f023 0307 	bic.w	r3, r3, #7
 8003ef4:	3308      	adds	r3, #8
 8003ef6:	9303      	str	r3, [sp, #12]
 8003ef8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003efa:	4433      	add	r3, r6
 8003efc:	9309      	str	r3, [sp, #36]	@ 0x24
 8003efe:	e76a      	b.n	8003dd6 <_svfiprintf_r+0x52>
 8003f00:	460c      	mov	r4, r1
 8003f02:	2001      	movs	r0, #1
 8003f04:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f08:	e7a8      	b.n	8003e5c <_svfiprintf_r+0xd8>
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	f04f 0c0a 	mov.w	ip, #10
 8003f10:	4619      	mov	r1, r3
 8003f12:	3401      	adds	r4, #1
 8003f14:	9305      	str	r3, [sp, #20]
 8003f16:	4620      	mov	r0, r4
 8003f18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f1c:	3a30      	subs	r2, #48	@ 0x30
 8003f1e:	2a09      	cmp	r2, #9
 8003f20:	d903      	bls.n	8003f2a <_svfiprintf_r+0x1a6>
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d0c6      	beq.n	8003eb4 <_svfiprintf_r+0x130>
 8003f26:	9105      	str	r1, [sp, #20]
 8003f28:	e7c4      	b.n	8003eb4 <_svfiprintf_r+0x130>
 8003f2a:	4604      	mov	r4, r0
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f32:	e7f0      	b.n	8003f16 <_svfiprintf_r+0x192>
 8003f34:	ab03      	add	r3, sp, #12
 8003f36:	9300      	str	r3, [sp, #0]
 8003f38:	462a      	mov	r2, r5
 8003f3a:	4638      	mov	r0, r7
 8003f3c:	4b0e      	ldr	r3, [pc, #56]	@ (8003f78 <_svfiprintf_r+0x1f4>)
 8003f3e:	a904      	add	r1, sp, #16
 8003f40:	f3af 8000 	nop.w
 8003f44:	1c42      	adds	r2, r0, #1
 8003f46:	4606      	mov	r6, r0
 8003f48:	d1d6      	bne.n	8003ef8 <_svfiprintf_r+0x174>
 8003f4a:	89ab      	ldrh	r3, [r5, #12]
 8003f4c:	065b      	lsls	r3, r3, #25
 8003f4e:	f53f af2d 	bmi.w	8003dac <_svfiprintf_r+0x28>
 8003f52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003f54:	e72c      	b.n	8003db0 <_svfiprintf_r+0x2c>
 8003f56:	ab03      	add	r3, sp, #12
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	462a      	mov	r2, r5
 8003f5c:	4638      	mov	r0, r7
 8003f5e:	4b06      	ldr	r3, [pc, #24]	@ (8003f78 <_svfiprintf_r+0x1f4>)
 8003f60:	a904      	add	r1, sp, #16
 8003f62:	f000 f87d 	bl	8004060 <_printf_i>
 8003f66:	e7ed      	b.n	8003f44 <_svfiprintf_r+0x1c0>
 8003f68:	080058a9 	.word	0x080058a9
 8003f6c:	080058af 	.word	0x080058af
 8003f70:	080058b3 	.word	0x080058b3
 8003f74:	00000000 	.word	0x00000000
 8003f78:	08003ccd 	.word	0x08003ccd

08003f7c <_printf_common>:
 8003f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f80:	4616      	mov	r6, r2
 8003f82:	4698      	mov	r8, r3
 8003f84:	688a      	ldr	r2, [r1, #8]
 8003f86:	690b      	ldr	r3, [r1, #16]
 8003f88:	4607      	mov	r7, r0
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	bfb8      	it	lt
 8003f8e:	4613      	movlt	r3, r2
 8003f90:	6033      	str	r3, [r6, #0]
 8003f92:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003f96:	460c      	mov	r4, r1
 8003f98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003f9c:	b10a      	cbz	r2, 8003fa2 <_printf_common+0x26>
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	6033      	str	r3, [r6, #0]
 8003fa2:	6823      	ldr	r3, [r4, #0]
 8003fa4:	0699      	lsls	r1, r3, #26
 8003fa6:	bf42      	ittt	mi
 8003fa8:	6833      	ldrmi	r3, [r6, #0]
 8003faa:	3302      	addmi	r3, #2
 8003fac:	6033      	strmi	r3, [r6, #0]
 8003fae:	6825      	ldr	r5, [r4, #0]
 8003fb0:	f015 0506 	ands.w	r5, r5, #6
 8003fb4:	d106      	bne.n	8003fc4 <_printf_common+0x48>
 8003fb6:	f104 0a19 	add.w	sl, r4, #25
 8003fba:	68e3      	ldr	r3, [r4, #12]
 8003fbc:	6832      	ldr	r2, [r6, #0]
 8003fbe:	1a9b      	subs	r3, r3, r2
 8003fc0:	42ab      	cmp	r3, r5
 8003fc2:	dc2b      	bgt.n	800401c <_printf_common+0xa0>
 8003fc4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003fc8:	6822      	ldr	r2, [r4, #0]
 8003fca:	3b00      	subs	r3, #0
 8003fcc:	bf18      	it	ne
 8003fce:	2301      	movne	r3, #1
 8003fd0:	0692      	lsls	r2, r2, #26
 8003fd2:	d430      	bmi.n	8004036 <_printf_common+0xba>
 8003fd4:	4641      	mov	r1, r8
 8003fd6:	4638      	mov	r0, r7
 8003fd8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003fdc:	47c8      	blx	r9
 8003fde:	3001      	adds	r0, #1
 8003fe0:	d023      	beq.n	800402a <_printf_common+0xae>
 8003fe2:	6823      	ldr	r3, [r4, #0]
 8003fe4:	6922      	ldr	r2, [r4, #16]
 8003fe6:	f003 0306 	and.w	r3, r3, #6
 8003fea:	2b04      	cmp	r3, #4
 8003fec:	bf14      	ite	ne
 8003fee:	2500      	movne	r5, #0
 8003ff0:	6833      	ldreq	r3, [r6, #0]
 8003ff2:	f04f 0600 	mov.w	r6, #0
 8003ff6:	bf08      	it	eq
 8003ff8:	68e5      	ldreq	r5, [r4, #12]
 8003ffa:	f104 041a 	add.w	r4, r4, #26
 8003ffe:	bf08      	it	eq
 8004000:	1aed      	subeq	r5, r5, r3
 8004002:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004006:	bf08      	it	eq
 8004008:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800400c:	4293      	cmp	r3, r2
 800400e:	bfc4      	itt	gt
 8004010:	1a9b      	subgt	r3, r3, r2
 8004012:	18ed      	addgt	r5, r5, r3
 8004014:	42b5      	cmp	r5, r6
 8004016:	d11a      	bne.n	800404e <_printf_common+0xd2>
 8004018:	2000      	movs	r0, #0
 800401a:	e008      	b.n	800402e <_printf_common+0xb2>
 800401c:	2301      	movs	r3, #1
 800401e:	4652      	mov	r2, sl
 8004020:	4641      	mov	r1, r8
 8004022:	4638      	mov	r0, r7
 8004024:	47c8      	blx	r9
 8004026:	3001      	adds	r0, #1
 8004028:	d103      	bne.n	8004032 <_printf_common+0xb6>
 800402a:	f04f 30ff 	mov.w	r0, #4294967295
 800402e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004032:	3501      	adds	r5, #1
 8004034:	e7c1      	b.n	8003fba <_printf_common+0x3e>
 8004036:	2030      	movs	r0, #48	@ 0x30
 8004038:	18e1      	adds	r1, r4, r3
 800403a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800403e:	1c5a      	adds	r2, r3, #1
 8004040:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004044:	4422      	add	r2, r4
 8004046:	3302      	adds	r3, #2
 8004048:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800404c:	e7c2      	b.n	8003fd4 <_printf_common+0x58>
 800404e:	2301      	movs	r3, #1
 8004050:	4622      	mov	r2, r4
 8004052:	4641      	mov	r1, r8
 8004054:	4638      	mov	r0, r7
 8004056:	47c8      	blx	r9
 8004058:	3001      	adds	r0, #1
 800405a:	d0e6      	beq.n	800402a <_printf_common+0xae>
 800405c:	3601      	adds	r6, #1
 800405e:	e7d9      	b.n	8004014 <_printf_common+0x98>

08004060 <_printf_i>:
 8004060:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004064:	7e0f      	ldrb	r7, [r1, #24]
 8004066:	4691      	mov	r9, r2
 8004068:	2f78      	cmp	r7, #120	@ 0x78
 800406a:	4680      	mov	r8, r0
 800406c:	460c      	mov	r4, r1
 800406e:	469a      	mov	sl, r3
 8004070:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004072:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004076:	d807      	bhi.n	8004088 <_printf_i+0x28>
 8004078:	2f62      	cmp	r7, #98	@ 0x62
 800407a:	d80a      	bhi.n	8004092 <_printf_i+0x32>
 800407c:	2f00      	cmp	r7, #0
 800407e:	f000 80d3 	beq.w	8004228 <_printf_i+0x1c8>
 8004082:	2f58      	cmp	r7, #88	@ 0x58
 8004084:	f000 80ba 	beq.w	80041fc <_printf_i+0x19c>
 8004088:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800408c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004090:	e03a      	b.n	8004108 <_printf_i+0xa8>
 8004092:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004096:	2b15      	cmp	r3, #21
 8004098:	d8f6      	bhi.n	8004088 <_printf_i+0x28>
 800409a:	a101      	add	r1, pc, #4	@ (adr r1, 80040a0 <_printf_i+0x40>)
 800409c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80040a0:	080040f9 	.word	0x080040f9
 80040a4:	0800410d 	.word	0x0800410d
 80040a8:	08004089 	.word	0x08004089
 80040ac:	08004089 	.word	0x08004089
 80040b0:	08004089 	.word	0x08004089
 80040b4:	08004089 	.word	0x08004089
 80040b8:	0800410d 	.word	0x0800410d
 80040bc:	08004089 	.word	0x08004089
 80040c0:	08004089 	.word	0x08004089
 80040c4:	08004089 	.word	0x08004089
 80040c8:	08004089 	.word	0x08004089
 80040cc:	0800420f 	.word	0x0800420f
 80040d0:	08004137 	.word	0x08004137
 80040d4:	080041c9 	.word	0x080041c9
 80040d8:	08004089 	.word	0x08004089
 80040dc:	08004089 	.word	0x08004089
 80040e0:	08004231 	.word	0x08004231
 80040e4:	08004089 	.word	0x08004089
 80040e8:	08004137 	.word	0x08004137
 80040ec:	08004089 	.word	0x08004089
 80040f0:	08004089 	.word	0x08004089
 80040f4:	080041d1 	.word	0x080041d1
 80040f8:	6833      	ldr	r3, [r6, #0]
 80040fa:	1d1a      	adds	r2, r3, #4
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	6032      	str	r2, [r6, #0]
 8004100:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004104:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004108:	2301      	movs	r3, #1
 800410a:	e09e      	b.n	800424a <_printf_i+0x1ea>
 800410c:	6833      	ldr	r3, [r6, #0]
 800410e:	6820      	ldr	r0, [r4, #0]
 8004110:	1d19      	adds	r1, r3, #4
 8004112:	6031      	str	r1, [r6, #0]
 8004114:	0606      	lsls	r6, r0, #24
 8004116:	d501      	bpl.n	800411c <_printf_i+0xbc>
 8004118:	681d      	ldr	r5, [r3, #0]
 800411a:	e003      	b.n	8004124 <_printf_i+0xc4>
 800411c:	0645      	lsls	r5, r0, #25
 800411e:	d5fb      	bpl.n	8004118 <_printf_i+0xb8>
 8004120:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004124:	2d00      	cmp	r5, #0
 8004126:	da03      	bge.n	8004130 <_printf_i+0xd0>
 8004128:	232d      	movs	r3, #45	@ 0x2d
 800412a:	426d      	negs	r5, r5
 800412c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004130:	230a      	movs	r3, #10
 8004132:	4859      	ldr	r0, [pc, #356]	@ (8004298 <_printf_i+0x238>)
 8004134:	e011      	b.n	800415a <_printf_i+0xfa>
 8004136:	6821      	ldr	r1, [r4, #0]
 8004138:	6833      	ldr	r3, [r6, #0]
 800413a:	0608      	lsls	r0, r1, #24
 800413c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004140:	d402      	bmi.n	8004148 <_printf_i+0xe8>
 8004142:	0649      	lsls	r1, r1, #25
 8004144:	bf48      	it	mi
 8004146:	b2ad      	uxthmi	r5, r5
 8004148:	2f6f      	cmp	r7, #111	@ 0x6f
 800414a:	6033      	str	r3, [r6, #0]
 800414c:	bf14      	ite	ne
 800414e:	230a      	movne	r3, #10
 8004150:	2308      	moveq	r3, #8
 8004152:	4851      	ldr	r0, [pc, #324]	@ (8004298 <_printf_i+0x238>)
 8004154:	2100      	movs	r1, #0
 8004156:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800415a:	6866      	ldr	r6, [r4, #4]
 800415c:	2e00      	cmp	r6, #0
 800415e:	bfa8      	it	ge
 8004160:	6821      	ldrge	r1, [r4, #0]
 8004162:	60a6      	str	r6, [r4, #8]
 8004164:	bfa4      	itt	ge
 8004166:	f021 0104 	bicge.w	r1, r1, #4
 800416a:	6021      	strge	r1, [r4, #0]
 800416c:	b90d      	cbnz	r5, 8004172 <_printf_i+0x112>
 800416e:	2e00      	cmp	r6, #0
 8004170:	d04b      	beq.n	800420a <_printf_i+0x1aa>
 8004172:	4616      	mov	r6, r2
 8004174:	fbb5 f1f3 	udiv	r1, r5, r3
 8004178:	fb03 5711 	mls	r7, r3, r1, r5
 800417c:	5dc7      	ldrb	r7, [r0, r7]
 800417e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004182:	462f      	mov	r7, r5
 8004184:	42bb      	cmp	r3, r7
 8004186:	460d      	mov	r5, r1
 8004188:	d9f4      	bls.n	8004174 <_printf_i+0x114>
 800418a:	2b08      	cmp	r3, #8
 800418c:	d10b      	bne.n	80041a6 <_printf_i+0x146>
 800418e:	6823      	ldr	r3, [r4, #0]
 8004190:	07df      	lsls	r7, r3, #31
 8004192:	d508      	bpl.n	80041a6 <_printf_i+0x146>
 8004194:	6923      	ldr	r3, [r4, #16]
 8004196:	6861      	ldr	r1, [r4, #4]
 8004198:	4299      	cmp	r1, r3
 800419a:	bfde      	ittt	le
 800419c:	2330      	movle	r3, #48	@ 0x30
 800419e:	f806 3c01 	strble.w	r3, [r6, #-1]
 80041a2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80041a6:	1b92      	subs	r2, r2, r6
 80041a8:	6122      	str	r2, [r4, #16]
 80041aa:	464b      	mov	r3, r9
 80041ac:	4621      	mov	r1, r4
 80041ae:	4640      	mov	r0, r8
 80041b0:	f8cd a000 	str.w	sl, [sp]
 80041b4:	aa03      	add	r2, sp, #12
 80041b6:	f7ff fee1 	bl	8003f7c <_printf_common>
 80041ba:	3001      	adds	r0, #1
 80041bc:	d14a      	bne.n	8004254 <_printf_i+0x1f4>
 80041be:	f04f 30ff 	mov.w	r0, #4294967295
 80041c2:	b004      	add	sp, #16
 80041c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041c8:	6823      	ldr	r3, [r4, #0]
 80041ca:	f043 0320 	orr.w	r3, r3, #32
 80041ce:	6023      	str	r3, [r4, #0]
 80041d0:	2778      	movs	r7, #120	@ 0x78
 80041d2:	4832      	ldr	r0, [pc, #200]	@ (800429c <_printf_i+0x23c>)
 80041d4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80041d8:	6823      	ldr	r3, [r4, #0]
 80041da:	6831      	ldr	r1, [r6, #0]
 80041dc:	061f      	lsls	r7, r3, #24
 80041de:	f851 5b04 	ldr.w	r5, [r1], #4
 80041e2:	d402      	bmi.n	80041ea <_printf_i+0x18a>
 80041e4:	065f      	lsls	r7, r3, #25
 80041e6:	bf48      	it	mi
 80041e8:	b2ad      	uxthmi	r5, r5
 80041ea:	6031      	str	r1, [r6, #0]
 80041ec:	07d9      	lsls	r1, r3, #31
 80041ee:	bf44      	itt	mi
 80041f0:	f043 0320 	orrmi.w	r3, r3, #32
 80041f4:	6023      	strmi	r3, [r4, #0]
 80041f6:	b11d      	cbz	r5, 8004200 <_printf_i+0x1a0>
 80041f8:	2310      	movs	r3, #16
 80041fa:	e7ab      	b.n	8004154 <_printf_i+0xf4>
 80041fc:	4826      	ldr	r0, [pc, #152]	@ (8004298 <_printf_i+0x238>)
 80041fe:	e7e9      	b.n	80041d4 <_printf_i+0x174>
 8004200:	6823      	ldr	r3, [r4, #0]
 8004202:	f023 0320 	bic.w	r3, r3, #32
 8004206:	6023      	str	r3, [r4, #0]
 8004208:	e7f6      	b.n	80041f8 <_printf_i+0x198>
 800420a:	4616      	mov	r6, r2
 800420c:	e7bd      	b.n	800418a <_printf_i+0x12a>
 800420e:	6833      	ldr	r3, [r6, #0]
 8004210:	6825      	ldr	r5, [r4, #0]
 8004212:	1d18      	adds	r0, r3, #4
 8004214:	6961      	ldr	r1, [r4, #20]
 8004216:	6030      	str	r0, [r6, #0]
 8004218:	062e      	lsls	r6, r5, #24
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	d501      	bpl.n	8004222 <_printf_i+0x1c2>
 800421e:	6019      	str	r1, [r3, #0]
 8004220:	e002      	b.n	8004228 <_printf_i+0x1c8>
 8004222:	0668      	lsls	r0, r5, #25
 8004224:	d5fb      	bpl.n	800421e <_printf_i+0x1be>
 8004226:	8019      	strh	r1, [r3, #0]
 8004228:	2300      	movs	r3, #0
 800422a:	4616      	mov	r6, r2
 800422c:	6123      	str	r3, [r4, #16]
 800422e:	e7bc      	b.n	80041aa <_printf_i+0x14a>
 8004230:	6833      	ldr	r3, [r6, #0]
 8004232:	2100      	movs	r1, #0
 8004234:	1d1a      	adds	r2, r3, #4
 8004236:	6032      	str	r2, [r6, #0]
 8004238:	681e      	ldr	r6, [r3, #0]
 800423a:	6862      	ldr	r2, [r4, #4]
 800423c:	4630      	mov	r0, r6
 800423e:	f000 f8f9 	bl	8004434 <memchr>
 8004242:	b108      	cbz	r0, 8004248 <_printf_i+0x1e8>
 8004244:	1b80      	subs	r0, r0, r6
 8004246:	6060      	str	r0, [r4, #4]
 8004248:	6863      	ldr	r3, [r4, #4]
 800424a:	6123      	str	r3, [r4, #16]
 800424c:	2300      	movs	r3, #0
 800424e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004252:	e7aa      	b.n	80041aa <_printf_i+0x14a>
 8004254:	4632      	mov	r2, r6
 8004256:	4649      	mov	r1, r9
 8004258:	4640      	mov	r0, r8
 800425a:	6923      	ldr	r3, [r4, #16]
 800425c:	47d0      	blx	sl
 800425e:	3001      	adds	r0, #1
 8004260:	d0ad      	beq.n	80041be <_printf_i+0x15e>
 8004262:	6823      	ldr	r3, [r4, #0]
 8004264:	079b      	lsls	r3, r3, #30
 8004266:	d413      	bmi.n	8004290 <_printf_i+0x230>
 8004268:	68e0      	ldr	r0, [r4, #12]
 800426a:	9b03      	ldr	r3, [sp, #12]
 800426c:	4298      	cmp	r0, r3
 800426e:	bfb8      	it	lt
 8004270:	4618      	movlt	r0, r3
 8004272:	e7a6      	b.n	80041c2 <_printf_i+0x162>
 8004274:	2301      	movs	r3, #1
 8004276:	4632      	mov	r2, r6
 8004278:	4649      	mov	r1, r9
 800427a:	4640      	mov	r0, r8
 800427c:	47d0      	blx	sl
 800427e:	3001      	adds	r0, #1
 8004280:	d09d      	beq.n	80041be <_printf_i+0x15e>
 8004282:	3501      	adds	r5, #1
 8004284:	68e3      	ldr	r3, [r4, #12]
 8004286:	9903      	ldr	r1, [sp, #12]
 8004288:	1a5b      	subs	r3, r3, r1
 800428a:	42ab      	cmp	r3, r5
 800428c:	dcf2      	bgt.n	8004274 <_printf_i+0x214>
 800428e:	e7eb      	b.n	8004268 <_printf_i+0x208>
 8004290:	2500      	movs	r5, #0
 8004292:	f104 0619 	add.w	r6, r4, #25
 8004296:	e7f5      	b.n	8004284 <_printf_i+0x224>
 8004298:	080058ba 	.word	0x080058ba
 800429c:	080058cb 	.word	0x080058cb

080042a0 <__sflush_r>:
 80042a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80042a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042a6:	0716      	lsls	r6, r2, #28
 80042a8:	4605      	mov	r5, r0
 80042aa:	460c      	mov	r4, r1
 80042ac:	d454      	bmi.n	8004358 <__sflush_r+0xb8>
 80042ae:	684b      	ldr	r3, [r1, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	dc02      	bgt.n	80042ba <__sflush_r+0x1a>
 80042b4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	dd48      	ble.n	800434c <__sflush_r+0xac>
 80042ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80042bc:	2e00      	cmp	r6, #0
 80042be:	d045      	beq.n	800434c <__sflush_r+0xac>
 80042c0:	2300      	movs	r3, #0
 80042c2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80042c6:	682f      	ldr	r7, [r5, #0]
 80042c8:	6a21      	ldr	r1, [r4, #32]
 80042ca:	602b      	str	r3, [r5, #0]
 80042cc:	d030      	beq.n	8004330 <__sflush_r+0x90>
 80042ce:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80042d0:	89a3      	ldrh	r3, [r4, #12]
 80042d2:	0759      	lsls	r1, r3, #29
 80042d4:	d505      	bpl.n	80042e2 <__sflush_r+0x42>
 80042d6:	6863      	ldr	r3, [r4, #4]
 80042d8:	1ad2      	subs	r2, r2, r3
 80042da:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80042dc:	b10b      	cbz	r3, 80042e2 <__sflush_r+0x42>
 80042de:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80042e0:	1ad2      	subs	r2, r2, r3
 80042e2:	2300      	movs	r3, #0
 80042e4:	4628      	mov	r0, r5
 80042e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80042e8:	6a21      	ldr	r1, [r4, #32]
 80042ea:	47b0      	blx	r6
 80042ec:	1c43      	adds	r3, r0, #1
 80042ee:	89a3      	ldrh	r3, [r4, #12]
 80042f0:	d106      	bne.n	8004300 <__sflush_r+0x60>
 80042f2:	6829      	ldr	r1, [r5, #0]
 80042f4:	291d      	cmp	r1, #29
 80042f6:	d82b      	bhi.n	8004350 <__sflush_r+0xb0>
 80042f8:	4a28      	ldr	r2, [pc, #160]	@ (800439c <__sflush_r+0xfc>)
 80042fa:	410a      	asrs	r2, r1
 80042fc:	07d6      	lsls	r6, r2, #31
 80042fe:	d427      	bmi.n	8004350 <__sflush_r+0xb0>
 8004300:	2200      	movs	r2, #0
 8004302:	6062      	str	r2, [r4, #4]
 8004304:	6922      	ldr	r2, [r4, #16]
 8004306:	04d9      	lsls	r1, r3, #19
 8004308:	6022      	str	r2, [r4, #0]
 800430a:	d504      	bpl.n	8004316 <__sflush_r+0x76>
 800430c:	1c42      	adds	r2, r0, #1
 800430e:	d101      	bne.n	8004314 <__sflush_r+0x74>
 8004310:	682b      	ldr	r3, [r5, #0]
 8004312:	b903      	cbnz	r3, 8004316 <__sflush_r+0x76>
 8004314:	6560      	str	r0, [r4, #84]	@ 0x54
 8004316:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004318:	602f      	str	r7, [r5, #0]
 800431a:	b1b9      	cbz	r1, 800434c <__sflush_r+0xac>
 800431c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004320:	4299      	cmp	r1, r3
 8004322:	d002      	beq.n	800432a <__sflush_r+0x8a>
 8004324:	4628      	mov	r0, r5
 8004326:	f7ff fbd3 	bl	8003ad0 <_free_r>
 800432a:	2300      	movs	r3, #0
 800432c:	6363      	str	r3, [r4, #52]	@ 0x34
 800432e:	e00d      	b.n	800434c <__sflush_r+0xac>
 8004330:	2301      	movs	r3, #1
 8004332:	4628      	mov	r0, r5
 8004334:	47b0      	blx	r6
 8004336:	4602      	mov	r2, r0
 8004338:	1c50      	adds	r0, r2, #1
 800433a:	d1c9      	bne.n	80042d0 <__sflush_r+0x30>
 800433c:	682b      	ldr	r3, [r5, #0]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d0c6      	beq.n	80042d0 <__sflush_r+0x30>
 8004342:	2b1d      	cmp	r3, #29
 8004344:	d001      	beq.n	800434a <__sflush_r+0xaa>
 8004346:	2b16      	cmp	r3, #22
 8004348:	d11d      	bne.n	8004386 <__sflush_r+0xe6>
 800434a:	602f      	str	r7, [r5, #0]
 800434c:	2000      	movs	r0, #0
 800434e:	e021      	b.n	8004394 <__sflush_r+0xf4>
 8004350:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004354:	b21b      	sxth	r3, r3
 8004356:	e01a      	b.n	800438e <__sflush_r+0xee>
 8004358:	690f      	ldr	r7, [r1, #16]
 800435a:	2f00      	cmp	r7, #0
 800435c:	d0f6      	beq.n	800434c <__sflush_r+0xac>
 800435e:	0793      	lsls	r3, r2, #30
 8004360:	bf18      	it	ne
 8004362:	2300      	movne	r3, #0
 8004364:	680e      	ldr	r6, [r1, #0]
 8004366:	bf08      	it	eq
 8004368:	694b      	ldreq	r3, [r1, #20]
 800436a:	1bf6      	subs	r6, r6, r7
 800436c:	600f      	str	r7, [r1, #0]
 800436e:	608b      	str	r3, [r1, #8]
 8004370:	2e00      	cmp	r6, #0
 8004372:	ddeb      	ble.n	800434c <__sflush_r+0xac>
 8004374:	4633      	mov	r3, r6
 8004376:	463a      	mov	r2, r7
 8004378:	4628      	mov	r0, r5
 800437a:	6a21      	ldr	r1, [r4, #32]
 800437c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004380:	47e0      	blx	ip
 8004382:	2800      	cmp	r0, #0
 8004384:	dc07      	bgt.n	8004396 <__sflush_r+0xf6>
 8004386:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800438a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800438e:	f04f 30ff 	mov.w	r0, #4294967295
 8004392:	81a3      	strh	r3, [r4, #12]
 8004394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004396:	4407      	add	r7, r0
 8004398:	1a36      	subs	r6, r6, r0
 800439a:	e7e9      	b.n	8004370 <__sflush_r+0xd0>
 800439c:	dfbffffe 	.word	0xdfbffffe

080043a0 <_fflush_r>:
 80043a0:	b538      	push	{r3, r4, r5, lr}
 80043a2:	690b      	ldr	r3, [r1, #16]
 80043a4:	4605      	mov	r5, r0
 80043a6:	460c      	mov	r4, r1
 80043a8:	b913      	cbnz	r3, 80043b0 <_fflush_r+0x10>
 80043aa:	2500      	movs	r5, #0
 80043ac:	4628      	mov	r0, r5
 80043ae:	bd38      	pop	{r3, r4, r5, pc}
 80043b0:	b118      	cbz	r0, 80043ba <_fflush_r+0x1a>
 80043b2:	6a03      	ldr	r3, [r0, #32]
 80043b4:	b90b      	cbnz	r3, 80043ba <_fflush_r+0x1a>
 80043b6:	f7ff fa2f 	bl	8003818 <__sinit>
 80043ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d0f3      	beq.n	80043aa <_fflush_r+0xa>
 80043c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80043c4:	07d0      	lsls	r0, r2, #31
 80043c6:	d404      	bmi.n	80043d2 <_fflush_r+0x32>
 80043c8:	0599      	lsls	r1, r3, #22
 80043ca:	d402      	bmi.n	80043d2 <_fflush_r+0x32>
 80043cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80043ce:	f7ff fb50 	bl	8003a72 <__retarget_lock_acquire_recursive>
 80043d2:	4628      	mov	r0, r5
 80043d4:	4621      	mov	r1, r4
 80043d6:	f7ff ff63 	bl	80042a0 <__sflush_r>
 80043da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80043dc:	4605      	mov	r5, r0
 80043de:	07da      	lsls	r2, r3, #31
 80043e0:	d4e4      	bmi.n	80043ac <_fflush_r+0xc>
 80043e2:	89a3      	ldrh	r3, [r4, #12]
 80043e4:	059b      	lsls	r3, r3, #22
 80043e6:	d4e1      	bmi.n	80043ac <_fflush_r+0xc>
 80043e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80043ea:	f7ff fb43 	bl	8003a74 <__retarget_lock_release_recursive>
 80043ee:	e7dd      	b.n	80043ac <_fflush_r+0xc>

080043f0 <fiprintf>:
 80043f0:	b40e      	push	{r1, r2, r3}
 80043f2:	b503      	push	{r0, r1, lr}
 80043f4:	4601      	mov	r1, r0
 80043f6:	ab03      	add	r3, sp, #12
 80043f8:	4805      	ldr	r0, [pc, #20]	@ (8004410 <fiprintf+0x20>)
 80043fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80043fe:	6800      	ldr	r0, [r0, #0]
 8004400:	9301      	str	r3, [sp, #4]
 8004402:	f000 f881 	bl	8004508 <_vfiprintf_r>
 8004406:	b002      	add	sp, #8
 8004408:	f85d eb04 	ldr.w	lr, [sp], #4
 800440c:	b003      	add	sp, #12
 800440e:	4770      	bx	lr
 8004410:	20000020 	.word	0x20000020

08004414 <_sbrk_r>:
 8004414:	b538      	push	{r3, r4, r5, lr}
 8004416:	2300      	movs	r3, #0
 8004418:	4d05      	ldr	r5, [pc, #20]	@ (8004430 <_sbrk_r+0x1c>)
 800441a:	4604      	mov	r4, r0
 800441c:	4608      	mov	r0, r1
 800441e:	602b      	str	r3, [r5, #0]
 8004420:	f7fc fcee 	bl	8000e00 <_sbrk>
 8004424:	1c43      	adds	r3, r0, #1
 8004426:	d102      	bne.n	800442e <_sbrk_r+0x1a>
 8004428:	682b      	ldr	r3, [r5, #0]
 800442a:	b103      	cbz	r3, 800442e <_sbrk_r+0x1a>
 800442c:	6023      	str	r3, [r4, #0]
 800442e:	bd38      	pop	{r3, r4, r5, pc}
 8004430:	20000700 	.word	0x20000700

08004434 <memchr>:
 8004434:	4603      	mov	r3, r0
 8004436:	b510      	push	{r4, lr}
 8004438:	b2c9      	uxtb	r1, r1
 800443a:	4402      	add	r2, r0
 800443c:	4293      	cmp	r3, r2
 800443e:	4618      	mov	r0, r3
 8004440:	d101      	bne.n	8004446 <memchr+0x12>
 8004442:	2000      	movs	r0, #0
 8004444:	e003      	b.n	800444e <memchr+0x1a>
 8004446:	7804      	ldrb	r4, [r0, #0]
 8004448:	3301      	adds	r3, #1
 800444a:	428c      	cmp	r4, r1
 800444c:	d1f6      	bne.n	800443c <memchr+0x8>
 800444e:	bd10      	pop	{r4, pc}

08004450 <abort>:
 8004450:	2006      	movs	r0, #6
 8004452:	b508      	push	{r3, lr}
 8004454:	f000 fa2c 	bl	80048b0 <raise>
 8004458:	2001      	movs	r0, #1
 800445a:	f7fc fc5c 	bl	8000d16 <_exit>

0800445e <_realloc_r>:
 800445e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004462:	4680      	mov	r8, r0
 8004464:	4615      	mov	r5, r2
 8004466:	460c      	mov	r4, r1
 8004468:	b921      	cbnz	r1, 8004474 <_realloc_r+0x16>
 800446a:	4611      	mov	r1, r2
 800446c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004470:	f7ff bba0 	b.w	8003bb4 <_malloc_r>
 8004474:	b92a      	cbnz	r2, 8004482 <_realloc_r+0x24>
 8004476:	f7ff fb2b 	bl	8003ad0 <_free_r>
 800447a:	2400      	movs	r4, #0
 800447c:	4620      	mov	r0, r4
 800447e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004482:	f000 fa31 	bl	80048e8 <_malloc_usable_size_r>
 8004486:	4285      	cmp	r5, r0
 8004488:	4606      	mov	r6, r0
 800448a:	d802      	bhi.n	8004492 <_realloc_r+0x34>
 800448c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004490:	d8f4      	bhi.n	800447c <_realloc_r+0x1e>
 8004492:	4629      	mov	r1, r5
 8004494:	4640      	mov	r0, r8
 8004496:	f7ff fb8d 	bl	8003bb4 <_malloc_r>
 800449a:	4607      	mov	r7, r0
 800449c:	2800      	cmp	r0, #0
 800449e:	d0ec      	beq.n	800447a <_realloc_r+0x1c>
 80044a0:	42b5      	cmp	r5, r6
 80044a2:	462a      	mov	r2, r5
 80044a4:	4621      	mov	r1, r4
 80044a6:	bf28      	it	cs
 80044a8:	4632      	movcs	r2, r6
 80044aa:	f7ff fae4 	bl	8003a76 <memcpy>
 80044ae:	4621      	mov	r1, r4
 80044b0:	4640      	mov	r0, r8
 80044b2:	f7ff fb0d 	bl	8003ad0 <_free_r>
 80044b6:	463c      	mov	r4, r7
 80044b8:	e7e0      	b.n	800447c <_realloc_r+0x1e>

080044ba <__sfputc_r>:
 80044ba:	6893      	ldr	r3, [r2, #8]
 80044bc:	b410      	push	{r4}
 80044be:	3b01      	subs	r3, #1
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	6093      	str	r3, [r2, #8]
 80044c4:	da07      	bge.n	80044d6 <__sfputc_r+0x1c>
 80044c6:	6994      	ldr	r4, [r2, #24]
 80044c8:	42a3      	cmp	r3, r4
 80044ca:	db01      	blt.n	80044d0 <__sfputc_r+0x16>
 80044cc:	290a      	cmp	r1, #10
 80044ce:	d102      	bne.n	80044d6 <__sfputc_r+0x1c>
 80044d0:	bc10      	pop	{r4}
 80044d2:	f000 b931 	b.w	8004738 <__swbuf_r>
 80044d6:	6813      	ldr	r3, [r2, #0]
 80044d8:	1c58      	adds	r0, r3, #1
 80044da:	6010      	str	r0, [r2, #0]
 80044dc:	7019      	strb	r1, [r3, #0]
 80044de:	4608      	mov	r0, r1
 80044e0:	bc10      	pop	{r4}
 80044e2:	4770      	bx	lr

080044e4 <__sfputs_r>:
 80044e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044e6:	4606      	mov	r6, r0
 80044e8:	460f      	mov	r7, r1
 80044ea:	4614      	mov	r4, r2
 80044ec:	18d5      	adds	r5, r2, r3
 80044ee:	42ac      	cmp	r4, r5
 80044f0:	d101      	bne.n	80044f6 <__sfputs_r+0x12>
 80044f2:	2000      	movs	r0, #0
 80044f4:	e007      	b.n	8004506 <__sfputs_r+0x22>
 80044f6:	463a      	mov	r2, r7
 80044f8:	4630      	mov	r0, r6
 80044fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044fe:	f7ff ffdc 	bl	80044ba <__sfputc_r>
 8004502:	1c43      	adds	r3, r0, #1
 8004504:	d1f3      	bne.n	80044ee <__sfputs_r+0xa>
 8004506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004508 <_vfiprintf_r>:
 8004508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800450c:	460d      	mov	r5, r1
 800450e:	4614      	mov	r4, r2
 8004510:	4698      	mov	r8, r3
 8004512:	4606      	mov	r6, r0
 8004514:	b09d      	sub	sp, #116	@ 0x74
 8004516:	b118      	cbz	r0, 8004520 <_vfiprintf_r+0x18>
 8004518:	6a03      	ldr	r3, [r0, #32]
 800451a:	b90b      	cbnz	r3, 8004520 <_vfiprintf_r+0x18>
 800451c:	f7ff f97c 	bl	8003818 <__sinit>
 8004520:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004522:	07d9      	lsls	r1, r3, #31
 8004524:	d405      	bmi.n	8004532 <_vfiprintf_r+0x2a>
 8004526:	89ab      	ldrh	r3, [r5, #12]
 8004528:	059a      	lsls	r2, r3, #22
 800452a:	d402      	bmi.n	8004532 <_vfiprintf_r+0x2a>
 800452c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800452e:	f7ff faa0 	bl	8003a72 <__retarget_lock_acquire_recursive>
 8004532:	89ab      	ldrh	r3, [r5, #12]
 8004534:	071b      	lsls	r3, r3, #28
 8004536:	d501      	bpl.n	800453c <_vfiprintf_r+0x34>
 8004538:	692b      	ldr	r3, [r5, #16]
 800453a:	b99b      	cbnz	r3, 8004564 <_vfiprintf_r+0x5c>
 800453c:	4629      	mov	r1, r5
 800453e:	4630      	mov	r0, r6
 8004540:	f000 f938 	bl	80047b4 <__swsetup_r>
 8004544:	b170      	cbz	r0, 8004564 <_vfiprintf_r+0x5c>
 8004546:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004548:	07dc      	lsls	r4, r3, #31
 800454a:	d504      	bpl.n	8004556 <_vfiprintf_r+0x4e>
 800454c:	f04f 30ff 	mov.w	r0, #4294967295
 8004550:	b01d      	add	sp, #116	@ 0x74
 8004552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004556:	89ab      	ldrh	r3, [r5, #12]
 8004558:	0598      	lsls	r0, r3, #22
 800455a:	d4f7      	bmi.n	800454c <_vfiprintf_r+0x44>
 800455c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800455e:	f7ff fa89 	bl	8003a74 <__retarget_lock_release_recursive>
 8004562:	e7f3      	b.n	800454c <_vfiprintf_r+0x44>
 8004564:	2300      	movs	r3, #0
 8004566:	9309      	str	r3, [sp, #36]	@ 0x24
 8004568:	2320      	movs	r3, #32
 800456a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800456e:	2330      	movs	r3, #48	@ 0x30
 8004570:	f04f 0901 	mov.w	r9, #1
 8004574:	f8cd 800c 	str.w	r8, [sp, #12]
 8004578:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8004724 <_vfiprintf_r+0x21c>
 800457c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004580:	4623      	mov	r3, r4
 8004582:	469a      	mov	sl, r3
 8004584:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004588:	b10a      	cbz	r2, 800458e <_vfiprintf_r+0x86>
 800458a:	2a25      	cmp	r2, #37	@ 0x25
 800458c:	d1f9      	bne.n	8004582 <_vfiprintf_r+0x7a>
 800458e:	ebba 0b04 	subs.w	fp, sl, r4
 8004592:	d00b      	beq.n	80045ac <_vfiprintf_r+0xa4>
 8004594:	465b      	mov	r3, fp
 8004596:	4622      	mov	r2, r4
 8004598:	4629      	mov	r1, r5
 800459a:	4630      	mov	r0, r6
 800459c:	f7ff ffa2 	bl	80044e4 <__sfputs_r>
 80045a0:	3001      	adds	r0, #1
 80045a2:	f000 80a7 	beq.w	80046f4 <_vfiprintf_r+0x1ec>
 80045a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80045a8:	445a      	add	r2, fp
 80045aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80045ac:	f89a 3000 	ldrb.w	r3, [sl]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f000 809f 	beq.w	80046f4 <_vfiprintf_r+0x1ec>
 80045b6:	2300      	movs	r3, #0
 80045b8:	f04f 32ff 	mov.w	r2, #4294967295
 80045bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045c0:	f10a 0a01 	add.w	sl, sl, #1
 80045c4:	9304      	str	r3, [sp, #16]
 80045c6:	9307      	str	r3, [sp, #28]
 80045c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80045cc:	931a      	str	r3, [sp, #104]	@ 0x68
 80045ce:	4654      	mov	r4, sl
 80045d0:	2205      	movs	r2, #5
 80045d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045d6:	4853      	ldr	r0, [pc, #332]	@ (8004724 <_vfiprintf_r+0x21c>)
 80045d8:	f7ff ff2c 	bl	8004434 <memchr>
 80045dc:	9a04      	ldr	r2, [sp, #16]
 80045de:	b9d8      	cbnz	r0, 8004618 <_vfiprintf_r+0x110>
 80045e0:	06d1      	lsls	r1, r2, #27
 80045e2:	bf44      	itt	mi
 80045e4:	2320      	movmi	r3, #32
 80045e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80045ea:	0713      	lsls	r3, r2, #28
 80045ec:	bf44      	itt	mi
 80045ee:	232b      	movmi	r3, #43	@ 0x2b
 80045f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80045f4:	f89a 3000 	ldrb.w	r3, [sl]
 80045f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80045fa:	d015      	beq.n	8004628 <_vfiprintf_r+0x120>
 80045fc:	4654      	mov	r4, sl
 80045fe:	2000      	movs	r0, #0
 8004600:	f04f 0c0a 	mov.w	ip, #10
 8004604:	9a07      	ldr	r2, [sp, #28]
 8004606:	4621      	mov	r1, r4
 8004608:	f811 3b01 	ldrb.w	r3, [r1], #1
 800460c:	3b30      	subs	r3, #48	@ 0x30
 800460e:	2b09      	cmp	r3, #9
 8004610:	d94b      	bls.n	80046aa <_vfiprintf_r+0x1a2>
 8004612:	b1b0      	cbz	r0, 8004642 <_vfiprintf_r+0x13a>
 8004614:	9207      	str	r2, [sp, #28]
 8004616:	e014      	b.n	8004642 <_vfiprintf_r+0x13a>
 8004618:	eba0 0308 	sub.w	r3, r0, r8
 800461c:	fa09 f303 	lsl.w	r3, r9, r3
 8004620:	4313      	orrs	r3, r2
 8004622:	46a2      	mov	sl, r4
 8004624:	9304      	str	r3, [sp, #16]
 8004626:	e7d2      	b.n	80045ce <_vfiprintf_r+0xc6>
 8004628:	9b03      	ldr	r3, [sp, #12]
 800462a:	1d19      	adds	r1, r3, #4
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	9103      	str	r1, [sp, #12]
 8004630:	2b00      	cmp	r3, #0
 8004632:	bfbb      	ittet	lt
 8004634:	425b      	neglt	r3, r3
 8004636:	f042 0202 	orrlt.w	r2, r2, #2
 800463a:	9307      	strge	r3, [sp, #28]
 800463c:	9307      	strlt	r3, [sp, #28]
 800463e:	bfb8      	it	lt
 8004640:	9204      	strlt	r2, [sp, #16]
 8004642:	7823      	ldrb	r3, [r4, #0]
 8004644:	2b2e      	cmp	r3, #46	@ 0x2e
 8004646:	d10a      	bne.n	800465e <_vfiprintf_r+0x156>
 8004648:	7863      	ldrb	r3, [r4, #1]
 800464a:	2b2a      	cmp	r3, #42	@ 0x2a
 800464c:	d132      	bne.n	80046b4 <_vfiprintf_r+0x1ac>
 800464e:	9b03      	ldr	r3, [sp, #12]
 8004650:	3402      	adds	r4, #2
 8004652:	1d1a      	adds	r2, r3, #4
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	9203      	str	r2, [sp, #12]
 8004658:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800465c:	9305      	str	r3, [sp, #20]
 800465e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8004728 <_vfiprintf_r+0x220>
 8004662:	2203      	movs	r2, #3
 8004664:	4650      	mov	r0, sl
 8004666:	7821      	ldrb	r1, [r4, #0]
 8004668:	f7ff fee4 	bl	8004434 <memchr>
 800466c:	b138      	cbz	r0, 800467e <_vfiprintf_r+0x176>
 800466e:	2240      	movs	r2, #64	@ 0x40
 8004670:	9b04      	ldr	r3, [sp, #16]
 8004672:	eba0 000a 	sub.w	r0, r0, sl
 8004676:	4082      	lsls	r2, r0
 8004678:	4313      	orrs	r3, r2
 800467a:	3401      	adds	r4, #1
 800467c:	9304      	str	r3, [sp, #16]
 800467e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004682:	2206      	movs	r2, #6
 8004684:	4829      	ldr	r0, [pc, #164]	@ (800472c <_vfiprintf_r+0x224>)
 8004686:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800468a:	f7ff fed3 	bl	8004434 <memchr>
 800468e:	2800      	cmp	r0, #0
 8004690:	d03f      	beq.n	8004712 <_vfiprintf_r+0x20a>
 8004692:	4b27      	ldr	r3, [pc, #156]	@ (8004730 <_vfiprintf_r+0x228>)
 8004694:	bb1b      	cbnz	r3, 80046de <_vfiprintf_r+0x1d6>
 8004696:	9b03      	ldr	r3, [sp, #12]
 8004698:	3307      	adds	r3, #7
 800469a:	f023 0307 	bic.w	r3, r3, #7
 800469e:	3308      	adds	r3, #8
 80046a0:	9303      	str	r3, [sp, #12]
 80046a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046a4:	443b      	add	r3, r7
 80046a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80046a8:	e76a      	b.n	8004580 <_vfiprintf_r+0x78>
 80046aa:	460c      	mov	r4, r1
 80046ac:	2001      	movs	r0, #1
 80046ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80046b2:	e7a8      	b.n	8004606 <_vfiprintf_r+0xfe>
 80046b4:	2300      	movs	r3, #0
 80046b6:	f04f 0c0a 	mov.w	ip, #10
 80046ba:	4619      	mov	r1, r3
 80046bc:	3401      	adds	r4, #1
 80046be:	9305      	str	r3, [sp, #20]
 80046c0:	4620      	mov	r0, r4
 80046c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046c6:	3a30      	subs	r2, #48	@ 0x30
 80046c8:	2a09      	cmp	r2, #9
 80046ca:	d903      	bls.n	80046d4 <_vfiprintf_r+0x1cc>
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d0c6      	beq.n	800465e <_vfiprintf_r+0x156>
 80046d0:	9105      	str	r1, [sp, #20]
 80046d2:	e7c4      	b.n	800465e <_vfiprintf_r+0x156>
 80046d4:	4604      	mov	r4, r0
 80046d6:	2301      	movs	r3, #1
 80046d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80046dc:	e7f0      	b.n	80046c0 <_vfiprintf_r+0x1b8>
 80046de:	ab03      	add	r3, sp, #12
 80046e0:	9300      	str	r3, [sp, #0]
 80046e2:	462a      	mov	r2, r5
 80046e4:	4630      	mov	r0, r6
 80046e6:	4b13      	ldr	r3, [pc, #76]	@ (8004734 <_vfiprintf_r+0x22c>)
 80046e8:	a904      	add	r1, sp, #16
 80046ea:	f3af 8000 	nop.w
 80046ee:	4607      	mov	r7, r0
 80046f0:	1c78      	adds	r0, r7, #1
 80046f2:	d1d6      	bne.n	80046a2 <_vfiprintf_r+0x19a>
 80046f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80046f6:	07d9      	lsls	r1, r3, #31
 80046f8:	d405      	bmi.n	8004706 <_vfiprintf_r+0x1fe>
 80046fa:	89ab      	ldrh	r3, [r5, #12]
 80046fc:	059a      	lsls	r2, r3, #22
 80046fe:	d402      	bmi.n	8004706 <_vfiprintf_r+0x1fe>
 8004700:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004702:	f7ff f9b7 	bl	8003a74 <__retarget_lock_release_recursive>
 8004706:	89ab      	ldrh	r3, [r5, #12]
 8004708:	065b      	lsls	r3, r3, #25
 800470a:	f53f af1f 	bmi.w	800454c <_vfiprintf_r+0x44>
 800470e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004710:	e71e      	b.n	8004550 <_vfiprintf_r+0x48>
 8004712:	ab03      	add	r3, sp, #12
 8004714:	9300      	str	r3, [sp, #0]
 8004716:	462a      	mov	r2, r5
 8004718:	4630      	mov	r0, r6
 800471a:	4b06      	ldr	r3, [pc, #24]	@ (8004734 <_vfiprintf_r+0x22c>)
 800471c:	a904      	add	r1, sp, #16
 800471e:	f7ff fc9f 	bl	8004060 <_printf_i>
 8004722:	e7e4      	b.n	80046ee <_vfiprintf_r+0x1e6>
 8004724:	080058a9 	.word	0x080058a9
 8004728:	080058af 	.word	0x080058af
 800472c:	080058b3 	.word	0x080058b3
 8004730:	00000000 	.word	0x00000000
 8004734:	080044e5 	.word	0x080044e5

08004738 <__swbuf_r>:
 8004738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800473a:	460e      	mov	r6, r1
 800473c:	4614      	mov	r4, r2
 800473e:	4605      	mov	r5, r0
 8004740:	b118      	cbz	r0, 800474a <__swbuf_r+0x12>
 8004742:	6a03      	ldr	r3, [r0, #32]
 8004744:	b90b      	cbnz	r3, 800474a <__swbuf_r+0x12>
 8004746:	f7ff f867 	bl	8003818 <__sinit>
 800474a:	69a3      	ldr	r3, [r4, #24]
 800474c:	60a3      	str	r3, [r4, #8]
 800474e:	89a3      	ldrh	r3, [r4, #12]
 8004750:	071a      	lsls	r2, r3, #28
 8004752:	d501      	bpl.n	8004758 <__swbuf_r+0x20>
 8004754:	6923      	ldr	r3, [r4, #16]
 8004756:	b943      	cbnz	r3, 800476a <__swbuf_r+0x32>
 8004758:	4621      	mov	r1, r4
 800475a:	4628      	mov	r0, r5
 800475c:	f000 f82a 	bl	80047b4 <__swsetup_r>
 8004760:	b118      	cbz	r0, 800476a <__swbuf_r+0x32>
 8004762:	f04f 37ff 	mov.w	r7, #4294967295
 8004766:	4638      	mov	r0, r7
 8004768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800476a:	6823      	ldr	r3, [r4, #0]
 800476c:	6922      	ldr	r2, [r4, #16]
 800476e:	b2f6      	uxtb	r6, r6
 8004770:	1a98      	subs	r0, r3, r2
 8004772:	6963      	ldr	r3, [r4, #20]
 8004774:	4637      	mov	r7, r6
 8004776:	4283      	cmp	r3, r0
 8004778:	dc05      	bgt.n	8004786 <__swbuf_r+0x4e>
 800477a:	4621      	mov	r1, r4
 800477c:	4628      	mov	r0, r5
 800477e:	f7ff fe0f 	bl	80043a0 <_fflush_r>
 8004782:	2800      	cmp	r0, #0
 8004784:	d1ed      	bne.n	8004762 <__swbuf_r+0x2a>
 8004786:	68a3      	ldr	r3, [r4, #8]
 8004788:	3b01      	subs	r3, #1
 800478a:	60a3      	str	r3, [r4, #8]
 800478c:	6823      	ldr	r3, [r4, #0]
 800478e:	1c5a      	adds	r2, r3, #1
 8004790:	6022      	str	r2, [r4, #0]
 8004792:	701e      	strb	r6, [r3, #0]
 8004794:	6962      	ldr	r2, [r4, #20]
 8004796:	1c43      	adds	r3, r0, #1
 8004798:	429a      	cmp	r2, r3
 800479a:	d004      	beq.n	80047a6 <__swbuf_r+0x6e>
 800479c:	89a3      	ldrh	r3, [r4, #12]
 800479e:	07db      	lsls	r3, r3, #31
 80047a0:	d5e1      	bpl.n	8004766 <__swbuf_r+0x2e>
 80047a2:	2e0a      	cmp	r6, #10
 80047a4:	d1df      	bne.n	8004766 <__swbuf_r+0x2e>
 80047a6:	4621      	mov	r1, r4
 80047a8:	4628      	mov	r0, r5
 80047aa:	f7ff fdf9 	bl	80043a0 <_fflush_r>
 80047ae:	2800      	cmp	r0, #0
 80047b0:	d0d9      	beq.n	8004766 <__swbuf_r+0x2e>
 80047b2:	e7d6      	b.n	8004762 <__swbuf_r+0x2a>

080047b4 <__swsetup_r>:
 80047b4:	b538      	push	{r3, r4, r5, lr}
 80047b6:	4b29      	ldr	r3, [pc, #164]	@ (800485c <__swsetup_r+0xa8>)
 80047b8:	4605      	mov	r5, r0
 80047ba:	6818      	ldr	r0, [r3, #0]
 80047bc:	460c      	mov	r4, r1
 80047be:	b118      	cbz	r0, 80047c8 <__swsetup_r+0x14>
 80047c0:	6a03      	ldr	r3, [r0, #32]
 80047c2:	b90b      	cbnz	r3, 80047c8 <__swsetup_r+0x14>
 80047c4:	f7ff f828 	bl	8003818 <__sinit>
 80047c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047cc:	0719      	lsls	r1, r3, #28
 80047ce:	d422      	bmi.n	8004816 <__swsetup_r+0x62>
 80047d0:	06da      	lsls	r2, r3, #27
 80047d2:	d407      	bmi.n	80047e4 <__swsetup_r+0x30>
 80047d4:	2209      	movs	r2, #9
 80047d6:	602a      	str	r2, [r5, #0]
 80047d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047dc:	f04f 30ff 	mov.w	r0, #4294967295
 80047e0:	81a3      	strh	r3, [r4, #12]
 80047e2:	e033      	b.n	800484c <__swsetup_r+0x98>
 80047e4:	0758      	lsls	r0, r3, #29
 80047e6:	d512      	bpl.n	800480e <__swsetup_r+0x5a>
 80047e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80047ea:	b141      	cbz	r1, 80047fe <__swsetup_r+0x4a>
 80047ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80047f0:	4299      	cmp	r1, r3
 80047f2:	d002      	beq.n	80047fa <__swsetup_r+0x46>
 80047f4:	4628      	mov	r0, r5
 80047f6:	f7ff f96b 	bl	8003ad0 <_free_r>
 80047fa:	2300      	movs	r3, #0
 80047fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80047fe:	89a3      	ldrh	r3, [r4, #12]
 8004800:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004804:	81a3      	strh	r3, [r4, #12]
 8004806:	2300      	movs	r3, #0
 8004808:	6063      	str	r3, [r4, #4]
 800480a:	6923      	ldr	r3, [r4, #16]
 800480c:	6023      	str	r3, [r4, #0]
 800480e:	89a3      	ldrh	r3, [r4, #12]
 8004810:	f043 0308 	orr.w	r3, r3, #8
 8004814:	81a3      	strh	r3, [r4, #12]
 8004816:	6923      	ldr	r3, [r4, #16]
 8004818:	b94b      	cbnz	r3, 800482e <__swsetup_r+0x7a>
 800481a:	89a3      	ldrh	r3, [r4, #12]
 800481c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004820:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004824:	d003      	beq.n	800482e <__swsetup_r+0x7a>
 8004826:	4621      	mov	r1, r4
 8004828:	4628      	mov	r0, r5
 800482a:	f000 f88a 	bl	8004942 <__smakebuf_r>
 800482e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004832:	f013 0201 	ands.w	r2, r3, #1
 8004836:	d00a      	beq.n	800484e <__swsetup_r+0x9a>
 8004838:	2200      	movs	r2, #0
 800483a:	60a2      	str	r2, [r4, #8]
 800483c:	6962      	ldr	r2, [r4, #20]
 800483e:	4252      	negs	r2, r2
 8004840:	61a2      	str	r2, [r4, #24]
 8004842:	6922      	ldr	r2, [r4, #16]
 8004844:	b942      	cbnz	r2, 8004858 <__swsetup_r+0xa4>
 8004846:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800484a:	d1c5      	bne.n	80047d8 <__swsetup_r+0x24>
 800484c:	bd38      	pop	{r3, r4, r5, pc}
 800484e:	0799      	lsls	r1, r3, #30
 8004850:	bf58      	it	pl
 8004852:	6962      	ldrpl	r2, [r4, #20]
 8004854:	60a2      	str	r2, [r4, #8]
 8004856:	e7f4      	b.n	8004842 <__swsetup_r+0x8e>
 8004858:	2000      	movs	r0, #0
 800485a:	e7f7      	b.n	800484c <__swsetup_r+0x98>
 800485c:	20000020 	.word	0x20000020

08004860 <_raise_r>:
 8004860:	291f      	cmp	r1, #31
 8004862:	b538      	push	{r3, r4, r5, lr}
 8004864:	4605      	mov	r5, r0
 8004866:	460c      	mov	r4, r1
 8004868:	d904      	bls.n	8004874 <_raise_r+0x14>
 800486a:	2316      	movs	r3, #22
 800486c:	6003      	str	r3, [r0, #0]
 800486e:	f04f 30ff 	mov.w	r0, #4294967295
 8004872:	bd38      	pop	{r3, r4, r5, pc}
 8004874:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004876:	b112      	cbz	r2, 800487e <_raise_r+0x1e>
 8004878:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800487c:	b94b      	cbnz	r3, 8004892 <_raise_r+0x32>
 800487e:	4628      	mov	r0, r5
 8004880:	f000 f830 	bl	80048e4 <_getpid_r>
 8004884:	4622      	mov	r2, r4
 8004886:	4601      	mov	r1, r0
 8004888:	4628      	mov	r0, r5
 800488a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800488e:	f000 b817 	b.w	80048c0 <_kill_r>
 8004892:	2b01      	cmp	r3, #1
 8004894:	d00a      	beq.n	80048ac <_raise_r+0x4c>
 8004896:	1c59      	adds	r1, r3, #1
 8004898:	d103      	bne.n	80048a2 <_raise_r+0x42>
 800489a:	2316      	movs	r3, #22
 800489c:	6003      	str	r3, [r0, #0]
 800489e:	2001      	movs	r0, #1
 80048a0:	e7e7      	b.n	8004872 <_raise_r+0x12>
 80048a2:	2100      	movs	r1, #0
 80048a4:	4620      	mov	r0, r4
 80048a6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80048aa:	4798      	blx	r3
 80048ac:	2000      	movs	r0, #0
 80048ae:	e7e0      	b.n	8004872 <_raise_r+0x12>

080048b0 <raise>:
 80048b0:	4b02      	ldr	r3, [pc, #8]	@ (80048bc <raise+0xc>)
 80048b2:	4601      	mov	r1, r0
 80048b4:	6818      	ldr	r0, [r3, #0]
 80048b6:	f7ff bfd3 	b.w	8004860 <_raise_r>
 80048ba:	bf00      	nop
 80048bc:	20000020 	.word	0x20000020

080048c0 <_kill_r>:
 80048c0:	b538      	push	{r3, r4, r5, lr}
 80048c2:	2300      	movs	r3, #0
 80048c4:	4d06      	ldr	r5, [pc, #24]	@ (80048e0 <_kill_r+0x20>)
 80048c6:	4604      	mov	r4, r0
 80048c8:	4608      	mov	r0, r1
 80048ca:	4611      	mov	r1, r2
 80048cc:	602b      	str	r3, [r5, #0]
 80048ce:	f7fc fa12 	bl	8000cf6 <_kill>
 80048d2:	1c43      	adds	r3, r0, #1
 80048d4:	d102      	bne.n	80048dc <_kill_r+0x1c>
 80048d6:	682b      	ldr	r3, [r5, #0]
 80048d8:	b103      	cbz	r3, 80048dc <_kill_r+0x1c>
 80048da:	6023      	str	r3, [r4, #0]
 80048dc:	bd38      	pop	{r3, r4, r5, pc}
 80048de:	bf00      	nop
 80048e0:	20000700 	.word	0x20000700

080048e4 <_getpid_r>:
 80048e4:	f7fc ba00 	b.w	8000ce8 <_getpid>

080048e8 <_malloc_usable_size_r>:
 80048e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048ec:	1f18      	subs	r0, r3, #4
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	bfbc      	itt	lt
 80048f2:	580b      	ldrlt	r3, [r1, r0]
 80048f4:	18c0      	addlt	r0, r0, r3
 80048f6:	4770      	bx	lr

080048f8 <__swhatbuf_r>:
 80048f8:	b570      	push	{r4, r5, r6, lr}
 80048fa:	460c      	mov	r4, r1
 80048fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004900:	4615      	mov	r5, r2
 8004902:	2900      	cmp	r1, #0
 8004904:	461e      	mov	r6, r3
 8004906:	b096      	sub	sp, #88	@ 0x58
 8004908:	da0c      	bge.n	8004924 <__swhatbuf_r+0x2c>
 800490a:	89a3      	ldrh	r3, [r4, #12]
 800490c:	2100      	movs	r1, #0
 800490e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004912:	bf14      	ite	ne
 8004914:	2340      	movne	r3, #64	@ 0x40
 8004916:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800491a:	2000      	movs	r0, #0
 800491c:	6031      	str	r1, [r6, #0]
 800491e:	602b      	str	r3, [r5, #0]
 8004920:	b016      	add	sp, #88	@ 0x58
 8004922:	bd70      	pop	{r4, r5, r6, pc}
 8004924:	466a      	mov	r2, sp
 8004926:	f000 f849 	bl	80049bc <_fstat_r>
 800492a:	2800      	cmp	r0, #0
 800492c:	dbed      	blt.n	800490a <__swhatbuf_r+0x12>
 800492e:	9901      	ldr	r1, [sp, #4]
 8004930:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004934:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004938:	4259      	negs	r1, r3
 800493a:	4159      	adcs	r1, r3
 800493c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004940:	e7eb      	b.n	800491a <__swhatbuf_r+0x22>

08004942 <__smakebuf_r>:
 8004942:	898b      	ldrh	r3, [r1, #12]
 8004944:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004946:	079d      	lsls	r5, r3, #30
 8004948:	4606      	mov	r6, r0
 800494a:	460c      	mov	r4, r1
 800494c:	d507      	bpl.n	800495e <__smakebuf_r+0x1c>
 800494e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004952:	6023      	str	r3, [r4, #0]
 8004954:	6123      	str	r3, [r4, #16]
 8004956:	2301      	movs	r3, #1
 8004958:	6163      	str	r3, [r4, #20]
 800495a:	b003      	add	sp, #12
 800495c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800495e:	466a      	mov	r2, sp
 8004960:	ab01      	add	r3, sp, #4
 8004962:	f7ff ffc9 	bl	80048f8 <__swhatbuf_r>
 8004966:	9f00      	ldr	r7, [sp, #0]
 8004968:	4605      	mov	r5, r0
 800496a:	4639      	mov	r1, r7
 800496c:	4630      	mov	r0, r6
 800496e:	f7ff f921 	bl	8003bb4 <_malloc_r>
 8004972:	b948      	cbnz	r0, 8004988 <__smakebuf_r+0x46>
 8004974:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004978:	059a      	lsls	r2, r3, #22
 800497a:	d4ee      	bmi.n	800495a <__smakebuf_r+0x18>
 800497c:	f023 0303 	bic.w	r3, r3, #3
 8004980:	f043 0302 	orr.w	r3, r3, #2
 8004984:	81a3      	strh	r3, [r4, #12]
 8004986:	e7e2      	b.n	800494e <__smakebuf_r+0xc>
 8004988:	89a3      	ldrh	r3, [r4, #12]
 800498a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800498e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004992:	81a3      	strh	r3, [r4, #12]
 8004994:	9b01      	ldr	r3, [sp, #4]
 8004996:	6020      	str	r0, [r4, #0]
 8004998:	b15b      	cbz	r3, 80049b2 <__smakebuf_r+0x70>
 800499a:	4630      	mov	r0, r6
 800499c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049a0:	f000 f81e 	bl	80049e0 <_isatty_r>
 80049a4:	b128      	cbz	r0, 80049b2 <__smakebuf_r+0x70>
 80049a6:	89a3      	ldrh	r3, [r4, #12]
 80049a8:	f023 0303 	bic.w	r3, r3, #3
 80049ac:	f043 0301 	orr.w	r3, r3, #1
 80049b0:	81a3      	strh	r3, [r4, #12]
 80049b2:	89a3      	ldrh	r3, [r4, #12]
 80049b4:	431d      	orrs	r5, r3
 80049b6:	81a5      	strh	r5, [r4, #12]
 80049b8:	e7cf      	b.n	800495a <__smakebuf_r+0x18>
	...

080049bc <_fstat_r>:
 80049bc:	b538      	push	{r3, r4, r5, lr}
 80049be:	2300      	movs	r3, #0
 80049c0:	4d06      	ldr	r5, [pc, #24]	@ (80049dc <_fstat_r+0x20>)
 80049c2:	4604      	mov	r4, r0
 80049c4:	4608      	mov	r0, r1
 80049c6:	4611      	mov	r1, r2
 80049c8:	602b      	str	r3, [r5, #0]
 80049ca:	f7fc f9f3 	bl	8000db4 <_fstat>
 80049ce:	1c43      	adds	r3, r0, #1
 80049d0:	d102      	bne.n	80049d8 <_fstat_r+0x1c>
 80049d2:	682b      	ldr	r3, [r5, #0]
 80049d4:	b103      	cbz	r3, 80049d8 <_fstat_r+0x1c>
 80049d6:	6023      	str	r3, [r4, #0]
 80049d8:	bd38      	pop	{r3, r4, r5, pc}
 80049da:	bf00      	nop
 80049dc:	20000700 	.word	0x20000700

080049e0 <_isatty_r>:
 80049e0:	b538      	push	{r3, r4, r5, lr}
 80049e2:	2300      	movs	r3, #0
 80049e4:	4d05      	ldr	r5, [pc, #20]	@ (80049fc <_isatty_r+0x1c>)
 80049e6:	4604      	mov	r4, r0
 80049e8:	4608      	mov	r0, r1
 80049ea:	602b      	str	r3, [r5, #0]
 80049ec:	f7fc f9f1 	bl	8000dd2 <_isatty>
 80049f0:	1c43      	adds	r3, r0, #1
 80049f2:	d102      	bne.n	80049fa <_isatty_r+0x1a>
 80049f4:	682b      	ldr	r3, [r5, #0]
 80049f6:	b103      	cbz	r3, 80049fa <_isatty_r+0x1a>
 80049f8:	6023      	str	r3, [r4, #0]
 80049fa:	bd38      	pop	{r3, r4, r5, pc}
 80049fc:	20000700 	.word	0x20000700

08004a00 <_init>:
 8004a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a02:	bf00      	nop
 8004a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a06:	bc08      	pop	{r3}
 8004a08:	469e      	mov	lr, r3
 8004a0a:	4770      	bx	lr

08004a0c <_fini>:
 8004a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a0e:	bf00      	nop
 8004a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a12:	bc08      	pop	{r3}
 8004a14:	469e      	mov	lr, r3
 8004a16:	4770      	bx	lr
